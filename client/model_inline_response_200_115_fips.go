/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 November, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.52.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200115Fips A hash of FIPS options applied to the Network
type InlineResponse200115Fips struct {
	// Enables / disables FIPS on the network.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewInlineResponse200115Fips instantiates a new InlineResponse200115Fips object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200115Fips() *InlineResponse200115Fips {
	this := InlineResponse200115Fips{}
	return &this
}

// NewInlineResponse200115FipsWithDefaults instantiates a new InlineResponse200115Fips object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200115FipsWithDefaults() *InlineResponse200115Fips {
	this := InlineResponse200115Fips{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InlineResponse200115Fips) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200115Fips) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InlineResponse200115Fips) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InlineResponse200115Fips) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o InlineResponse200115Fips) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200115Fips struct {
	value *InlineResponse200115Fips
	isSet bool
}

func (v NullableInlineResponse200115Fips) Get() *InlineResponse200115Fips {
	return v.value
}

func (v *NullableInlineResponse200115Fips) Set(val *InlineResponse200115Fips) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200115Fips) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200115Fips) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200115Fips(val *InlineResponse200115Fips) *NullableInlineResponse200115Fips {
	return &NullableInlineResponse200115Fips{value: val, isSet: true}
}

func (v NullableInlineResponse200115Fips) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200115Fips) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


