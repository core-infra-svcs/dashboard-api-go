/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200342CountsByStatus The count data, indexed by active or inactive status
type InlineResponse200342CountsByStatus struct {
	Active *InlineResponse200342CountsByStatusActive `json:"active,omitempty"`
	Inactive *InlineResponse200342CountsByStatusInactive `json:"inactive,omitempty"`
}

// NewInlineResponse200342CountsByStatus instantiates a new InlineResponse200342CountsByStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200342CountsByStatus() *InlineResponse200342CountsByStatus {
	this := InlineResponse200342CountsByStatus{}
	return &this
}

// NewInlineResponse200342CountsByStatusWithDefaults instantiates a new InlineResponse200342CountsByStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200342CountsByStatusWithDefaults() *InlineResponse200342CountsByStatus {
	this := InlineResponse200342CountsByStatus{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *InlineResponse200342CountsByStatus) GetActive() InlineResponse200342CountsByStatusActive {
	if o == nil || isNil(o.Active) {
		var ret InlineResponse200342CountsByStatusActive
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200342CountsByStatus) GetActiveOk() (*InlineResponse200342CountsByStatusActive, bool) {
	if o == nil || isNil(o.Active) {
    return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *InlineResponse200342CountsByStatus) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given InlineResponse200342CountsByStatusActive and assigns it to the Active field.
func (o *InlineResponse200342CountsByStatus) SetActive(v InlineResponse200342CountsByStatusActive) {
	o.Active = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *InlineResponse200342CountsByStatus) GetInactive() InlineResponse200342CountsByStatusInactive {
	if o == nil || isNil(o.Inactive) {
		var ret InlineResponse200342CountsByStatusInactive
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200342CountsByStatus) GetInactiveOk() (*InlineResponse200342CountsByStatusInactive, bool) {
	if o == nil || isNil(o.Inactive) {
    return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *InlineResponse200342CountsByStatus) HasInactive() bool {
	if o != nil && !isNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given InlineResponse200342CountsByStatusInactive and assigns it to the Inactive field.
func (o *InlineResponse200342CountsByStatus) SetInactive(v InlineResponse200342CountsByStatusInactive) {
	o.Inactive = &v
}

func (o InlineResponse200342CountsByStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200342CountsByStatus struct {
	value *InlineResponse200342CountsByStatus
	isSet bool
}

func (v NullableInlineResponse200342CountsByStatus) Get() *InlineResponse200342CountsByStatus {
	return v.value
}

func (v *NullableInlineResponse200342CountsByStatus) Set(val *InlineResponse200342CountsByStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200342CountsByStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200342CountsByStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200342CountsByStatus(val *InlineResponse200342CountsByStatus) *NullableInlineResponse200342CountsByStatus {
	return &NullableInlineResponse200342CountsByStatus{value: val, isSet: true}
}

func (v NullableInlineResponse200342CountsByStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200342CountsByStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


