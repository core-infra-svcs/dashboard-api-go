/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200255 struct for InlineResponse200255
type InlineResponse200255 struct {
	// Resulting licenses from the move
	ResultingLicenses []InlineResponse200254 `json:"resultingLicenses,omitempty"`
}

// NewInlineResponse200255 instantiates a new InlineResponse200255 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200255() *InlineResponse200255 {
	this := InlineResponse200255{}
	return &this
}

// NewInlineResponse200255WithDefaults instantiates a new InlineResponse200255 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200255WithDefaults() *InlineResponse200255 {
	this := InlineResponse200255{}
	return &this
}

// GetResultingLicenses returns the ResultingLicenses field value if set, zero value otherwise.
func (o *InlineResponse200255) GetResultingLicenses() []InlineResponse200254 {
	if o == nil || isNil(o.ResultingLicenses) {
		var ret []InlineResponse200254
		return ret
	}
	return o.ResultingLicenses
}

// GetResultingLicensesOk returns a tuple with the ResultingLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200255) GetResultingLicensesOk() ([]InlineResponse200254, bool) {
	if o == nil || isNil(o.ResultingLicenses) {
    return nil, false
	}
	return o.ResultingLicenses, true
}

// HasResultingLicenses returns a boolean if a field has been set.
func (o *InlineResponse200255) HasResultingLicenses() bool {
	if o != nil && !isNil(o.ResultingLicenses) {
		return true
	}

	return false
}

// SetResultingLicenses gets a reference to the given []InlineResponse200254 and assigns it to the ResultingLicenses field.
func (o *InlineResponse200255) SetResultingLicenses(v []InlineResponse200254) {
	o.ResultingLicenses = v
}

func (o InlineResponse200255) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ResultingLicenses) {
		toSerialize["resultingLicenses"] = o.ResultingLicenses
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200255 struct {
	value *InlineResponse200255
	isSet bool
}

func (v NullableInlineResponse200255) Get() *InlineResponse200255 {
	return v.value
}

func (v *NullableInlineResponse200255) Set(val *InlineResponse200255) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200255) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200255) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200255(val *InlineResponse200255) *NullableInlineResponse200255 {
	return &NullableInlineResponse200255{value: val, isSet: true}
}

func (v NullableInlineResponse200255) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200255) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


