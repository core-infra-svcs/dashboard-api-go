/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.57.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200361ByInterface struct for InlineResponse200361ByInterface
type InlineResponse200361ByInterface struct {
	// The name of the wireless LAN controller interface
	Name *string `json:"name,omitempty"`
	Usage *InlineResponse200361Usage `json:"usage,omitempty"`
}

// NewInlineResponse200361ByInterface instantiates a new InlineResponse200361ByInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200361ByInterface() *InlineResponse200361ByInterface {
	this := InlineResponse200361ByInterface{}
	return &this
}

// NewInlineResponse200361ByInterfaceWithDefaults instantiates a new InlineResponse200361ByInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200361ByInterfaceWithDefaults() *InlineResponse200361ByInterface {
	this := InlineResponse200361ByInterface{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse200361ByInterface) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200361ByInterface) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse200361ByInterface) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse200361ByInterface) SetName(v string) {
	o.Name = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *InlineResponse200361ByInterface) GetUsage() InlineResponse200361Usage {
	if o == nil || isNil(o.Usage) {
		var ret InlineResponse200361Usage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200361ByInterface) GetUsageOk() (*InlineResponse200361Usage, bool) {
	if o == nil || isNil(o.Usage) {
    return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *InlineResponse200361ByInterface) HasUsage() bool {
	if o != nil && !isNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given InlineResponse200361Usage and assigns it to the Usage field.
func (o *InlineResponse200361ByInterface) SetUsage(v InlineResponse200361Usage) {
	o.Usage = &v
}

func (o InlineResponse200361ByInterface) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200361ByInterface struct {
	value *InlineResponse200361ByInterface
	isSet bool
}

func (v NullableInlineResponse200361ByInterface) Get() *InlineResponse200361ByInterface {
	return v.value
}

func (v *NullableInlineResponse200361ByInterface) Set(val *InlineResponse200361ByInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200361ByInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200361ByInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200361ByInterface(val *InlineResponse200361ByInterface) *NullableInlineResponse200361ByInterface {
	return &NullableInlineResponse200361ByInterface{value: val, isSet: true}
}

func (v NullableInlineResponse200361ByInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200361ByInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


