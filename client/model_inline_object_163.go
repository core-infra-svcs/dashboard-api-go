/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 October, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.63.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineObject163 struct for InlineObject163
type InlineObject163 struct {
	// A friendly name or description for the interface or VLAN (max length 128 characters).
	Name *string `json:"name,omitempty"`
	// The network that this L3 interface is on, in CIDR notation (ex. 10.1.1.0/24).
	Subnet NullableString `json:"subnet,omitempty"`
	// Switch Port ID when in Routed mode (CS 17.18 or higher required)
	SwitchPortId NullableString `json:"switchPortId,omitempty"`
	// The IP address that will be used for Layer 3 routing on this VLAN or subnet. This cannot be the same         as the device management IP.
	InterfaceIp NullableString `json:"interfaceIp,omitempty"`
	// Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
	MulticastRouting *string `json:"multicastRouting,omitempty"`
	// The VLAN this L3 interface is on. VLAN must be between 1 and 4094.
	VlanId NullableInt32 `json:"vlanId,omitempty"`
	// The next hop for any traffic that isn't going to a directly connected subnet or over a static route.         This IP address must exist in a subnet with a L3 interface. Required if this is the first IPv4 interface.
	DefaultGateway *string `json:"defaultGateway,omitempty"`
	OspfSettings *DevicesSerialSwitchRoutingInterfacesOspfSettings1 `json:"ospfSettings,omitempty"`
	Ipv6 *DevicesSerialSwitchRoutingInterfacesIpv61 `json:"ipv6,omitempty"`
	Vrf *DevicesSerialSwitchRoutingInterfacesVrf1 `json:"vrf,omitempty"`
	// The loopback settings of the interface.
	Loopback map[string]interface{} `json:"loopback,omitempty"`
}

// NewInlineObject163 instantiates a new InlineObject163 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject163() *InlineObject163 {
	this := InlineObject163{}
	return &this
}

// NewInlineObject163WithDefaults instantiates a new InlineObject163 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject163WithDefaults() *InlineObject163 {
	this := InlineObject163{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineObject163) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject163) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineObject163) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineObject163) SetName(v string) {
	o.Name = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject163) GetSubnet() string {
	if o == nil || isNil(o.Subnet.Get()) {
		var ret string
		return ret
	}
	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject163) GetSubnetOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// HasSubnet returns a boolean if a field has been set.
func (o *InlineObject163) HasSubnet() bool {
	if o != nil && o.Subnet.IsSet() {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given NullableString and assigns it to the Subnet field.
func (o *InlineObject163) SetSubnet(v string) {
	o.Subnet.Set(&v)
}
// SetSubnetNil sets the value for Subnet to be an explicit nil
func (o *InlineObject163) SetSubnetNil() {
	o.Subnet.Set(nil)
}

// UnsetSubnet ensures that no value is present for Subnet, not even an explicit nil
func (o *InlineObject163) UnsetSubnet() {
	o.Subnet.Unset()
}

// GetSwitchPortId returns the SwitchPortId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject163) GetSwitchPortId() string {
	if o == nil || isNil(o.SwitchPortId.Get()) {
		var ret string
		return ret
	}
	return *o.SwitchPortId.Get()
}

// GetSwitchPortIdOk returns a tuple with the SwitchPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject163) GetSwitchPortIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SwitchPortId.Get(), o.SwitchPortId.IsSet()
}

// HasSwitchPortId returns a boolean if a field has been set.
func (o *InlineObject163) HasSwitchPortId() bool {
	if o != nil && o.SwitchPortId.IsSet() {
		return true
	}

	return false
}

// SetSwitchPortId gets a reference to the given NullableString and assigns it to the SwitchPortId field.
func (o *InlineObject163) SetSwitchPortId(v string) {
	o.SwitchPortId.Set(&v)
}
// SetSwitchPortIdNil sets the value for SwitchPortId to be an explicit nil
func (o *InlineObject163) SetSwitchPortIdNil() {
	o.SwitchPortId.Set(nil)
}

// UnsetSwitchPortId ensures that no value is present for SwitchPortId, not even an explicit nil
func (o *InlineObject163) UnsetSwitchPortId() {
	o.SwitchPortId.Unset()
}

// GetInterfaceIp returns the InterfaceIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject163) GetInterfaceIp() string {
	if o == nil || isNil(o.InterfaceIp.Get()) {
		var ret string
		return ret
	}
	return *o.InterfaceIp.Get()
}

// GetInterfaceIpOk returns a tuple with the InterfaceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject163) GetInterfaceIpOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.InterfaceIp.Get(), o.InterfaceIp.IsSet()
}

// HasInterfaceIp returns a boolean if a field has been set.
func (o *InlineObject163) HasInterfaceIp() bool {
	if o != nil && o.InterfaceIp.IsSet() {
		return true
	}

	return false
}

// SetInterfaceIp gets a reference to the given NullableString and assigns it to the InterfaceIp field.
func (o *InlineObject163) SetInterfaceIp(v string) {
	o.InterfaceIp.Set(&v)
}
// SetInterfaceIpNil sets the value for InterfaceIp to be an explicit nil
func (o *InlineObject163) SetInterfaceIpNil() {
	o.InterfaceIp.Set(nil)
}

// UnsetInterfaceIp ensures that no value is present for InterfaceIp, not even an explicit nil
func (o *InlineObject163) UnsetInterfaceIp() {
	o.InterfaceIp.Unset()
}

// GetMulticastRouting returns the MulticastRouting field value if set, zero value otherwise.
func (o *InlineObject163) GetMulticastRouting() string {
	if o == nil || isNil(o.MulticastRouting) {
		var ret string
		return ret
	}
	return *o.MulticastRouting
}

// GetMulticastRoutingOk returns a tuple with the MulticastRouting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject163) GetMulticastRoutingOk() (*string, bool) {
	if o == nil || isNil(o.MulticastRouting) {
    return nil, false
	}
	return o.MulticastRouting, true
}

// HasMulticastRouting returns a boolean if a field has been set.
func (o *InlineObject163) HasMulticastRouting() bool {
	if o != nil && !isNil(o.MulticastRouting) {
		return true
	}

	return false
}

// SetMulticastRouting gets a reference to the given string and assigns it to the MulticastRouting field.
func (o *InlineObject163) SetMulticastRouting(v string) {
	o.MulticastRouting = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject163) GetVlanId() int32 {
	if o == nil || isNil(o.VlanId.Get()) {
		var ret int32
		return ret
	}
	return *o.VlanId.Get()
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject163) GetVlanIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.VlanId.Get(), o.VlanId.IsSet()
}

// HasVlanId returns a boolean if a field has been set.
func (o *InlineObject163) HasVlanId() bool {
	if o != nil && o.VlanId.IsSet() {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given NullableInt32 and assigns it to the VlanId field.
func (o *InlineObject163) SetVlanId(v int32) {
	o.VlanId.Set(&v)
}
// SetVlanIdNil sets the value for VlanId to be an explicit nil
func (o *InlineObject163) SetVlanIdNil() {
	o.VlanId.Set(nil)
}

// UnsetVlanId ensures that no value is present for VlanId, not even an explicit nil
func (o *InlineObject163) UnsetVlanId() {
	o.VlanId.Unset()
}

// GetDefaultGateway returns the DefaultGateway field value if set, zero value otherwise.
func (o *InlineObject163) GetDefaultGateway() string {
	if o == nil || isNil(o.DefaultGateway) {
		var ret string
		return ret
	}
	return *o.DefaultGateway
}

// GetDefaultGatewayOk returns a tuple with the DefaultGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject163) GetDefaultGatewayOk() (*string, bool) {
	if o == nil || isNil(o.DefaultGateway) {
    return nil, false
	}
	return o.DefaultGateway, true
}

// HasDefaultGateway returns a boolean if a field has been set.
func (o *InlineObject163) HasDefaultGateway() bool {
	if o != nil && !isNil(o.DefaultGateway) {
		return true
	}

	return false
}

// SetDefaultGateway gets a reference to the given string and assigns it to the DefaultGateway field.
func (o *InlineObject163) SetDefaultGateway(v string) {
	o.DefaultGateway = &v
}

// GetOspfSettings returns the OspfSettings field value if set, zero value otherwise.
func (o *InlineObject163) GetOspfSettings() DevicesSerialSwitchRoutingInterfacesOspfSettings1 {
	if o == nil || isNil(o.OspfSettings) {
		var ret DevicesSerialSwitchRoutingInterfacesOspfSettings1
		return ret
	}
	return *o.OspfSettings
}

// GetOspfSettingsOk returns a tuple with the OspfSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject163) GetOspfSettingsOk() (*DevicesSerialSwitchRoutingInterfacesOspfSettings1, bool) {
	if o == nil || isNil(o.OspfSettings) {
    return nil, false
	}
	return o.OspfSettings, true
}

// HasOspfSettings returns a boolean if a field has been set.
func (o *InlineObject163) HasOspfSettings() bool {
	if o != nil && !isNil(o.OspfSettings) {
		return true
	}

	return false
}

// SetOspfSettings gets a reference to the given DevicesSerialSwitchRoutingInterfacesOspfSettings1 and assigns it to the OspfSettings field.
func (o *InlineObject163) SetOspfSettings(v DevicesSerialSwitchRoutingInterfacesOspfSettings1) {
	o.OspfSettings = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *InlineObject163) GetIpv6() DevicesSerialSwitchRoutingInterfacesIpv61 {
	if o == nil || isNil(o.Ipv6) {
		var ret DevicesSerialSwitchRoutingInterfacesIpv61
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject163) GetIpv6Ok() (*DevicesSerialSwitchRoutingInterfacesIpv61, bool) {
	if o == nil || isNil(o.Ipv6) {
    return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *InlineObject163) HasIpv6() bool {
	if o != nil && !isNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given DevicesSerialSwitchRoutingInterfacesIpv61 and assigns it to the Ipv6 field.
func (o *InlineObject163) SetIpv6(v DevicesSerialSwitchRoutingInterfacesIpv61) {
	o.Ipv6 = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *InlineObject163) GetVrf() DevicesSerialSwitchRoutingInterfacesVrf1 {
	if o == nil || isNil(o.Vrf) {
		var ret DevicesSerialSwitchRoutingInterfacesVrf1
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject163) GetVrfOk() (*DevicesSerialSwitchRoutingInterfacesVrf1, bool) {
	if o == nil || isNil(o.Vrf) {
    return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *InlineObject163) HasVrf() bool {
	if o != nil && !isNil(o.Vrf) {
		return true
	}

	return false
}

// SetVrf gets a reference to the given DevicesSerialSwitchRoutingInterfacesVrf1 and assigns it to the Vrf field.
func (o *InlineObject163) SetVrf(v DevicesSerialSwitchRoutingInterfacesVrf1) {
	o.Vrf = &v
}

// GetLoopback returns the Loopback field value if set, zero value otherwise.
func (o *InlineObject163) GetLoopback() map[string]interface{} {
	if o == nil || isNil(o.Loopback) {
		var ret map[string]interface{}
		return ret
	}
	return o.Loopback
}

// GetLoopbackOk returns a tuple with the Loopback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject163) GetLoopbackOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Loopback) {
    return map[string]interface{}{}, false
	}
	return o.Loopback, true
}

// HasLoopback returns a boolean if a field has been set.
func (o *InlineObject163) HasLoopback() bool {
	if o != nil && !isNil(o.Loopback) {
		return true
	}

	return false
}

// SetLoopback gets a reference to the given map[string]interface{} and assigns it to the Loopback field.
func (o *InlineObject163) SetLoopback(v map[string]interface{}) {
	o.Loopback = v
}

func (o InlineObject163) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Subnet.IsSet() {
		toSerialize["subnet"] = o.Subnet.Get()
	}
	if o.SwitchPortId.IsSet() {
		toSerialize["switchPortId"] = o.SwitchPortId.Get()
	}
	if o.InterfaceIp.IsSet() {
		toSerialize["interfaceIp"] = o.InterfaceIp.Get()
	}
	if !isNil(o.MulticastRouting) {
		toSerialize["multicastRouting"] = o.MulticastRouting
	}
	if o.VlanId.IsSet() {
		toSerialize["vlanId"] = o.VlanId.Get()
	}
	if !isNil(o.DefaultGateway) {
		toSerialize["defaultGateway"] = o.DefaultGateway
	}
	if !isNil(o.OspfSettings) {
		toSerialize["ospfSettings"] = o.OspfSettings
	}
	if !isNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !isNil(o.Vrf) {
		toSerialize["vrf"] = o.Vrf
	}
	if !isNil(o.Loopback) {
		toSerialize["loopback"] = o.Loopback
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject163 struct {
	value *InlineObject163
	isSet bool
}

func (v NullableInlineObject163) Get() *InlineObject163 {
	return v.value
}

func (v *NullableInlineObject163) Set(val *InlineObject163) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject163) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject163) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject163(val *InlineObject163) *NullableInlineObject163 {
	return &NullableInlineObject163{value: val, isSet: true}
}

func (v NullableInlineObject163) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject163) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


