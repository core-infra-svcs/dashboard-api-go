/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 September, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.50.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200201 struct for InlineResponse200201
type InlineResponse200201 struct {
	Counts *InlineResponse200201Counts `json:"counts,omitempty"`
	Limits *InlineResponse200201Limits `json:"limits,omitempty"`
}

// NewInlineResponse200201 instantiates a new InlineResponse200201 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200201() *InlineResponse200201 {
	this := InlineResponse200201{}
	return &this
}

// NewInlineResponse200201WithDefaults instantiates a new InlineResponse200201 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200201WithDefaults() *InlineResponse200201 {
	this := InlineResponse200201{}
	return &this
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *InlineResponse200201) GetCounts() InlineResponse200201Counts {
	if o == nil || isNil(o.Counts) {
		var ret InlineResponse200201Counts
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200201) GetCountsOk() (*InlineResponse200201Counts, bool) {
	if o == nil || isNil(o.Counts) {
    return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *InlineResponse200201) HasCounts() bool {
	if o != nil && !isNil(o.Counts) {
		return true
	}

	return false
}

// SetCounts gets a reference to the given InlineResponse200201Counts and assigns it to the Counts field.
func (o *InlineResponse200201) SetCounts(v InlineResponse200201Counts) {
	o.Counts = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *InlineResponse200201) GetLimits() InlineResponse200201Limits {
	if o == nil || isNil(o.Limits) {
		var ret InlineResponse200201Limits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200201) GetLimitsOk() (*InlineResponse200201Limits, bool) {
	if o == nil || isNil(o.Limits) {
    return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *InlineResponse200201) HasLimits() bool {
	if o != nil && !isNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given InlineResponse200201Limits and assigns it to the Limits field.
func (o *InlineResponse200201) SetLimits(v InlineResponse200201Limits) {
	o.Limits = &v
}

func (o InlineResponse200201) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Counts) {
		toSerialize["counts"] = o.Counts
	}
	if !isNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200201 struct {
	value *InlineResponse200201
	isSet bool
}

func (v NullableInlineResponse200201) Get() *InlineResponse200201 {
	return v.value
}

func (v *NullableInlineResponse200201) Set(val *InlineResponse200201) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200201) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200201) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200201(val *InlineResponse200201) *NullableInlineResponse200201 {
	return &NullableInlineResponse200201{value: val, isSet: true}
}

func (v NullableInlineResponse200201) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200201) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


