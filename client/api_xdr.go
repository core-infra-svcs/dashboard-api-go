/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 June, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.59.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// XdrApiService XdrApi service
type XdrApiService service

type XdrApiDisableOrganizationIntegrationsXdrNetworksRequest struct {
	ctx context.Context
	ApiService *XdrApiService
	organizationId string
	disableOrganizationIntegrationsXdrNetworks *InlineObject268
}

func (r XdrApiDisableOrganizationIntegrationsXdrNetworksRequest) DisableOrganizationIntegrationsXdrNetworks(disableOrganizationIntegrationsXdrNetworks InlineObject268) XdrApiDisableOrganizationIntegrationsXdrNetworksRequest {
	r.disableOrganizationIntegrationsXdrNetworks = &disableOrganizationIntegrationsXdrNetworks
	return r
}

func (r XdrApiDisableOrganizationIntegrationsXdrNetworksRequest) Execute() (*InlineResponse200293, *http.Response, error) {
	return r.ApiService.DisableOrganizationIntegrationsXdrNetworksExecute(r)
}

/*
DisableOrganizationIntegrationsXdrNetworks Disable XDR on networks

Disable XDR on networks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return XdrApiDisableOrganizationIntegrationsXdrNetworksRequest
*/
func (a *XdrApiService) DisableOrganizationIntegrationsXdrNetworks(ctx context.Context, organizationId string) XdrApiDisableOrganizationIntegrationsXdrNetworksRequest {
	return XdrApiDisableOrganizationIntegrationsXdrNetworksRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200293
func (a *XdrApiService) DisableOrganizationIntegrationsXdrNetworksExecute(r XdrApiDisableOrganizationIntegrationsXdrNetworksRequest) (*InlineResponse200293, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200293
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "XdrApiService.DisableOrganizationIntegrationsXdrNetworks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/integrations/xdr/networks/disable"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.disableOrganizationIntegrationsXdrNetworks == nil {
		return localVarReturnValue, nil, reportError("disableOrganizationIntegrationsXdrNetworks is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.disableOrganizationIntegrationsXdrNetworks
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type XdrApiEnableOrganizationIntegrationsXdrNetworksRequest struct {
	ctx context.Context
	ApiService *XdrApiService
	organizationId string
	enableOrganizationIntegrationsXdrNetworks *InlineObject269
}

func (r XdrApiEnableOrganizationIntegrationsXdrNetworksRequest) EnableOrganizationIntegrationsXdrNetworks(enableOrganizationIntegrationsXdrNetworks InlineObject269) XdrApiEnableOrganizationIntegrationsXdrNetworksRequest {
	r.enableOrganizationIntegrationsXdrNetworks = &enableOrganizationIntegrationsXdrNetworks
	return r
}

func (r XdrApiEnableOrganizationIntegrationsXdrNetworksRequest) Execute() (*InlineResponse200294, *http.Response, error) {
	return r.ApiService.EnableOrganizationIntegrationsXdrNetworksExecute(r)
}

/*
EnableOrganizationIntegrationsXdrNetworks Enable XDR on networks

Enable XDR on networks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return XdrApiEnableOrganizationIntegrationsXdrNetworksRequest
*/
func (a *XdrApiService) EnableOrganizationIntegrationsXdrNetworks(ctx context.Context, organizationId string) XdrApiEnableOrganizationIntegrationsXdrNetworksRequest {
	return XdrApiEnableOrganizationIntegrationsXdrNetworksRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200294
func (a *XdrApiService) EnableOrganizationIntegrationsXdrNetworksExecute(r XdrApiEnableOrganizationIntegrationsXdrNetworksRequest) (*InlineResponse200294, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200294
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "XdrApiService.EnableOrganizationIntegrationsXdrNetworks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/integrations/xdr/networks/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enableOrganizationIntegrationsXdrNetworks == nil {
		return localVarReturnValue, nil, reportError("enableOrganizationIntegrationsXdrNetworks is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enableOrganizationIntegrationsXdrNetworks
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type XdrApiGetOrganizationIntegrationsXdrNetworksRequest struct {
	ctx context.Context
	ApiService *XdrApiService
	organizationId string
	networkIds *[]string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// Optional parameter to filter the results by network IDs
func (r XdrApiGetOrganizationIntegrationsXdrNetworksRequest) NetworkIds(networkIds []string) XdrApiGetOrganizationIntegrationsXdrNetworksRequest {
	r.networkIds = &networkIds
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 100. Default is 20.
func (r XdrApiGetOrganizationIntegrationsXdrNetworksRequest) PerPage(perPage int32) XdrApiGetOrganizationIntegrationsXdrNetworksRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r XdrApiGetOrganizationIntegrationsXdrNetworksRequest) StartingAfter(startingAfter string) XdrApiGetOrganizationIntegrationsXdrNetworksRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r XdrApiGetOrganizationIntegrationsXdrNetworksRequest) EndingBefore(endingBefore string) XdrApiGetOrganizationIntegrationsXdrNetworksRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r XdrApiGetOrganizationIntegrationsXdrNetworksRequest) Execute() (*InlineResponse200292, *http.Response, error) {
	return r.ApiService.GetOrganizationIntegrationsXdrNetworksExecute(r)
}

/*
GetOrganizationIntegrationsXdrNetworks Returns the networks in the organization that have XDR enabled

Returns the networks in the organization that have XDR enabled

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return XdrApiGetOrganizationIntegrationsXdrNetworksRequest
*/
func (a *XdrApiService) GetOrganizationIntegrationsXdrNetworks(ctx context.Context, organizationId string) XdrApiGetOrganizationIntegrationsXdrNetworksRequest {
	return XdrApiGetOrganizationIntegrationsXdrNetworksRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200292
func (a *XdrApiService) GetOrganizationIntegrationsXdrNetworksExecute(r XdrApiGetOrganizationIntegrationsXdrNetworksRequest) (*InlineResponse200292, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200292
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "XdrApiService.GetOrganizationIntegrationsXdrNetworks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/integrations/xdr/networks"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
