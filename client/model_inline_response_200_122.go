/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 January, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.42.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200122 struct for InlineResponse200122
type InlineResponse200122 struct {
	Counts *InlineResponse200122Counts `json:"counts,omitempty"`
	Limits *InlineResponse200122Limits `json:"limits,omitempty"`
}

// NewInlineResponse200122 instantiates a new InlineResponse200122 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200122() *InlineResponse200122 {
	this := InlineResponse200122{}
	return &this
}

// NewInlineResponse200122WithDefaults instantiates a new InlineResponse200122 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200122WithDefaults() *InlineResponse200122 {
	this := InlineResponse200122{}
	return &this
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *InlineResponse200122) GetCounts() InlineResponse200122Counts {
	if o == nil || isNil(o.Counts) {
		var ret InlineResponse200122Counts
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200122) GetCountsOk() (*InlineResponse200122Counts, bool) {
	if o == nil || isNil(o.Counts) {
    return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *InlineResponse200122) HasCounts() bool {
	if o != nil && !isNil(o.Counts) {
		return true
	}

	return false
}

// SetCounts gets a reference to the given InlineResponse200122Counts and assigns it to the Counts field.
func (o *InlineResponse200122) SetCounts(v InlineResponse200122Counts) {
	o.Counts = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *InlineResponse200122) GetLimits() InlineResponse200122Limits {
	if o == nil || isNil(o.Limits) {
		var ret InlineResponse200122Limits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200122) GetLimitsOk() (*InlineResponse200122Limits, bool) {
	if o == nil || isNil(o.Limits) {
    return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *InlineResponse200122) HasLimits() bool {
	if o != nil && !isNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given InlineResponse200122Limits and assigns it to the Limits field.
func (o *InlineResponse200122) SetLimits(v InlineResponse200122Limits) {
	o.Limits = &v
}

func (o InlineResponse200122) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Counts) {
		toSerialize["counts"] = o.Counts
	}
	if !isNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200122 struct {
	value *InlineResponse200122
	isSet bool
}

func (v NullableInlineResponse200122) Get() *InlineResponse200122 {
	return v.value
}

func (v *NullableInlineResponse200122) Set(val *InlineResponse200122) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200122) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200122) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200122(val *InlineResponse200122) *NullableInlineResponse200122 {
	return &NullableInlineResponse200122{value: val, isSet: true}
}

func (v NullableInlineResponse200122) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200122) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


