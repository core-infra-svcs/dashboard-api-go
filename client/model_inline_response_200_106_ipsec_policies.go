/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 June, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.34.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200106IpsecPolicies Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
type InlineResponse200106IpsecPolicies struct {
	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []string `json:"ikeCipherAlgo,omitempty"`
	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	IkeAuthAlgo []string `json:"ikeAuthAlgo,omitempty"`
	// [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
	IkePrfAlgo []string `json:"ikePrfAlgo,omitempty"`
	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup,omitempty"`
	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime *int32 `json:"ikeLifetime,omitempty"`
	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []string `json:"childCipherAlgo,omitempty"`
	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	ChildAuthAlgo []string `json:"childAuthAlgo,omitempty"`
	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup,omitempty"`
	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime *int32 `json:"childLifetime,omitempty"`
}

// NewInlineResponse200106IpsecPolicies instantiates a new InlineResponse200106IpsecPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200106IpsecPolicies() *InlineResponse200106IpsecPolicies {
	this := InlineResponse200106IpsecPolicies{}
	return &this
}

// NewInlineResponse200106IpsecPoliciesWithDefaults instantiates a new InlineResponse200106IpsecPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200106IpsecPoliciesWithDefaults() *InlineResponse200106IpsecPolicies {
	this := InlineResponse200106IpsecPolicies{}
	return &this
}

// GetIkeCipherAlgo returns the IkeCipherAlgo field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetIkeCipherAlgo() []string {
	if o == nil || isNil(o.IkeCipherAlgo) {
		var ret []string
		return ret
	}
	return o.IkeCipherAlgo
}

// GetIkeCipherAlgoOk returns a tuple with the IkeCipherAlgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetIkeCipherAlgoOk() ([]string, bool) {
	if o == nil || isNil(o.IkeCipherAlgo) {
    return nil, false
	}
	return o.IkeCipherAlgo, true
}

// HasIkeCipherAlgo returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasIkeCipherAlgo() bool {
	if o != nil && !isNil(o.IkeCipherAlgo) {
		return true
	}

	return false
}

// SetIkeCipherAlgo gets a reference to the given []string and assigns it to the IkeCipherAlgo field.
func (o *InlineResponse200106IpsecPolicies) SetIkeCipherAlgo(v []string) {
	o.IkeCipherAlgo = v
}

// GetIkeAuthAlgo returns the IkeAuthAlgo field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetIkeAuthAlgo() []string {
	if o == nil || isNil(o.IkeAuthAlgo) {
		var ret []string
		return ret
	}
	return o.IkeAuthAlgo
}

// GetIkeAuthAlgoOk returns a tuple with the IkeAuthAlgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetIkeAuthAlgoOk() ([]string, bool) {
	if o == nil || isNil(o.IkeAuthAlgo) {
    return nil, false
	}
	return o.IkeAuthAlgo, true
}

// HasIkeAuthAlgo returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasIkeAuthAlgo() bool {
	if o != nil && !isNil(o.IkeAuthAlgo) {
		return true
	}

	return false
}

// SetIkeAuthAlgo gets a reference to the given []string and assigns it to the IkeAuthAlgo field.
func (o *InlineResponse200106IpsecPolicies) SetIkeAuthAlgo(v []string) {
	o.IkeAuthAlgo = v
}

// GetIkePrfAlgo returns the IkePrfAlgo field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetIkePrfAlgo() []string {
	if o == nil || isNil(o.IkePrfAlgo) {
		var ret []string
		return ret
	}
	return o.IkePrfAlgo
}

// GetIkePrfAlgoOk returns a tuple with the IkePrfAlgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetIkePrfAlgoOk() ([]string, bool) {
	if o == nil || isNil(o.IkePrfAlgo) {
    return nil, false
	}
	return o.IkePrfAlgo, true
}

// HasIkePrfAlgo returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasIkePrfAlgo() bool {
	if o != nil && !isNil(o.IkePrfAlgo) {
		return true
	}

	return false
}

// SetIkePrfAlgo gets a reference to the given []string and assigns it to the IkePrfAlgo field.
func (o *InlineResponse200106IpsecPolicies) SetIkePrfAlgo(v []string) {
	o.IkePrfAlgo = v
}

// GetIkeDiffieHellmanGroup returns the IkeDiffieHellmanGroup field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetIkeDiffieHellmanGroup() []string {
	if o == nil || isNil(o.IkeDiffieHellmanGroup) {
		var ret []string
		return ret
	}
	return o.IkeDiffieHellmanGroup
}

// GetIkeDiffieHellmanGroupOk returns a tuple with the IkeDiffieHellmanGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetIkeDiffieHellmanGroupOk() ([]string, bool) {
	if o == nil || isNil(o.IkeDiffieHellmanGroup) {
    return nil, false
	}
	return o.IkeDiffieHellmanGroup, true
}

// HasIkeDiffieHellmanGroup returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasIkeDiffieHellmanGroup() bool {
	if o != nil && !isNil(o.IkeDiffieHellmanGroup) {
		return true
	}

	return false
}

// SetIkeDiffieHellmanGroup gets a reference to the given []string and assigns it to the IkeDiffieHellmanGroup field.
func (o *InlineResponse200106IpsecPolicies) SetIkeDiffieHellmanGroup(v []string) {
	o.IkeDiffieHellmanGroup = v
}

// GetIkeLifetime returns the IkeLifetime field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetIkeLifetime() int32 {
	if o == nil || isNil(o.IkeLifetime) {
		var ret int32
		return ret
	}
	return *o.IkeLifetime
}

// GetIkeLifetimeOk returns a tuple with the IkeLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetIkeLifetimeOk() (*int32, bool) {
	if o == nil || isNil(o.IkeLifetime) {
    return nil, false
	}
	return o.IkeLifetime, true
}

// HasIkeLifetime returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasIkeLifetime() bool {
	if o != nil && !isNil(o.IkeLifetime) {
		return true
	}

	return false
}

// SetIkeLifetime gets a reference to the given int32 and assigns it to the IkeLifetime field.
func (o *InlineResponse200106IpsecPolicies) SetIkeLifetime(v int32) {
	o.IkeLifetime = &v
}

// GetChildCipherAlgo returns the ChildCipherAlgo field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetChildCipherAlgo() []string {
	if o == nil || isNil(o.ChildCipherAlgo) {
		var ret []string
		return ret
	}
	return o.ChildCipherAlgo
}

// GetChildCipherAlgoOk returns a tuple with the ChildCipherAlgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetChildCipherAlgoOk() ([]string, bool) {
	if o == nil || isNil(o.ChildCipherAlgo) {
    return nil, false
	}
	return o.ChildCipherAlgo, true
}

// HasChildCipherAlgo returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasChildCipherAlgo() bool {
	if o != nil && !isNil(o.ChildCipherAlgo) {
		return true
	}

	return false
}

// SetChildCipherAlgo gets a reference to the given []string and assigns it to the ChildCipherAlgo field.
func (o *InlineResponse200106IpsecPolicies) SetChildCipherAlgo(v []string) {
	o.ChildCipherAlgo = v
}

// GetChildAuthAlgo returns the ChildAuthAlgo field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetChildAuthAlgo() []string {
	if o == nil || isNil(o.ChildAuthAlgo) {
		var ret []string
		return ret
	}
	return o.ChildAuthAlgo
}

// GetChildAuthAlgoOk returns a tuple with the ChildAuthAlgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetChildAuthAlgoOk() ([]string, bool) {
	if o == nil || isNil(o.ChildAuthAlgo) {
    return nil, false
	}
	return o.ChildAuthAlgo, true
}

// HasChildAuthAlgo returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasChildAuthAlgo() bool {
	if o != nil && !isNil(o.ChildAuthAlgo) {
		return true
	}

	return false
}

// SetChildAuthAlgo gets a reference to the given []string and assigns it to the ChildAuthAlgo field.
func (o *InlineResponse200106IpsecPolicies) SetChildAuthAlgo(v []string) {
	o.ChildAuthAlgo = v
}

// GetChildPfsGroup returns the ChildPfsGroup field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetChildPfsGroup() []string {
	if o == nil || isNil(o.ChildPfsGroup) {
		var ret []string
		return ret
	}
	return o.ChildPfsGroup
}

// GetChildPfsGroupOk returns a tuple with the ChildPfsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetChildPfsGroupOk() ([]string, bool) {
	if o == nil || isNil(o.ChildPfsGroup) {
    return nil, false
	}
	return o.ChildPfsGroup, true
}

// HasChildPfsGroup returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasChildPfsGroup() bool {
	if o != nil && !isNil(o.ChildPfsGroup) {
		return true
	}

	return false
}

// SetChildPfsGroup gets a reference to the given []string and assigns it to the ChildPfsGroup field.
func (o *InlineResponse200106IpsecPolicies) SetChildPfsGroup(v []string) {
	o.ChildPfsGroup = v
}

// GetChildLifetime returns the ChildLifetime field value if set, zero value otherwise.
func (o *InlineResponse200106IpsecPolicies) GetChildLifetime() int32 {
	if o == nil || isNil(o.ChildLifetime) {
		var ret int32
		return ret
	}
	return *o.ChildLifetime
}

// GetChildLifetimeOk returns a tuple with the ChildLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106IpsecPolicies) GetChildLifetimeOk() (*int32, bool) {
	if o == nil || isNil(o.ChildLifetime) {
    return nil, false
	}
	return o.ChildLifetime, true
}

// HasChildLifetime returns a boolean if a field has been set.
func (o *InlineResponse200106IpsecPolicies) HasChildLifetime() bool {
	if o != nil && !isNil(o.ChildLifetime) {
		return true
	}

	return false
}

// SetChildLifetime gets a reference to the given int32 and assigns it to the ChildLifetime field.
func (o *InlineResponse200106IpsecPolicies) SetChildLifetime(v int32) {
	o.ChildLifetime = &v
}

func (o InlineResponse200106IpsecPolicies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IkeCipherAlgo) {
		toSerialize["ikeCipherAlgo"] = o.IkeCipherAlgo
	}
	if !isNil(o.IkeAuthAlgo) {
		toSerialize["ikeAuthAlgo"] = o.IkeAuthAlgo
	}
	if !isNil(o.IkePrfAlgo) {
		toSerialize["ikePrfAlgo"] = o.IkePrfAlgo
	}
	if !isNil(o.IkeDiffieHellmanGroup) {
		toSerialize["ikeDiffieHellmanGroup"] = o.IkeDiffieHellmanGroup
	}
	if !isNil(o.IkeLifetime) {
		toSerialize["ikeLifetime"] = o.IkeLifetime
	}
	if !isNil(o.ChildCipherAlgo) {
		toSerialize["childCipherAlgo"] = o.ChildCipherAlgo
	}
	if !isNil(o.ChildAuthAlgo) {
		toSerialize["childAuthAlgo"] = o.ChildAuthAlgo
	}
	if !isNil(o.ChildPfsGroup) {
		toSerialize["childPfsGroup"] = o.ChildPfsGroup
	}
	if !isNil(o.ChildLifetime) {
		toSerialize["childLifetime"] = o.ChildLifetime
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200106IpsecPolicies struct {
	value *InlineResponse200106IpsecPolicies
	isSet bool
}

func (v NullableInlineResponse200106IpsecPolicies) Get() *InlineResponse200106IpsecPolicies {
	return v.value
}

func (v *NullableInlineResponse200106IpsecPolicies) Set(val *InlineResponse200106IpsecPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200106IpsecPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200106IpsecPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200106IpsecPolicies(val *InlineResponse200106IpsecPolicies) *NullableInlineResponse200106IpsecPolicies {
	return &NullableInlineResponse200106IpsecPolicies{value: val, isSet: true}
}

func (v NullableInlineResponse200106IpsecPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200106IpsecPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


