/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 July, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.60.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse2014 struct for InlineResponse2014
type InlineResponse2014 struct {
	// ID of the MAC table request. Used to check the status of the request.
	MacTableId *string `json:"macTableId,omitempty"`
	// GET this url to check the status of your MAC table request.
	Url *string `json:"url,omitempty"`
	Request *InlineResponse2014Request `json:"request,omitempty"`
	// Status of the MAC table request.
	Status *string `json:"status,omitempty"`
	Callback *InlineResponse2011Callback `json:"callback,omitempty"`
}

// NewInlineResponse2014 instantiates a new InlineResponse2014 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2014() *InlineResponse2014 {
	this := InlineResponse2014{}
	return &this
}

// NewInlineResponse2014WithDefaults instantiates a new InlineResponse2014 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2014WithDefaults() *InlineResponse2014 {
	this := InlineResponse2014{}
	return &this
}

// GetMacTableId returns the MacTableId field value if set, zero value otherwise.
func (o *InlineResponse2014) GetMacTableId() string {
	if o == nil || isNil(o.MacTableId) {
		var ret string
		return ret
	}
	return *o.MacTableId
}

// GetMacTableIdOk returns a tuple with the MacTableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2014) GetMacTableIdOk() (*string, bool) {
	if o == nil || isNil(o.MacTableId) {
    return nil, false
	}
	return o.MacTableId, true
}

// HasMacTableId returns a boolean if a field has been set.
func (o *InlineResponse2014) HasMacTableId() bool {
	if o != nil && !isNil(o.MacTableId) {
		return true
	}

	return false
}

// SetMacTableId gets a reference to the given string and assigns it to the MacTableId field.
func (o *InlineResponse2014) SetMacTableId(v string) {
	o.MacTableId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *InlineResponse2014) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2014) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
    return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *InlineResponse2014) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *InlineResponse2014) SetUrl(v string) {
	o.Url = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *InlineResponse2014) GetRequest() InlineResponse2014Request {
	if o == nil || isNil(o.Request) {
		var ret InlineResponse2014Request
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2014) GetRequestOk() (*InlineResponse2014Request, bool) {
	if o == nil || isNil(o.Request) {
    return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *InlineResponse2014) HasRequest() bool {
	if o != nil && !isNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given InlineResponse2014Request and assigns it to the Request field.
func (o *InlineResponse2014) SetRequest(v InlineResponse2014Request) {
	o.Request = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InlineResponse2014) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2014) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InlineResponse2014) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InlineResponse2014) SetStatus(v string) {
	o.Status = &v
}

// GetCallback returns the Callback field value if set, zero value otherwise.
func (o *InlineResponse2014) GetCallback() InlineResponse2011Callback {
	if o == nil || isNil(o.Callback) {
		var ret InlineResponse2011Callback
		return ret
	}
	return *o.Callback
}

// GetCallbackOk returns a tuple with the Callback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2014) GetCallbackOk() (*InlineResponse2011Callback, bool) {
	if o == nil || isNil(o.Callback) {
    return nil, false
	}
	return o.Callback, true
}

// HasCallback returns a boolean if a field has been set.
func (o *InlineResponse2014) HasCallback() bool {
	if o != nil && !isNil(o.Callback) {
		return true
	}

	return false
}

// SetCallback gets a reference to the given InlineResponse2011Callback and assigns it to the Callback field.
func (o *InlineResponse2014) SetCallback(v InlineResponse2011Callback) {
	o.Callback = &v
}

func (o InlineResponse2014) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MacTableId) {
		toSerialize["macTableId"] = o.MacTableId
	}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Callback) {
		toSerialize["callback"] = o.Callback
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2014 struct {
	value *InlineResponse2014
	isSet bool
}

func (v NullableInlineResponse2014) Get() *InlineResponse2014 {
	return v.value
}

func (v *NullableInlineResponse2014) Set(val *InlineResponse2014) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2014) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2014) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2014(val *InlineResponse2014) *NullableInlineResponse2014 {
	return &NullableInlineResponse2014{value: val, isSet: true}
}

func (v NullableInlineResponse2014) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2014) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


