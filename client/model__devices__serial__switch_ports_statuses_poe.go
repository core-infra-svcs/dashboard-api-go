/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 July, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.48.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// DevicesSerialSwitchPortsStatusesPoe PoE status of the port.
type DevicesSerialSwitchPortsStatusesPoe struct {
	// Whether the port is drawing power
	IsAllocated *bool `json:"isAllocated,omitempty"`
}

// NewDevicesSerialSwitchPortsStatusesPoe instantiates a new DevicesSerialSwitchPortsStatusesPoe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesSerialSwitchPortsStatusesPoe() *DevicesSerialSwitchPortsStatusesPoe {
	this := DevicesSerialSwitchPortsStatusesPoe{}
	return &this
}

// NewDevicesSerialSwitchPortsStatusesPoeWithDefaults instantiates a new DevicesSerialSwitchPortsStatusesPoe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesSerialSwitchPortsStatusesPoeWithDefaults() *DevicesSerialSwitchPortsStatusesPoe {
	this := DevicesSerialSwitchPortsStatusesPoe{}
	return &this
}

// GetIsAllocated returns the IsAllocated field value if set, zero value otherwise.
func (o *DevicesSerialSwitchPortsStatusesPoe) GetIsAllocated() bool {
	if o == nil || isNil(o.IsAllocated) {
		var ret bool
		return ret
	}
	return *o.IsAllocated
}

// GetIsAllocatedOk returns a tuple with the IsAllocated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesSerialSwitchPortsStatusesPoe) GetIsAllocatedOk() (*bool, bool) {
	if o == nil || isNil(o.IsAllocated) {
    return nil, false
	}
	return o.IsAllocated, true
}

// HasIsAllocated returns a boolean if a field has been set.
func (o *DevicesSerialSwitchPortsStatusesPoe) HasIsAllocated() bool {
	if o != nil && !isNil(o.IsAllocated) {
		return true
	}

	return false
}

// SetIsAllocated gets a reference to the given bool and assigns it to the IsAllocated field.
func (o *DevicesSerialSwitchPortsStatusesPoe) SetIsAllocated(v bool) {
	o.IsAllocated = &v
}

func (o DevicesSerialSwitchPortsStatusesPoe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsAllocated) {
		toSerialize["isAllocated"] = o.IsAllocated
	}
	return json.Marshal(toSerialize)
}

type NullableDevicesSerialSwitchPortsStatusesPoe struct {
	value *DevicesSerialSwitchPortsStatusesPoe
	isSet bool
}

func (v NullableDevicesSerialSwitchPortsStatusesPoe) Get() *DevicesSerialSwitchPortsStatusesPoe {
	return v.value
}

func (v *NullableDevicesSerialSwitchPortsStatusesPoe) Set(val *DevicesSerialSwitchPortsStatusesPoe) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesSerialSwitchPortsStatusesPoe) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesSerialSwitchPortsStatusesPoe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesSerialSwitchPortsStatusesPoe(val *DevicesSerialSwitchPortsStatusesPoe) *NullableDevicesSerialSwitchPortsStatusesPoe {
	return &NullableDevicesSerialSwitchPortsStatusesPoe{value: val, isSet: true}
}

func (v NullableDevicesSerialSwitchPortsStatusesPoe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesSerialSwitchPortsStatusesPoe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


