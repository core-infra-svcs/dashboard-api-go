/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 December, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.53.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200259OptOutEligibility Descriptions of the early access feature
type InlineResponse200259OptOutEligibility struct {
	// Condition flag to opt out from the feature
	Eligible *bool `json:"eligible,omitempty"`
	// User friendly message regarding opt-out eligibility
	Reason *string `json:"reason,omitempty"`
	Help *InlineResponse200259OptOutEligibilityHelp `json:"help,omitempty"`
}

// NewInlineResponse200259OptOutEligibility instantiates a new InlineResponse200259OptOutEligibility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200259OptOutEligibility() *InlineResponse200259OptOutEligibility {
	this := InlineResponse200259OptOutEligibility{}
	return &this
}

// NewInlineResponse200259OptOutEligibilityWithDefaults instantiates a new InlineResponse200259OptOutEligibility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200259OptOutEligibilityWithDefaults() *InlineResponse200259OptOutEligibility {
	this := InlineResponse200259OptOutEligibility{}
	return &this
}

// GetEligible returns the Eligible field value if set, zero value otherwise.
func (o *InlineResponse200259OptOutEligibility) GetEligible() bool {
	if o == nil || isNil(o.Eligible) {
		var ret bool
		return ret
	}
	return *o.Eligible
}

// GetEligibleOk returns a tuple with the Eligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200259OptOutEligibility) GetEligibleOk() (*bool, bool) {
	if o == nil || isNil(o.Eligible) {
    return nil, false
	}
	return o.Eligible, true
}

// HasEligible returns a boolean if a field has been set.
func (o *InlineResponse200259OptOutEligibility) HasEligible() bool {
	if o != nil && !isNil(o.Eligible) {
		return true
	}

	return false
}

// SetEligible gets a reference to the given bool and assigns it to the Eligible field.
func (o *InlineResponse200259OptOutEligibility) SetEligible(v bool) {
	o.Eligible = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *InlineResponse200259OptOutEligibility) GetReason() string {
	if o == nil || isNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200259OptOutEligibility) GetReasonOk() (*string, bool) {
	if o == nil || isNil(o.Reason) {
    return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *InlineResponse200259OptOutEligibility) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *InlineResponse200259OptOutEligibility) SetReason(v string) {
	o.Reason = &v
}

// GetHelp returns the Help field value if set, zero value otherwise.
func (o *InlineResponse200259OptOutEligibility) GetHelp() InlineResponse200259OptOutEligibilityHelp {
	if o == nil || isNil(o.Help) {
		var ret InlineResponse200259OptOutEligibilityHelp
		return ret
	}
	return *o.Help
}

// GetHelpOk returns a tuple with the Help field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200259OptOutEligibility) GetHelpOk() (*InlineResponse200259OptOutEligibilityHelp, bool) {
	if o == nil || isNil(o.Help) {
    return nil, false
	}
	return o.Help, true
}

// HasHelp returns a boolean if a field has been set.
func (o *InlineResponse200259OptOutEligibility) HasHelp() bool {
	if o != nil && !isNil(o.Help) {
		return true
	}

	return false
}

// SetHelp gets a reference to the given InlineResponse200259OptOutEligibilityHelp and assigns it to the Help field.
func (o *InlineResponse200259OptOutEligibility) SetHelp(v InlineResponse200259OptOutEligibilityHelp) {
	o.Help = &v
}

func (o InlineResponse200259OptOutEligibility) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Eligible) {
		toSerialize["eligible"] = o.Eligible
	}
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !isNil(o.Help) {
		toSerialize["help"] = o.Help
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200259OptOutEligibility struct {
	value *InlineResponse200259OptOutEligibility
	isSet bool
}

func (v NullableInlineResponse200259OptOutEligibility) Get() *InlineResponse200259OptOutEligibility {
	return v.value
}

func (v *NullableInlineResponse200259OptOutEligibility) Set(val *InlineResponse200259OptOutEligibility) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200259OptOutEligibility) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200259OptOutEligibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200259OptOutEligibility(val *InlineResponse200259OptOutEligibility) *NullableInlineResponse200259OptOutEligibility {
	return &NullableInlineResponse200259OptOutEligibility{value: val, isSet: true}
}

func (v NullableInlineResponse200259OptOutEligibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200259OptOutEligibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


