/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 October, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.63.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor Power factor threshold. 'percentage' must be provided.
type NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor struct {
	// Alerting threshold as the ratio of active power to apparent power. Must be between 0 and 100.
	Percentage int32 `json:"percentage"`
}

// NewNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor instantiates a new NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor(percentage int32) *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor {
	this := NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor{}
	this.Percentage = percentage
	return &this
}

// NewNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactorWithDefaults instantiates a new NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactorWithDefaults() *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor {
	this := NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor{}
	return &this
}

// GetPercentage returns the Percentage field value
func (o *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) GetPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) GetPercentageOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) SetPercentage(v int32) {
	o.Percentage = v
}

func (o NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["percentage"] = o.Percentage
	}
	return json.Marshal(toSerialize)
}

type NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor struct {
	value *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor
	isSet bool
}

func (v NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) Get() *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor {
	return v.value
}

func (v *NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) Set(val *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor(val *NetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) *NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor {
	return &NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor{value: val, isSet: true}
}

func (v NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworksNetworkIdSensorAlertsProfilesThresholdPowerFactor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


