/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 February, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.55.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// DevicesSerialSwitchPortsStackwiseVirtual Stackwise Virtual settings for the port
type DevicesSerialSwitchPortsStackwiseVirtual struct {
	// For SVL devices, whether or not the port is used for StackWise Virtual Link.
	IsStackWiseVirtualLink *bool `json:"isStackWiseVirtualLink,omitempty"`
	// For SVL devices, whether or not the port is used for Dual Active Detection.
	IsDualActiveDetector *bool `json:"isDualActiveDetector,omitempty"`
}

// NewDevicesSerialSwitchPortsStackwiseVirtual instantiates a new DevicesSerialSwitchPortsStackwiseVirtual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesSerialSwitchPortsStackwiseVirtual() *DevicesSerialSwitchPortsStackwiseVirtual {
	this := DevicesSerialSwitchPortsStackwiseVirtual{}
	return &this
}

// NewDevicesSerialSwitchPortsStackwiseVirtualWithDefaults instantiates a new DevicesSerialSwitchPortsStackwiseVirtual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesSerialSwitchPortsStackwiseVirtualWithDefaults() *DevicesSerialSwitchPortsStackwiseVirtual {
	this := DevicesSerialSwitchPortsStackwiseVirtual{}
	return &this
}

// GetIsStackWiseVirtualLink returns the IsStackWiseVirtualLink field value if set, zero value otherwise.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) GetIsStackWiseVirtualLink() bool {
	if o == nil || isNil(o.IsStackWiseVirtualLink) {
		var ret bool
		return ret
	}
	return *o.IsStackWiseVirtualLink
}

// GetIsStackWiseVirtualLinkOk returns a tuple with the IsStackWiseVirtualLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) GetIsStackWiseVirtualLinkOk() (*bool, bool) {
	if o == nil || isNil(o.IsStackWiseVirtualLink) {
    return nil, false
	}
	return o.IsStackWiseVirtualLink, true
}

// HasIsStackWiseVirtualLink returns a boolean if a field has been set.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) HasIsStackWiseVirtualLink() bool {
	if o != nil && !isNil(o.IsStackWiseVirtualLink) {
		return true
	}

	return false
}

// SetIsStackWiseVirtualLink gets a reference to the given bool and assigns it to the IsStackWiseVirtualLink field.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) SetIsStackWiseVirtualLink(v bool) {
	o.IsStackWiseVirtualLink = &v
}

// GetIsDualActiveDetector returns the IsDualActiveDetector field value if set, zero value otherwise.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) GetIsDualActiveDetector() bool {
	if o == nil || isNil(o.IsDualActiveDetector) {
		var ret bool
		return ret
	}
	return *o.IsDualActiveDetector
}

// GetIsDualActiveDetectorOk returns a tuple with the IsDualActiveDetector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) GetIsDualActiveDetectorOk() (*bool, bool) {
	if o == nil || isNil(o.IsDualActiveDetector) {
    return nil, false
	}
	return o.IsDualActiveDetector, true
}

// HasIsDualActiveDetector returns a boolean if a field has been set.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) HasIsDualActiveDetector() bool {
	if o != nil && !isNil(o.IsDualActiveDetector) {
		return true
	}

	return false
}

// SetIsDualActiveDetector gets a reference to the given bool and assigns it to the IsDualActiveDetector field.
func (o *DevicesSerialSwitchPortsStackwiseVirtual) SetIsDualActiveDetector(v bool) {
	o.IsDualActiveDetector = &v
}

func (o DevicesSerialSwitchPortsStackwiseVirtual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsStackWiseVirtualLink) {
		toSerialize["isStackWiseVirtualLink"] = o.IsStackWiseVirtualLink
	}
	if !isNil(o.IsDualActiveDetector) {
		toSerialize["isDualActiveDetector"] = o.IsDualActiveDetector
	}
	return json.Marshal(toSerialize)
}

type NullableDevicesSerialSwitchPortsStackwiseVirtual struct {
	value *DevicesSerialSwitchPortsStackwiseVirtual
	isSet bool
}

func (v NullableDevicesSerialSwitchPortsStackwiseVirtual) Get() *DevicesSerialSwitchPortsStackwiseVirtual {
	return v.value
}

func (v *NullableDevicesSerialSwitchPortsStackwiseVirtual) Set(val *DevicesSerialSwitchPortsStackwiseVirtual) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesSerialSwitchPortsStackwiseVirtual) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesSerialSwitchPortsStackwiseVirtual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesSerialSwitchPortsStackwiseVirtual(val *DevicesSerialSwitchPortsStackwiseVirtual) *NullableDevicesSerialSwitchPortsStackwiseVirtual {
	return &NullableDevicesSerialSwitchPortsStackwiseVirtual{value: val, isSet: true}
}

func (v NullableDevicesSerialSwitchPortsStackwiseVirtual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesSerialSwitchPortsStackwiseVirtual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


