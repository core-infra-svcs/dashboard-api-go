/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 October, 2022 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20022Counts Counts of currently alerting sensors, aggregated by alerting metric
type InlineResponse20022Counts struct {
	// Number of sensors that are currently alerting due to an open door
	Door *int32 `json:"door,omitempty"`
	// Number of sensors that are currently alerting due to humidity readings
	Humidity *int32 `json:"humidity,omitempty"`
	// Number of sensors that are currently alerting due to indoor air quality readings
	IndoorAirQuality *int32 `json:"indoorAirQuality,omitempty"`
	Noise *InlineResponse20022CountsNoise `json:"noise,omitempty"`
	// Number of sensors that are currently alerting due to PM2.5 readings
	Pm25 *int32 `json:"pm25,omitempty"`
	// Number of sensors that are currently alerting due to temperature readings
	Temperature *int32 `json:"temperature,omitempty"`
	// Number of sensors that are currently alerting due to TVOC readings
	Tvoc *int32 `json:"tvoc,omitempty"`
	// Number of sensors that are currently alerting due to the presence of water
	Water *int32 `json:"water,omitempty"`
}

// NewInlineResponse20022Counts instantiates a new InlineResponse20022Counts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20022Counts() *InlineResponse20022Counts {
	this := InlineResponse20022Counts{}
	return &this
}

// NewInlineResponse20022CountsWithDefaults instantiates a new InlineResponse20022Counts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20022CountsWithDefaults() *InlineResponse20022Counts {
	this := InlineResponse20022Counts{}
	return &this
}

// GetDoor returns the Door field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetDoor() int32 {
	if o == nil || o.Door == nil {
		var ret int32
		return ret
	}
	return *o.Door
}

// GetDoorOk returns a tuple with the Door field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetDoorOk() (*int32, bool) {
	if o == nil || o.Door == nil {
		return nil, false
	}
	return o.Door, true
}

// HasDoor returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasDoor() bool {
	if o != nil && o.Door != nil {
		return true
	}

	return false
}

// SetDoor gets a reference to the given int32 and assigns it to the Door field.
func (o *InlineResponse20022Counts) SetDoor(v int32) {
	o.Door = &v
}

// GetHumidity returns the Humidity field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetHumidity() int32 {
	if o == nil || o.Humidity == nil {
		var ret int32
		return ret
	}
	return *o.Humidity
}

// GetHumidityOk returns a tuple with the Humidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetHumidityOk() (*int32, bool) {
	if o == nil || o.Humidity == nil {
		return nil, false
	}
	return o.Humidity, true
}

// HasHumidity returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasHumidity() bool {
	if o != nil && o.Humidity != nil {
		return true
	}

	return false
}

// SetHumidity gets a reference to the given int32 and assigns it to the Humidity field.
func (o *InlineResponse20022Counts) SetHumidity(v int32) {
	o.Humidity = &v
}

// GetIndoorAirQuality returns the IndoorAirQuality field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetIndoorAirQuality() int32 {
	if o == nil || o.IndoorAirQuality == nil {
		var ret int32
		return ret
	}
	return *o.IndoorAirQuality
}

// GetIndoorAirQualityOk returns a tuple with the IndoorAirQuality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetIndoorAirQualityOk() (*int32, bool) {
	if o == nil || o.IndoorAirQuality == nil {
		return nil, false
	}
	return o.IndoorAirQuality, true
}

// HasIndoorAirQuality returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasIndoorAirQuality() bool {
	if o != nil && o.IndoorAirQuality != nil {
		return true
	}

	return false
}

// SetIndoorAirQuality gets a reference to the given int32 and assigns it to the IndoorAirQuality field.
func (o *InlineResponse20022Counts) SetIndoorAirQuality(v int32) {
	o.IndoorAirQuality = &v
}

// GetNoise returns the Noise field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetNoise() InlineResponse20022CountsNoise {
	if o == nil || o.Noise == nil {
		var ret InlineResponse20022CountsNoise
		return ret
	}
	return *o.Noise
}

// GetNoiseOk returns a tuple with the Noise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetNoiseOk() (*InlineResponse20022CountsNoise, bool) {
	if o == nil || o.Noise == nil {
		return nil, false
	}
	return o.Noise, true
}

// HasNoise returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasNoise() bool {
	if o != nil && o.Noise != nil {
		return true
	}

	return false
}

// SetNoise gets a reference to the given InlineResponse20022CountsNoise and assigns it to the Noise field.
func (o *InlineResponse20022Counts) SetNoise(v InlineResponse20022CountsNoise) {
	o.Noise = &v
}

// GetPm25 returns the Pm25 field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetPm25() int32 {
	if o == nil || o.Pm25 == nil {
		var ret int32
		return ret
	}
	return *o.Pm25
}

// GetPm25Ok returns a tuple with the Pm25 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetPm25Ok() (*int32, bool) {
	if o == nil || o.Pm25 == nil {
		return nil, false
	}
	return o.Pm25, true
}

// HasPm25 returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasPm25() bool {
	if o != nil && o.Pm25 != nil {
		return true
	}

	return false
}

// SetPm25 gets a reference to the given int32 and assigns it to the Pm25 field.
func (o *InlineResponse20022Counts) SetPm25(v int32) {
	o.Pm25 = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetTemperature() int32 {
	if o == nil || o.Temperature == nil {
		var ret int32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetTemperatureOk() (*int32, bool) {
	if o == nil || o.Temperature == nil {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasTemperature() bool {
	if o != nil && o.Temperature != nil {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given int32 and assigns it to the Temperature field.
func (o *InlineResponse20022Counts) SetTemperature(v int32) {
	o.Temperature = &v
}

// GetTvoc returns the Tvoc field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetTvoc() int32 {
	if o == nil || o.Tvoc == nil {
		var ret int32
		return ret
	}
	return *o.Tvoc
}

// GetTvocOk returns a tuple with the Tvoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetTvocOk() (*int32, bool) {
	if o == nil || o.Tvoc == nil {
		return nil, false
	}
	return o.Tvoc, true
}

// HasTvoc returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasTvoc() bool {
	if o != nil && o.Tvoc != nil {
		return true
	}

	return false
}

// SetTvoc gets a reference to the given int32 and assigns it to the Tvoc field.
func (o *InlineResponse20022Counts) SetTvoc(v int32) {
	o.Tvoc = &v
}

// GetWater returns the Water field value if set, zero value otherwise.
func (o *InlineResponse20022Counts) GetWater() int32 {
	if o == nil || o.Water == nil {
		var ret int32
		return ret
	}
	return *o.Water
}

// GetWaterOk returns a tuple with the Water field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20022Counts) GetWaterOk() (*int32, bool) {
	if o == nil || o.Water == nil {
		return nil, false
	}
	return o.Water, true
}

// HasWater returns a boolean if a field has been set.
func (o *InlineResponse20022Counts) HasWater() bool {
	if o != nil && o.Water != nil {
		return true
	}

	return false
}

// SetWater gets a reference to the given int32 and assigns it to the Water field.
func (o *InlineResponse20022Counts) SetWater(v int32) {
	o.Water = &v
}

func (o InlineResponse20022Counts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Door != nil {
		toSerialize["door"] = o.Door
	}
	if o.Humidity != nil {
		toSerialize["humidity"] = o.Humidity
	}
	if o.IndoorAirQuality != nil {
		toSerialize["indoorAirQuality"] = o.IndoorAirQuality
	}
	if o.Noise != nil {
		toSerialize["noise"] = o.Noise
	}
	if o.Pm25 != nil {
		toSerialize["pm25"] = o.Pm25
	}
	if o.Temperature != nil {
		toSerialize["temperature"] = o.Temperature
	}
	if o.Tvoc != nil {
		toSerialize["tvoc"] = o.Tvoc
	}
	if o.Water != nil {
		toSerialize["water"] = o.Water
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20022Counts struct {
	value *InlineResponse20022Counts
	isSet bool
}

func (v NullableInlineResponse20022Counts) Get() *InlineResponse20022Counts {
	return v.value
}

func (v *NullableInlineResponse20022Counts) Set(val *InlineResponse20022Counts) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20022Counts) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20022Counts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20022Counts(val *InlineResponse20022Counts) *NullableInlineResponse20022Counts {
	return &NullableInlineResponse20022Counts{value: val, isSet: true}
}

func (v NullableInlineResponse20022Counts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20022Counts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


