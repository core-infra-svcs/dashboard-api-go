/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 October, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.63.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback The current configuration for Local Authentication Fallback. Enables the Access Point (AP) to store client authentication data for a specified duration that can be adjusted as needed.
type NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback struct {
	// The duration (in seconds) for which auths are cached. The timeout is measured from the user's most recent non-cached authentication to the network. Between 3600 (1 hour) and 86400 (1 day)
	CacheTimeout *int32 `json:"cacheTimeout,omitempty"`
	// If true, MR devices will cache authentication credentials for EAP-TLS or for MAC based authentication.
	Enabled *bool `json:"enabled,omitempty"`
	ServerCaCertificate *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackServerCaCertificate `json:"serverCaCertificate,omitempty"`
}

// NewNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback instantiates a new NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback() *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback {
	this := NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback{}
	return &this
}

// NewNetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackWithDefaults instantiates a new NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackWithDefaults() *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback {
	this := NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback{}
	return &this
}

// GetCacheTimeout returns the CacheTimeout field value if set, zero value otherwise.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) GetCacheTimeout() int32 {
	if o == nil || isNil(o.CacheTimeout) {
		var ret int32
		return ret
	}
	return *o.CacheTimeout
}

// GetCacheTimeoutOk returns a tuple with the CacheTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) GetCacheTimeoutOk() (*int32, bool) {
	if o == nil || isNil(o.CacheTimeout) {
    return nil, false
	}
	return o.CacheTimeout, true
}

// HasCacheTimeout returns a boolean if a field has been set.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) HasCacheTimeout() bool {
	if o != nil && !isNil(o.CacheTimeout) {
		return true
	}

	return false
}

// SetCacheTimeout gets a reference to the given int32 and assigns it to the CacheTimeout field.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) SetCacheTimeout(v int32) {
	o.CacheTimeout = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetServerCaCertificate returns the ServerCaCertificate field value if set, zero value otherwise.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) GetServerCaCertificate() NetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackServerCaCertificate {
	if o == nil || isNil(o.ServerCaCertificate) {
		var ret NetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackServerCaCertificate
		return ret
	}
	return *o.ServerCaCertificate
}

// GetServerCaCertificateOk returns a tuple with the ServerCaCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) GetServerCaCertificateOk() (*NetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackServerCaCertificate, bool) {
	if o == nil || isNil(o.ServerCaCertificate) {
    return nil, false
	}
	return o.ServerCaCertificate, true
}

// HasServerCaCertificate returns a boolean if a field has been set.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) HasServerCaCertificate() bool {
	if o != nil && !isNil(o.ServerCaCertificate) {
		return true
	}

	return false
}

// SetServerCaCertificate gets a reference to the given NetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackServerCaCertificate and assigns it to the ServerCaCertificate field.
func (o *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) SetServerCaCertificate(v NetworksNetworkIdWirelessSsidsNumberLocalAuthFallbackServerCaCertificate) {
	o.ServerCaCertificate = &v
}

func (o NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CacheTimeout) {
		toSerialize["cacheTimeout"] = o.CacheTimeout
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.ServerCaCertificate) {
		toSerialize["serverCaCertificate"] = o.ServerCaCertificate
	}
	return json.Marshal(toSerialize)
}

type NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback struct {
	value *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback
	isSet bool
}

func (v NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) Get() *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback {
	return v.value
}

func (v *NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) Set(val *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback(val *NetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) *NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback {
	return &NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback{value: val, isSet: true}
}

func (v NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworksNetworkIdWirelessSsidsNumberLocalAuthFallback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


