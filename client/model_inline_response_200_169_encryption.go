/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 February, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.55.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200169Encryption Encryption settings for the syslog server
type InlineResponse200169Encryption struct {
	// When true, traffic will be encrypted to the syslog server
	Enabled *bool `json:"enabled,omitempty"`
	Certificate *InlineResponse200169EncryptionCertificate `json:"certificate,omitempty"`
}

// NewInlineResponse200169Encryption instantiates a new InlineResponse200169Encryption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200169Encryption() *InlineResponse200169Encryption {
	this := InlineResponse200169Encryption{}
	return &this
}

// NewInlineResponse200169EncryptionWithDefaults instantiates a new InlineResponse200169Encryption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200169EncryptionWithDefaults() *InlineResponse200169Encryption {
	this := InlineResponse200169Encryption{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InlineResponse200169Encryption) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200169Encryption) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InlineResponse200169Encryption) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InlineResponse200169Encryption) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *InlineResponse200169Encryption) GetCertificate() InlineResponse200169EncryptionCertificate {
	if o == nil || isNil(o.Certificate) {
		var ret InlineResponse200169EncryptionCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200169Encryption) GetCertificateOk() (*InlineResponse200169EncryptionCertificate, bool) {
	if o == nil || isNil(o.Certificate) {
    return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *InlineResponse200169Encryption) HasCertificate() bool {
	if o != nil && !isNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given InlineResponse200169EncryptionCertificate and assigns it to the Certificate field.
func (o *InlineResponse200169Encryption) SetCertificate(v InlineResponse200169EncryptionCertificate) {
	o.Certificate = &v
}

func (o InlineResponse200169Encryption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200169Encryption struct {
	value *InlineResponse200169Encryption
	isSet bool
}

func (v NullableInlineResponse200169Encryption) Get() *InlineResponse200169Encryption {
	return v.value
}

func (v *NullableInlineResponse200169Encryption) Set(val *InlineResponse200169Encryption) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200169Encryption) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200169Encryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200169Encryption(val *InlineResponse200169Encryption) *NullableInlineResponse200169Encryption {
	return &NullableInlineResponse200169Encryption{value: val, isSet: true}
}

func (v NullableInlineResponse200169Encryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200169Encryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


