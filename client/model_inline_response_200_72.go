/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 October, 2022 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20072 struct for InlineResponse20072
type InlineResponse20072 struct {
	Counts *InlineResponse20072Counts `json:"counts,omitempty"`
}

// NewInlineResponse20072 instantiates a new InlineResponse20072 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20072() *InlineResponse20072 {
	this := InlineResponse20072{}
	return &this
}

// NewInlineResponse20072WithDefaults instantiates a new InlineResponse20072 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20072WithDefaults() *InlineResponse20072 {
	this := InlineResponse20072{}
	return &this
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *InlineResponse20072) GetCounts() InlineResponse20072Counts {
	if o == nil || o.Counts == nil {
		var ret InlineResponse20072Counts
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20072) GetCountsOk() (*InlineResponse20072Counts, bool) {
	if o == nil || o.Counts == nil {
		return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *InlineResponse20072) HasCounts() bool {
	if o != nil && o.Counts != nil {
		return true
	}

	return false
}

// SetCounts gets a reference to the given InlineResponse20072Counts and assigns it to the Counts field.
func (o *InlineResponse20072) SetCounts(v InlineResponse20072Counts) {
	o.Counts = &v
}

func (o InlineResponse20072) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Counts != nil {
		toSerialize["counts"] = o.Counts
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20072 struct {
	value *InlineResponse20072
	isSet bool
}

func (v NullableInlineResponse20072) Get() *InlineResponse20072 {
	return v.value
}

func (v *NullableInlineResponse20072) Set(val *InlineResponse20072) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20072) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20072) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20072(val *InlineResponse20072) *NullableInlineResponse20072 {
	return &NullableInlineResponse20072{value: val, isSet: true}
}

func (v NullableInlineResponse20072) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20072) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


