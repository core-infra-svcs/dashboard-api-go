/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 December, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.53.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200194 struct for InlineResponse200194
type InlineResponse200194 struct {
	// If true, Bonjour forwarding is enabled on the SSID.
	Enabled *bool `json:"enabled,omitempty"`
	Exception *InlineResponse200194Exception `json:"exception,omitempty"`
	// Bonjour forwarding rules
	Rules []InlineResponse200194Rules `json:"rules,omitempty"`
}

// NewInlineResponse200194 instantiates a new InlineResponse200194 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200194() *InlineResponse200194 {
	this := InlineResponse200194{}
	return &this
}

// NewInlineResponse200194WithDefaults instantiates a new InlineResponse200194 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200194WithDefaults() *InlineResponse200194 {
	this := InlineResponse200194{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InlineResponse200194) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200194) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InlineResponse200194) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InlineResponse200194) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetException returns the Exception field value if set, zero value otherwise.
func (o *InlineResponse200194) GetException() InlineResponse200194Exception {
	if o == nil || isNil(o.Exception) {
		var ret InlineResponse200194Exception
		return ret
	}
	return *o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200194) GetExceptionOk() (*InlineResponse200194Exception, bool) {
	if o == nil || isNil(o.Exception) {
    return nil, false
	}
	return o.Exception, true
}

// HasException returns a boolean if a field has been set.
func (o *InlineResponse200194) HasException() bool {
	if o != nil && !isNil(o.Exception) {
		return true
	}

	return false
}

// SetException gets a reference to the given InlineResponse200194Exception and assigns it to the Exception field.
func (o *InlineResponse200194) SetException(v InlineResponse200194Exception) {
	o.Exception = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *InlineResponse200194) GetRules() []InlineResponse200194Rules {
	if o == nil || isNil(o.Rules) {
		var ret []InlineResponse200194Rules
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200194) GetRulesOk() ([]InlineResponse200194Rules, bool) {
	if o == nil || isNil(o.Rules) {
    return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *InlineResponse200194) HasRules() bool {
	if o != nil && !isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []InlineResponse200194Rules and assigns it to the Rules field.
func (o *InlineResponse200194) SetRules(v []InlineResponse200194Rules) {
	o.Rules = v
}

func (o InlineResponse200194) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Exception) {
		toSerialize["exception"] = o.Exception
	}
	if !isNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200194 struct {
	value *InlineResponse200194
	isSet bool
}

func (v NullableInlineResponse200194) Get() *InlineResponse200194 {
	return v.value
}

func (v *NullableInlineResponse200194) Set(val *InlineResponse200194) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200194) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200194) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200194(val *InlineResponse200194) *NullableInlineResponse200194 {
	return &NullableInlineResponse200194{value: val, isSet: true}
}

func (v NullableInlineResponse200194) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200194) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


