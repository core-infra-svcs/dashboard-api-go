/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 June, 2022 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineObject151 struct for InlineObject151
type InlineObject151 struct {
	// A boolean representing whether or not the batch has been confirmed. This property cannot be unset once it is true.
	Confirmed *bool `json:"confirmed,omitempty"`
	// Set to true to force the batch to run synchronous. There can be at most 20 actions in synchronous batch.
	Synchronous *bool `json:"synchronous,omitempty"`
}

// NewInlineObject151 instantiates a new InlineObject151 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject151() *InlineObject151 {
	this := InlineObject151{}
	return &this
}

// NewInlineObject151WithDefaults instantiates a new InlineObject151 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject151WithDefaults() *InlineObject151 {
	this := InlineObject151{}
	return &this
}

// GetConfirmed returns the Confirmed field value if set, zero value otherwise.
func (o *InlineObject151) GetConfirmed() bool {
	if o == nil || o.Confirmed == nil {
		var ret bool
		return ret
	}
	return *o.Confirmed
}

// GetConfirmedOk returns a tuple with the Confirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject151) GetConfirmedOk() (*bool, bool) {
	if o == nil || o.Confirmed == nil {
		return nil, false
	}
	return o.Confirmed, true
}

// HasConfirmed returns a boolean if a field has been set.
func (o *InlineObject151) HasConfirmed() bool {
	if o != nil && o.Confirmed != nil {
		return true
	}

	return false
}

// SetConfirmed gets a reference to the given bool and assigns it to the Confirmed field.
func (o *InlineObject151) SetConfirmed(v bool) {
	o.Confirmed = &v
}

// GetSynchronous returns the Synchronous field value if set, zero value otherwise.
func (o *InlineObject151) GetSynchronous() bool {
	if o == nil || o.Synchronous == nil {
		var ret bool
		return ret
	}
	return *o.Synchronous
}

// GetSynchronousOk returns a tuple with the Synchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject151) GetSynchronousOk() (*bool, bool) {
	if o == nil || o.Synchronous == nil {
		return nil, false
	}
	return o.Synchronous, true
}

// HasSynchronous returns a boolean if a field has been set.
func (o *InlineObject151) HasSynchronous() bool {
	if o != nil && o.Synchronous != nil {
		return true
	}

	return false
}

// SetSynchronous gets a reference to the given bool and assigns it to the Synchronous field.
func (o *InlineObject151) SetSynchronous(v bool) {
	o.Synchronous = &v
}

func (o InlineObject151) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Confirmed != nil {
		toSerialize["confirmed"] = o.Confirmed
	}
	if o.Synchronous != nil {
		toSerialize["synchronous"] = o.Synchronous
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject151 struct {
	value *InlineObject151
	isSet bool
}

func (v NullableInlineObject151) Get() *InlineObject151 {
	return v.value
}

func (v *NullableInlineObject151) Set(val *InlineObject151) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject151) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject151) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject151(val *InlineObject151) *NullableInlineObject151 {
	return &NullableInlineObject151{value: val, isSet: true}
}

func (v NullableInlineObject151) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject151) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


