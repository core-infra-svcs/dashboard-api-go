/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 June, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.59.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ReceiversApiService ReceiversApi service
type ReceiversApiService service

type ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest struct {
	ctx context.Context
	ApiService *ReceiversApiService
	organizationId string
	createOrganizationWirelessLocationScanningReceiver *InlineObject302
}

func (r ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest) CreateOrganizationWirelessLocationScanningReceiver(createOrganizationWirelessLocationScanningReceiver InlineObject302) ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest {
	r.createOrganizationWirelessLocationScanningReceiver = &createOrganizationWirelessLocationScanningReceiver
	return r
}

func (r ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest) Execute() (*InlineResponse200363Items, *http.Response, error) {
	return r.ApiService.CreateOrganizationWirelessLocationScanningReceiverExecute(r)
}

/*
CreateOrganizationWirelessLocationScanningReceiver Add new receiver for scanning API

Add new receiver for scanning API

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest
*/
func (a *ReceiversApiService) CreateOrganizationWirelessLocationScanningReceiver(ctx context.Context, organizationId string) ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest {
	return ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200363Items
func (a *ReceiversApiService) CreateOrganizationWirelessLocationScanningReceiverExecute(r ReceiversApiCreateOrganizationWirelessLocationScanningReceiverRequest) (*InlineResponse200363Items, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200363Items
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiversApiService.CreateOrganizationWirelessLocationScanningReceiver")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/location/scanning/receivers"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationWirelessLocationScanningReceiver == nil {
		return localVarReturnValue, nil, reportError("createOrganizationWirelessLocationScanningReceiver is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationWirelessLocationScanningReceiver
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReceiversApiDeleteOrganizationWirelessLocationScanningReceiverRequest struct {
	ctx context.Context
	ApiService *ReceiversApiService
	organizationId string
	receiverId string
}

func (r ReceiversApiDeleteOrganizationWirelessLocationScanningReceiverRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrganizationWirelessLocationScanningReceiverExecute(r)
}

/*
DeleteOrganizationWirelessLocationScanningReceiver Delete a scanning API receiver

Delete a scanning API receiver

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param receiverId Receiver ID
 @return ReceiversApiDeleteOrganizationWirelessLocationScanningReceiverRequest
*/
func (a *ReceiversApiService) DeleteOrganizationWirelessLocationScanningReceiver(ctx context.Context, organizationId string, receiverId string) ReceiversApiDeleteOrganizationWirelessLocationScanningReceiverRequest {
	return ReceiversApiDeleteOrganizationWirelessLocationScanningReceiverRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		receiverId: receiverId,
	}
}

// Execute executes the request
func (a *ReceiversApiService) DeleteOrganizationWirelessLocationScanningReceiverExecute(r ReceiversApiDeleteOrganizationWirelessLocationScanningReceiverRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiversApiService.DeleteOrganizationWirelessLocationScanningReceiver")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/location/scanning/receivers/{receiverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"receiverId"+"}", url.PathEscape(parameterToString(r.receiverId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest struct {
	ctx context.Context
	ApiService *ReceiversApiService
	organizationId string
	perPage *int32
	startingAfter *string
	endingBefore *string
	networkIds *[]string
}

// The number of entries per page returned. Acceptable range is 3 - 250. Default is 50.
func (r ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest) PerPage(perPage int32) ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest) StartingAfter(startingAfter string) ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest) EndingBefore(endingBefore string) ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest {
	r.endingBefore = &endingBefore
	return r
}

// Optional parameter to filter scanning API receivers by network ID.
func (r ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest) NetworkIds(networkIds []string) ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest {
	r.networkIds = &networkIds
	return r
}

func (r ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest) Execute() (*InlineResponse200363, *http.Response, error) {
	return r.ApiService.GetOrganizationWirelessLocationScanningReceiversExecute(r)
}

/*
GetOrganizationWirelessLocationScanningReceivers Return scanning API receivers

Return scanning API receivers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest
*/
func (a *ReceiversApiService) GetOrganizationWirelessLocationScanningReceivers(ctx context.Context, organizationId string) ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest {
	return ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200363
func (a *ReceiversApiService) GetOrganizationWirelessLocationScanningReceiversExecute(r ReceiversApiGetOrganizationWirelessLocationScanningReceiversRequest) (*InlineResponse200363, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200363
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiversApiService.GetOrganizationWirelessLocationScanningReceivers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/location/scanning/receivers"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest struct {
	ctx context.Context
	ApiService *ReceiversApiService
	organizationId string
	receiverId string
	updateOrganizationWirelessLocationScanningReceiver *InlineObject303
}

func (r ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest) UpdateOrganizationWirelessLocationScanningReceiver(updateOrganizationWirelessLocationScanningReceiver InlineObject303) ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest {
	r.updateOrganizationWirelessLocationScanningReceiver = &updateOrganizationWirelessLocationScanningReceiver
	return r
}

func (r ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest) Execute() (*InlineResponse200363Items, *http.Response, error) {
	return r.ApiService.UpdateOrganizationWirelessLocationScanningReceiverExecute(r)
}

/*
UpdateOrganizationWirelessLocationScanningReceiver Change scanning API receiver settings

Change scanning API receiver settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param receiverId Receiver ID
 @return ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest
*/
func (a *ReceiversApiService) UpdateOrganizationWirelessLocationScanningReceiver(ctx context.Context, organizationId string, receiverId string) ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest {
	return ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		receiverId: receiverId,
	}
}

// Execute executes the request
//  @return InlineResponse200363Items
func (a *ReceiversApiService) UpdateOrganizationWirelessLocationScanningReceiverExecute(r ReceiversApiUpdateOrganizationWirelessLocationScanningReceiverRequest) (*InlineResponse200363Items, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200363Items
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiversApiService.UpdateOrganizationWirelessLocationScanningReceiver")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/location/scanning/receivers/{receiverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"receiverId"+"}", url.PathEscape(parameterToString(r.receiverId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationWirelessLocationScanningReceiver
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
