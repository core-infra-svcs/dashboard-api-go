/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.57.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// EntriesApiService EntriesApi service
type EntriesApiService service

type EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest struct {
	ctx context.Context
	ApiService *EntriesApiService
	organizationId string
	createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry *InlineObject289
}

func (r EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry(createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry InlineObject289) EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest {
	r.createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry = &createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
	return r
}

func (r EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) Execute() (*InlineResponse200349Items, *http.Response, error) {
	return r.ApiService.CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryExecute(r)
}

/*
CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry Create isolation allow list MAC entry for this organization

Create isolation allow list MAC entry for this organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest
*/
func (a *EntriesApiService) CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry(ctx context.Context, organizationId string) EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest {
	return EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200349Items
func (a *EntriesApiService) CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryExecute(r EntriesApiCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) (*InlineResponse200349Items, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200349Items
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntriesApiService.CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry == nil {
		return localVarReturnValue, nil, reportError("createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EntriesApiDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest struct {
	ctx context.Context
	ApiService *EntriesApiService
	organizationId string
	entryId string
}

func (r EntriesApiDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryExecute(r)
}

/*
DeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry Destroy isolation allow list MAC entry for this organization

Destroy isolation allow list MAC entry for this organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param entryId Entry ID
 @return EntriesApiDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest
*/
func (a *EntriesApiService) DeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry(ctx context.Context, organizationId string, entryId string) EntriesApiDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest {
	return EntriesApiDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		entryId: entryId,
	}
}

// Execute executes the request
func (a *EntriesApiService) DeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryExecute(r EntriesApiDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntriesApiService.DeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries/{entryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entryId"+"}", url.PathEscape(parameterToString(r.entryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest struct {
	ctx context.Context
	ApiService *EntriesApiService
	organizationId string
	perPage *int32
	startingAfter *string
	endingBefore *string
	networkIds *[]string
	ssids *[]int32
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
func (r EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest) PerPage(perPage int32) EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest) StartingAfter(startingAfter string) EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest) EndingBefore(endingBefore string) EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest {
	r.endingBefore = &endingBefore
	return r
}

// networkIds array to filter out results
func (r EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest) NetworkIds(networkIds []string) EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest {
	r.networkIds = &networkIds
	return r
}

// ssids number array to filter out results
func (r EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest) Ssids(ssids []int32) EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest {
	r.ssids = &ssids
	return r
}

func (r EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest) Execute() (*InlineResponse200349, *http.Response, error) {
	return r.ApiService.GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesExecute(r)
}

/*
GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries List the L2 isolation allow list MAC entry in an organization

List the L2 isolation allow list MAC entry in an organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest
*/
func (a *EntriesApiService) GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries(ctx context.Context, organizationId string) EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest {
	return EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200349
func (a *EntriesApiService) GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesExecute(r EntriesApiGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest) (*InlineResponse200349, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200349
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntriesApiService.GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.ssids != nil {
		localVarQueryParams.Add("ssids", parameterToString(*r.ssids, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest struct {
	ctx context.Context
	ApiService *EntriesApiService
	organizationId string
	entryId string
	updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry *InlineObject290
}

func (r EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry(updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry InlineObject290) EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest {
	r.updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry = &updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
	return r
}

func (r EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) Execute() (*InlineResponse200349Items, *http.Response, error) {
	return r.ApiService.UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryExecute(r)
}

/*
UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry Update isolation allow list MAC entry info

Update isolation allow list MAC entry info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param entryId Entry ID
 @return EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest
*/
func (a *EntriesApiService) UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry(ctx context.Context, organizationId string, entryId string) EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest {
	return EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		entryId: entryId,
	}
}

// Execute executes the request
//  @return InlineResponse200349Items
func (a *EntriesApiService) UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryExecute(r EntriesApiUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest) (*InlineResponse200349Items, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200349Items
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntriesApiService.UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries/{entryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entryId"+"}", url.PathEscape(parameterToString(r.entryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
