/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200302 struct for InlineResponse200302
type InlineResponse200302 struct {
	// Resulting licenses from the move
	ResultingLicenses []InlineResponse200301 `json:"resultingLicenses,omitempty"`
}

// NewInlineResponse200302 instantiates a new InlineResponse200302 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200302() *InlineResponse200302 {
	this := InlineResponse200302{}
	return &this
}

// NewInlineResponse200302WithDefaults instantiates a new InlineResponse200302 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200302WithDefaults() *InlineResponse200302 {
	this := InlineResponse200302{}
	return &this
}

// GetResultingLicenses returns the ResultingLicenses field value if set, zero value otherwise.
func (o *InlineResponse200302) GetResultingLicenses() []InlineResponse200301 {
	if o == nil || isNil(o.ResultingLicenses) {
		var ret []InlineResponse200301
		return ret
	}
	return o.ResultingLicenses
}

// GetResultingLicensesOk returns a tuple with the ResultingLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200302) GetResultingLicensesOk() ([]InlineResponse200301, bool) {
	if o == nil || isNil(o.ResultingLicenses) {
    return nil, false
	}
	return o.ResultingLicenses, true
}

// HasResultingLicenses returns a boolean if a field has been set.
func (o *InlineResponse200302) HasResultingLicenses() bool {
	if o != nil && !isNil(o.ResultingLicenses) {
		return true
	}

	return false
}

// SetResultingLicenses gets a reference to the given []InlineResponse200301 and assigns it to the ResultingLicenses field.
func (o *InlineResponse200302) SetResultingLicenses(v []InlineResponse200301) {
	o.ResultingLicenses = v
}

func (o InlineResponse200302) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ResultingLicenses) {
		toSerialize["resultingLicenses"] = o.ResultingLicenses
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200302 struct {
	value *InlineResponse200302
	isSet bool
}

func (v NullableInlineResponse200302) Get() *InlineResponse200302 {
	return v.value
}

func (v *NullableInlineResponse200302) Set(val *InlineResponse200302) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200302) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200302) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200302(val *InlineResponse200302) *NullableInlineResponse200302 {
	return &NullableInlineResponse200302{value: val, isSet: true}
}

func (v NullableInlineResponse200302) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200302) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


