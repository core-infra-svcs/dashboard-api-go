/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20071FailoverAndFailback WAN failover and failback
type InlineResponse20071FailoverAndFailback struct {
	Immediate *InlineResponse20071FailoverAndFailbackImmediate `json:"immediate,omitempty"`
}

// NewInlineResponse20071FailoverAndFailback instantiates a new InlineResponse20071FailoverAndFailback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20071FailoverAndFailback() *InlineResponse20071FailoverAndFailback {
	this := InlineResponse20071FailoverAndFailback{}
	return &this
}

// NewInlineResponse20071FailoverAndFailbackWithDefaults instantiates a new InlineResponse20071FailoverAndFailback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20071FailoverAndFailbackWithDefaults() *InlineResponse20071FailoverAndFailback {
	this := InlineResponse20071FailoverAndFailback{}
	return &this
}

// GetImmediate returns the Immediate field value if set, zero value otherwise.
func (o *InlineResponse20071FailoverAndFailback) GetImmediate() InlineResponse20071FailoverAndFailbackImmediate {
	if o == nil || isNil(o.Immediate) {
		var ret InlineResponse20071FailoverAndFailbackImmediate
		return ret
	}
	return *o.Immediate
}

// GetImmediateOk returns a tuple with the Immediate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20071FailoverAndFailback) GetImmediateOk() (*InlineResponse20071FailoverAndFailbackImmediate, bool) {
	if o == nil || isNil(o.Immediate) {
    return nil, false
	}
	return o.Immediate, true
}

// HasImmediate returns a boolean if a field has been set.
func (o *InlineResponse20071FailoverAndFailback) HasImmediate() bool {
	if o != nil && !isNil(o.Immediate) {
		return true
	}

	return false
}

// SetImmediate gets a reference to the given InlineResponse20071FailoverAndFailbackImmediate and assigns it to the Immediate field.
func (o *InlineResponse20071FailoverAndFailback) SetImmediate(v InlineResponse20071FailoverAndFailbackImmediate) {
	o.Immediate = &v
}

func (o InlineResponse20071FailoverAndFailback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Immediate) {
		toSerialize["immediate"] = o.Immediate
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20071FailoverAndFailback struct {
	value *InlineResponse20071FailoverAndFailback
	isSet bool
}

func (v NullableInlineResponse20071FailoverAndFailback) Get() *InlineResponse20071FailoverAndFailback {
	return v.value
}

func (v *NullableInlineResponse20071FailoverAndFailback) Set(val *InlineResponse20071FailoverAndFailback) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20071FailoverAndFailback) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20071FailoverAndFailback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20071FailoverAndFailback(val *InlineResponse20071FailoverAndFailback) *NullableInlineResponse20071FailoverAndFailback {
	return &NullableInlineResponse20071FailoverAndFailback{value: val, isSet: true}
}

func (v NullableInlineResponse20071FailoverAndFailback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20071FailoverAndFailback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


