/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 September, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.62.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20018 struct for InlineResponse20018
type InlineResponse20018 struct {
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims []InlineResponse20018Sims `json:"sims,omitempty"`
	// Specifies the ordering of all SIMs for an MG: primary, secondary, and not-in-use (when applicable). It's required for devices with 3 or more SIMs and can be used in place of 'isPrimary' for dual-SIM devices. To indicate eSIM, use 'sim3'. Sim failover will occur only between primary and secondary sim slots.
	SimOrdering []string `json:"simOrdering,omitempty"`
	SimFailover *InlineResponse20018SimFailover `json:"simFailover,omitempty"`
}

// NewInlineResponse20018 instantiates a new InlineResponse20018 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20018() *InlineResponse20018 {
	this := InlineResponse20018{}
	return &this
}

// NewInlineResponse20018WithDefaults instantiates a new InlineResponse20018 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20018WithDefaults() *InlineResponse20018 {
	this := InlineResponse20018{}
	return &this
}

// GetSims returns the Sims field value if set, zero value otherwise.
func (o *InlineResponse20018) GetSims() []InlineResponse20018Sims {
	if o == nil || isNil(o.Sims) {
		var ret []InlineResponse20018Sims
		return ret
	}
	return o.Sims
}

// GetSimsOk returns a tuple with the Sims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20018) GetSimsOk() ([]InlineResponse20018Sims, bool) {
	if o == nil || isNil(o.Sims) {
    return nil, false
	}
	return o.Sims, true
}

// HasSims returns a boolean if a field has been set.
func (o *InlineResponse20018) HasSims() bool {
	if o != nil && !isNil(o.Sims) {
		return true
	}

	return false
}

// SetSims gets a reference to the given []InlineResponse20018Sims and assigns it to the Sims field.
func (o *InlineResponse20018) SetSims(v []InlineResponse20018Sims) {
	o.Sims = v
}

// GetSimOrdering returns the SimOrdering field value if set, zero value otherwise.
func (o *InlineResponse20018) GetSimOrdering() []string {
	if o == nil || isNil(o.SimOrdering) {
		var ret []string
		return ret
	}
	return o.SimOrdering
}

// GetSimOrderingOk returns a tuple with the SimOrdering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20018) GetSimOrderingOk() ([]string, bool) {
	if o == nil || isNil(o.SimOrdering) {
    return nil, false
	}
	return o.SimOrdering, true
}

// HasSimOrdering returns a boolean if a field has been set.
func (o *InlineResponse20018) HasSimOrdering() bool {
	if o != nil && !isNil(o.SimOrdering) {
		return true
	}

	return false
}

// SetSimOrdering gets a reference to the given []string and assigns it to the SimOrdering field.
func (o *InlineResponse20018) SetSimOrdering(v []string) {
	o.SimOrdering = v
}

// GetSimFailover returns the SimFailover field value if set, zero value otherwise.
func (o *InlineResponse20018) GetSimFailover() InlineResponse20018SimFailover {
	if o == nil || isNil(o.SimFailover) {
		var ret InlineResponse20018SimFailover
		return ret
	}
	return *o.SimFailover
}

// GetSimFailoverOk returns a tuple with the SimFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20018) GetSimFailoverOk() (*InlineResponse20018SimFailover, bool) {
	if o == nil || isNil(o.SimFailover) {
    return nil, false
	}
	return o.SimFailover, true
}

// HasSimFailover returns a boolean if a field has been set.
func (o *InlineResponse20018) HasSimFailover() bool {
	if o != nil && !isNil(o.SimFailover) {
		return true
	}

	return false
}

// SetSimFailover gets a reference to the given InlineResponse20018SimFailover and assigns it to the SimFailover field.
func (o *InlineResponse20018) SetSimFailover(v InlineResponse20018SimFailover) {
	o.SimFailover = &v
}

func (o InlineResponse20018) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Sims) {
		toSerialize["sims"] = o.Sims
	}
	if !isNil(o.SimOrdering) {
		toSerialize["simOrdering"] = o.SimOrdering
	}
	if !isNil(o.SimFailover) {
		toSerialize["simFailover"] = o.SimFailover
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20018 struct {
	value *InlineResponse20018
	isSet bool
}

func (v NullableInlineResponse20018) Get() *InlineResponse20018 {
	return v.value
}

func (v *NullableInlineResponse20018) Set(val *InlineResponse20018) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20018) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20018) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20018(val *InlineResponse20018) *NullableInlineResponse20018 {
	return &NullableInlineResponse20018{value: val, isSet: true}
}

func (v NullableInlineResponse20018) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20018) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


