/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 September, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.62.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200223 struct for InlineResponse200223
type InlineResponse200223 struct {
	ResponseCodeCounts *InlineResponse200223ResponseCodeCounts `json:"responseCodeCounts,omitempty"`
}

// NewInlineResponse200223 instantiates a new InlineResponse200223 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200223() *InlineResponse200223 {
	this := InlineResponse200223{}
	return &this
}

// NewInlineResponse200223WithDefaults instantiates a new InlineResponse200223 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200223WithDefaults() *InlineResponse200223 {
	this := InlineResponse200223{}
	return &this
}

// GetResponseCodeCounts returns the ResponseCodeCounts field value if set, zero value otherwise.
func (o *InlineResponse200223) GetResponseCodeCounts() InlineResponse200223ResponseCodeCounts {
	if o == nil || isNil(o.ResponseCodeCounts) {
		var ret InlineResponse200223ResponseCodeCounts
		return ret
	}
	return *o.ResponseCodeCounts
}

// GetResponseCodeCountsOk returns a tuple with the ResponseCodeCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200223) GetResponseCodeCountsOk() (*InlineResponse200223ResponseCodeCounts, bool) {
	if o == nil || isNil(o.ResponseCodeCounts) {
    return nil, false
	}
	return o.ResponseCodeCounts, true
}

// HasResponseCodeCounts returns a boolean if a field has been set.
func (o *InlineResponse200223) HasResponseCodeCounts() bool {
	if o != nil && !isNil(o.ResponseCodeCounts) {
		return true
	}

	return false
}

// SetResponseCodeCounts gets a reference to the given InlineResponse200223ResponseCodeCounts and assigns it to the ResponseCodeCounts field.
func (o *InlineResponse200223) SetResponseCodeCounts(v InlineResponse200223ResponseCodeCounts) {
	o.ResponseCodeCounts = &v
}

func (o InlineResponse200223) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ResponseCodeCounts) {
		toSerialize["responseCodeCounts"] = o.ResponseCodeCounts
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200223 struct {
	value *InlineResponse200223
	isSet bool
}

func (v NullableInlineResponse200223) Get() *InlineResponse200223 {
	return v.value
}

func (v *NullableInlineResponse200223) Set(val *InlineResponse200223) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200223) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200223) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200223(val *InlineResponse200223) *NullableInlineResponse200223 {
	return &NullableInlineResponse200223{value: val, isSet: true}
}

func (v NullableInlineResponse200223) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200223) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


