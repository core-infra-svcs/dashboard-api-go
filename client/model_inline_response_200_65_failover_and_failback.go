/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 September, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.50.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20065FailoverAndFailback WAN failover and failback
type InlineResponse20065FailoverAndFailback struct {
	Immediate *InlineResponse20065FailoverAndFailbackImmediate `json:"immediate,omitempty"`
}

// NewInlineResponse20065FailoverAndFailback instantiates a new InlineResponse20065FailoverAndFailback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20065FailoverAndFailback() *InlineResponse20065FailoverAndFailback {
	this := InlineResponse20065FailoverAndFailback{}
	return &this
}

// NewInlineResponse20065FailoverAndFailbackWithDefaults instantiates a new InlineResponse20065FailoverAndFailback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20065FailoverAndFailbackWithDefaults() *InlineResponse20065FailoverAndFailback {
	this := InlineResponse20065FailoverAndFailback{}
	return &this
}

// GetImmediate returns the Immediate field value if set, zero value otherwise.
func (o *InlineResponse20065FailoverAndFailback) GetImmediate() InlineResponse20065FailoverAndFailbackImmediate {
	if o == nil || isNil(o.Immediate) {
		var ret InlineResponse20065FailoverAndFailbackImmediate
		return ret
	}
	return *o.Immediate
}

// GetImmediateOk returns a tuple with the Immediate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20065FailoverAndFailback) GetImmediateOk() (*InlineResponse20065FailoverAndFailbackImmediate, bool) {
	if o == nil || isNil(o.Immediate) {
    return nil, false
	}
	return o.Immediate, true
}

// HasImmediate returns a boolean if a field has been set.
func (o *InlineResponse20065FailoverAndFailback) HasImmediate() bool {
	if o != nil && !isNil(o.Immediate) {
		return true
	}

	return false
}

// SetImmediate gets a reference to the given InlineResponse20065FailoverAndFailbackImmediate and assigns it to the Immediate field.
func (o *InlineResponse20065FailoverAndFailback) SetImmediate(v InlineResponse20065FailoverAndFailbackImmediate) {
	o.Immediate = &v
}

func (o InlineResponse20065FailoverAndFailback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Immediate) {
		toSerialize["immediate"] = o.Immediate
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20065FailoverAndFailback struct {
	value *InlineResponse20065FailoverAndFailback
	isSet bool
}

func (v NullableInlineResponse20065FailoverAndFailback) Get() *InlineResponse20065FailoverAndFailback {
	return v.value
}

func (v *NullableInlineResponse20065FailoverAndFailback) Set(val *InlineResponse20065FailoverAndFailback) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20065FailoverAndFailback) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20065FailoverAndFailback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20065FailoverAndFailback(val *InlineResponse20065FailoverAndFailback) *NullableInlineResponse20065FailoverAndFailback {
	return &NullableInlineResponse20065FailoverAndFailback{value: val, isSet: true}
}

func (v NullableInlineResponse20065FailoverAndFailback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20065FailoverAndFailback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


