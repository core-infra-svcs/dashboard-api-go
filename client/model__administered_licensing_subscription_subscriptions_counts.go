/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 May, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.46.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AdministeredLicensingSubscriptionSubscriptionsCounts Numeric breakdown of network and entitlement counts
type AdministeredLicensingSubscriptionSubscriptionsCounts struct {
	Seats *AdministeredLicensingSubscriptionSubscriptionsCountsSeats `json:"seats,omitempty"`
	// Number of networks bound to this subscription
	Networks *int32 `json:"networks,omitempty"`
}

// NewAdministeredLicensingSubscriptionSubscriptionsCounts instantiates a new AdministeredLicensingSubscriptionSubscriptionsCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministeredLicensingSubscriptionSubscriptionsCounts() *AdministeredLicensingSubscriptionSubscriptionsCounts {
	this := AdministeredLicensingSubscriptionSubscriptionsCounts{}
	return &this
}

// NewAdministeredLicensingSubscriptionSubscriptionsCountsWithDefaults instantiates a new AdministeredLicensingSubscriptionSubscriptionsCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministeredLicensingSubscriptionSubscriptionsCountsWithDefaults() *AdministeredLicensingSubscriptionSubscriptionsCounts {
	this := AdministeredLicensingSubscriptionSubscriptionsCounts{}
	return &this
}

// GetSeats returns the Seats field value if set, zero value otherwise.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) GetSeats() AdministeredLicensingSubscriptionSubscriptionsCountsSeats {
	if o == nil || isNil(o.Seats) {
		var ret AdministeredLicensingSubscriptionSubscriptionsCountsSeats
		return ret
	}
	return *o.Seats
}

// GetSeatsOk returns a tuple with the Seats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) GetSeatsOk() (*AdministeredLicensingSubscriptionSubscriptionsCountsSeats, bool) {
	if o == nil || isNil(o.Seats) {
    return nil, false
	}
	return o.Seats, true
}

// HasSeats returns a boolean if a field has been set.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) HasSeats() bool {
	if o != nil && !isNil(o.Seats) {
		return true
	}

	return false
}

// SetSeats gets a reference to the given AdministeredLicensingSubscriptionSubscriptionsCountsSeats and assigns it to the Seats field.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) SetSeats(v AdministeredLicensingSubscriptionSubscriptionsCountsSeats) {
	o.Seats = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) GetNetworks() int32 {
	if o == nil || isNil(o.Networks) {
		var ret int32
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) GetNetworksOk() (*int32, bool) {
	if o == nil || isNil(o.Networks) {
    return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) HasNetworks() bool {
	if o != nil && !isNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given int32 and assigns it to the Networks field.
func (o *AdministeredLicensingSubscriptionSubscriptionsCounts) SetNetworks(v int32) {
	o.Networks = &v
}

func (o AdministeredLicensingSubscriptionSubscriptionsCounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Seats) {
		toSerialize["seats"] = o.Seats
	}
	if !isNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	return json.Marshal(toSerialize)
}

type NullableAdministeredLicensingSubscriptionSubscriptionsCounts struct {
	value *AdministeredLicensingSubscriptionSubscriptionsCounts
	isSet bool
}

func (v NullableAdministeredLicensingSubscriptionSubscriptionsCounts) Get() *AdministeredLicensingSubscriptionSubscriptionsCounts {
	return v.value
}

func (v *NullableAdministeredLicensingSubscriptionSubscriptionsCounts) Set(val *AdministeredLicensingSubscriptionSubscriptionsCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministeredLicensingSubscriptionSubscriptionsCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministeredLicensingSubscriptionSubscriptionsCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministeredLicensingSubscriptionSubscriptionsCounts(val *AdministeredLicensingSubscriptionSubscriptionsCounts) *NullableAdministeredLicensingSubscriptionSubscriptionsCounts {
	return &NullableAdministeredLicensingSubscriptionSubscriptionsCounts{value: val, isSet: true}
}

func (v NullableAdministeredLicensingSubscriptionSubscriptionsCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministeredLicensingSubscriptionSubscriptionsCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


