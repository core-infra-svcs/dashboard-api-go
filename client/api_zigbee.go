/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ZigbeeApiService ZigbeeApi service
type ZigbeeApiService service

type ZigbeeApiCreateDeviceWirelessZigbeeEnrollmentRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	serial string
}

func (r ZigbeeApiCreateDeviceWirelessZigbeeEnrollmentRequest) Execute() (*InlineResponse2019, *http.Response, error) {
	return r.ApiService.CreateDeviceWirelessZigbeeEnrollmentExecute(r)
}

/*
CreateDeviceWirelessZigbeeEnrollment Enqueue a job to start enrolling door locks on zigbee configured wireless devices

Enqueue a job to start enrolling door locks on zigbee configured wireless devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serial Serial
 @return ZigbeeApiCreateDeviceWirelessZigbeeEnrollmentRequest
*/
func (a *ZigbeeApiService) CreateDeviceWirelessZigbeeEnrollment(ctx context.Context, serial string) ZigbeeApiCreateDeviceWirelessZigbeeEnrollmentRequest {
	return ZigbeeApiCreateDeviceWirelessZigbeeEnrollmentRequest{
		ApiService: a,
		ctx: ctx,
		serial: serial,
	}
}

// Execute executes the request
//  @return InlineResponse2019
func (a *ZigbeeApiService) CreateDeviceWirelessZigbeeEnrollmentExecute(r ZigbeeApiCreateDeviceWirelessZigbeeEnrollmentRequest) (*InlineResponse2019, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse2019
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.CreateDeviceWirelessZigbeeEnrollment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devices/{serial}/wireless/zigbee/enrollments"
	localVarPath = strings.Replace(localVarPath, "{"+"serial"+"}", url.PathEscape(parameterToString(r.serial, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	organizationId string
	createOrganizationWirelessZigbeeDisenrollment *InlineObject309
}

func (r ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest) CreateOrganizationWirelessZigbeeDisenrollment(createOrganizationWirelessZigbeeDisenrollment InlineObject309) ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest {
	r.createOrganizationWirelessZigbeeDisenrollment = &createOrganizationWirelessZigbeeDisenrollment
	return r
}

func (r ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest) Execute() (*InlineResponse20123, *http.Response, error) {
	return r.ApiService.CreateOrganizationWirelessZigbeeDisenrollmentExecute(r)
}

/*
CreateOrganizationWirelessZigbeeDisenrollment Enqueue a job to start disenrolling door locks on zigbee configured wireless devices

Enqueue a job to start disenrolling door locks on zigbee configured wireless devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest
*/
func (a *ZigbeeApiService) CreateOrganizationWirelessZigbeeDisenrollment(ctx context.Context, organizationId string) ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest {
	return ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse20123
func (a *ZigbeeApiService) CreateOrganizationWirelessZigbeeDisenrollmentExecute(r ZigbeeApiCreateOrganizationWirelessZigbeeDisenrollmentRequest) (*InlineResponse20123, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20123
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.CreateOrganizationWirelessZigbeeDisenrollment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/disenrollments"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationWirelessZigbeeDisenrollment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiGetDeviceWirelessZigbeeEnrollmentRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	serial string
	enrollmentId string
}

func (r ZigbeeApiGetDeviceWirelessZigbeeEnrollmentRequest) Execute() (*InlineResponse20048, *http.Response, error) {
	return r.ApiService.GetDeviceWirelessZigbeeEnrollmentExecute(r)
}

/*
GetDeviceWirelessZigbeeEnrollment Return an enrollment

Return an enrollment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serial Serial
 @param enrollmentId Enrollment ID
 @return ZigbeeApiGetDeviceWirelessZigbeeEnrollmentRequest
*/
func (a *ZigbeeApiService) GetDeviceWirelessZigbeeEnrollment(ctx context.Context, serial string, enrollmentId string) ZigbeeApiGetDeviceWirelessZigbeeEnrollmentRequest {
	return ZigbeeApiGetDeviceWirelessZigbeeEnrollmentRequest{
		ApiService: a,
		ctx: ctx,
		serial: serial,
		enrollmentId: enrollmentId,
	}
}

// Execute executes the request
//  @return InlineResponse20048
func (a *ZigbeeApiService) GetDeviceWirelessZigbeeEnrollmentExecute(r ZigbeeApiGetDeviceWirelessZigbeeEnrollmentRequest) (*InlineResponse20048, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20048
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.GetDeviceWirelessZigbeeEnrollment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/devices/{serial}/wireless/zigbee/enrollments/{enrollmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serial"+"}", url.PathEscape(parameterToString(r.serial, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentId"+"}", url.PathEscape(parameterToString(r.enrollmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	organizationId string
	perPage *int32
	startingAfter *string
	endingBefore *string
	networkIds *[]string
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
func (r ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest) PerPage(perPage int32) ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest) StartingAfter(startingAfter string) ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest) EndingBefore(endingBefore string) ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest {
	r.endingBefore = &endingBefore
	return r
}

// Filter by specified Network IDs
func (r ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest) NetworkIds(networkIds []string) ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest {
	r.networkIds = &networkIds
	return r
}

func (r ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest) Execute() ([]InlineResponse20116, *http.Response, error) {
	return r.ApiService.GetOrganizationWirelessZigbeeByNetworkExecute(r)
}

/*
GetOrganizationWirelessZigbeeByNetwork Return list of Zigbee configs

Return list of Zigbee configs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest
*/
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeByNetwork(ctx context.Context, organizationId string) ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest {
	return ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse20116
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeByNetworkExecute(r ZigbeeApiGetOrganizationWirelessZigbeeByNetworkRequest) ([]InlineResponse20116, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse20116
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.GetOrganizationWirelessZigbeeByNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/byNetwork"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	organizationId string
	perPage *int32
	startingAfter *string
	endingBefore *string
	networkIds *[]string
	isEnrolled *bool
	search *string
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
func (r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) PerPage(perPage int32) ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) StartingAfter(startingAfter string) ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) EndingBefore(endingBefore string) ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest {
	r.endingBefore = &endingBefore
	return r
}

// Parameter of networks you want the zigbee devices for. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;N_3456
func (r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) NetworkIds(networkIds []string) ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest {
	r.networkIds = &networkIds
	return r
}

// Filter devices based on if they are enrolled or not
func (r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) IsEnrolled(isEnrolled bool) ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest {
	r.isEnrolled = &isEnrolled
	return r
}

// Filter devices by their name, tag or serial
func (r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) Search(search string) ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest {
	r.search = &search
	return r
}

func (r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) Execute() ([]InlineResponse200373, *http.Response, error) {
	return r.ApiService.GetOrganizationWirelessZigbeeDevicesExecute(r)
}

/*
GetOrganizationWirelessZigbeeDevices List the Zigbee wireless devices for an organization or the supplied network(s)

List the Zigbee wireless devices for an organization or the supplied network(s)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest
*/
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeDevices(ctx context.Context, organizationId string) ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest {
	return ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse200373
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeDevicesExecute(r ZigbeeApiGetOrganizationWirelessZigbeeDevicesRequest) ([]InlineResponse200373, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse200373
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.GetOrganizationWirelessZigbeeDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.isEnrolled != nil {
		localVarQueryParams.Add("isEnrolled", parameterToString(*r.isEnrolled, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiGetOrganizationWirelessZigbeeDisenrollmentRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	organizationId string
	disenrollmentId string
}

func (r ZigbeeApiGetOrganizationWirelessZigbeeDisenrollmentRequest) Execute() (*InlineResponse200374, *http.Response, error) {
	return r.ApiService.GetOrganizationWirelessZigbeeDisenrollmentExecute(r)
}

/*
GetOrganizationWirelessZigbeeDisenrollment Return a disenrollment

Return a disenrollment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param disenrollmentId Disenrollment ID
 @return ZigbeeApiGetOrganizationWirelessZigbeeDisenrollmentRequest
*/
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeDisenrollment(ctx context.Context, organizationId string, disenrollmentId string) ZigbeeApiGetOrganizationWirelessZigbeeDisenrollmentRequest {
	return ZigbeeApiGetOrganizationWirelessZigbeeDisenrollmentRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		disenrollmentId: disenrollmentId,
	}
}

// Execute executes the request
//  @return InlineResponse200374
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeDisenrollmentExecute(r ZigbeeApiGetOrganizationWirelessZigbeeDisenrollmentRequest) (*InlineResponse200374, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200374
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.GetOrganizationWirelessZigbeeDisenrollment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/disenrollments/{disenrollmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"disenrollmentId"+"}", url.PathEscape(parameterToString(r.disenrollmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	organizationId string
	networkIds *[]string
	serial *string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// Filter by specified Network IDs
func (r ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest) NetworkIds(networkIds []string) ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.networkIds = &networkIds
	return r
}

// Filter by device serial
func (r ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest) Serial(serial string) ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.serial = &serial
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 500. Default is 50.
func (r ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest) PerPage(perPage int32) ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest) StartingAfter(startingAfter string) ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest) EndingBefore(endingBefore string) ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest) Execute() ([]InlineResponse20048DoorLocks, *http.Response, error) {
	return r.ApiService.GetOrganizationWirelessZigbeeDoorLocksExecute(r)
}

/*
GetOrganizationWirelessZigbeeDoorLocks Return the list of door locks for a network

Return the list of door locks for a network

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest
*/
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeDoorLocks(ctx context.Context, organizationId string) ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	return ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse20048DoorLocks
func (a *ZigbeeApiService) GetOrganizationWirelessZigbeeDoorLocksExecute(r ZigbeeApiGetOrganizationWirelessZigbeeDoorLocksRequest) ([]InlineResponse20048DoorLocks, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse20048DoorLocks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.GetOrganizationWirelessZigbeeDoorLocks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/doorLocks"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.serial != nil {
		localVarQueryParams.Add("serial", parameterToString(*r.serial, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiUpdateNetworkWirelessZigbeeRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	networkId string
	updateNetworkWirelessZigbee *InlineObject207
}

func (r ZigbeeApiUpdateNetworkWirelessZigbeeRequest) UpdateNetworkWirelessZigbee(updateNetworkWirelessZigbee InlineObject207) ZigbeeApiUpdateNetworkWirelessZigbeeRequest {
	r.updateNetworkWirelessZigbee = &updateNetworkWirelessZigbee
	return r
}

func (r ZigbeeApiUpdateNetworkWirelessZigbeeRequest) Execute() (*InlineResponse20116, *http.Response, error) {
	return r.ApiService.UpdateNetworkWirelessZigbeeExecute(r)
}

/*
UpdateNetworkWirelessZigbee Update Zigbee Configs for specified network

Update Zigbee Configs for specified network

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId Network ID
 @return ZigbeeApiUpdateNetworkWirelessZigbeeRequest
*/
func (a *ZigbeeApiService) UpdateNetworkWirelessZigbee(ctx context.Context, networkId string) ZigbeeApiUpdateNetworkWirelessZigbeeRequest {
	return ZigbeeApiUpdateNetworkWirelessZigbeeRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
	}
}

// Execute executes the request
//  @return InlineResponse20116
func (a *ZigbeeApiService) UpdateNetworkWirelessZigbeeExecute(r ZigbeeApiUpdateNetworkWirelessZigbeeRequest) (*InlineResponse20116, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20116
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.UpdateNetworkWirelessZigbee")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networks/{networkId}/wireless/zigbee"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterToString(r.networkId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNetworkWirelessZigbee
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	organizationId string
	id string
	updateOrganizationWirelessZigbeeDevice *InlineObject308
}

func (r ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest) UpdateOrganizationWirelessZigbeeDevice(updateOrganizationWirelessZigbeeDevice InlineObject308) ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest {
	r.updateOrganizationWirelessZigbeeDevice = &updateOrganizationWirelessZigbeeDevice
	return r
}

func (r ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest) Execute() (*InlineResponse200373, *http.Response, error) {
	return r.ApiService.UpdateOrganizationWirelessZigbeeDeviceExecute(r)
}

/*
UpdateOrganizationWirelessZigbeeDevice Endpoint to update zigbee gateways

Endpoint to update zigbee gateways

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param id ID
 @return ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest
*/
func (a *ZigbeeApiService) UpdateOrganizationWirelessZigbeeDevice(ctx context.Context, organizationId string, id string) ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest {
	return ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		id: id,
	}
}

// Execute executes the request
//  @return InlineResponse200373
func (a *ZigbeeApiService) UpdateOrganizationWirelessZigbeeDeviceExecute(r ZigbeeApiUpdateOrganizationWirelessZigbeeDeviceRequest) (*InlineResponse200373, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200373
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.UpdateOrganizationWirelessZigbeeDevice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/devices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateOrganizationWirelessZigbeeDevice == nil {
		return localVarReturnValue, nil, reportError("updateOrganizationWirelessZigbeeDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationWirelessZigbeeDevice
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest struct {
	ctx context.Context
	ApiService *ZigbeeApiService
	organizationId string
	doorLockId string
	updateOrganizationWirelessZigbeeDoorLock *InlineObject310
}

func (r ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest) UpdateOrganizationWirelessZigbeeDoorLock(updateOrganizationWirelessZigbeeDoorLock InlineObject310) ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest {
	r.updateOrganizationWirelessZigbeeDoorLock = &updateOrganizationWirelessZigbeeDoorLock
	return r
}

func (r ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest) Execute() (*InlineResponse20048DoorLocks, *http.Response, error) {
	return r.ApiService.UpdateOrganizationWirelessZigbeeDoorLockExecute(r)
}

/*
UpdateOrganizationWirelessZigbeeDoorLock Endpoint to batch update door locks params

Endpoint to batch update door locks params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param doorLockId Door lock ID
 @return ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest
*/
func (a *ZigbeeApiService) UpdateOrganizationWirelessZigbeeDoorLock(ctx context.Context, organizationId string, doorLockId string) ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest {
	return ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		doorLockId: doorLockId,
	}
}

// Execute executes the request
//  @return InlineResponse20048DoorLocks
func (a *ZigbeeApiService) UpdateOrganizationWirelessZigbeeDoorLockExecute(r ZigbeeApiUpdateOrganizationWirelessZigbeeDoorLockRequest) (*InlineResponse20048DoorLocks, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20048DoorLocks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZigbeeApiService.UpdateOrganizationWirelessZigbeeDoorLock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/doorLocks/{doorLockId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"doorLockId"+"}", url.PathEscape(parameterToString(r.doorLockId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationWirelessZigbeeDoorLock
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
