/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.57.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200198 struct for InlineResponse200198
type InlineResponse200198 struct {
	// If true, Bonjour forwarding is enabled on the SSID.
	Enabled *bool `json:"enabled,omitempty"`
	Exception *InlineResponse200198Exception `json:"exception,omitempty"`
	// Bonjour forwarding rules
	Rules []InlineResponse200198Rules `json:"rules,omitempty"`
}

// NewInlineResponse200198 instantiates a new InlineResponse200198 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200198() *InlineResponse200198 {
	this := InlineResponse200198{}
	return &this
}

// NewInlineResponse200198WithDefaults instantiates a new InlineResponse200198 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200198WithDefaults() *InlineResponse200198 {
	this := InlineResponse200198{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InlineResponse200198) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200198) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InlineResponse200198) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InlineResponse200198) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetException returns the Exception field value if set, zero value otherwise.
func (o *InlineResponse200198) GetException() InlineResponse200198Exception {
	if o == nil || isNil(o.Exception) {
		var ret InlineResponse200198Exception
		return ret
	}
	return *o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200198) GetExceptionOk() (*InlineResponse200198Exception, bool) {
	if o == nil || isNil(o.Exception) {
    return nil, false
	}
	return o.Exception, true
}

// HasException returns a boolean if a field has been set.
func (o *InlineResponse200198) HasException() bool {
	if o != nil && !isNil(o.Exception) {
		return true
	}

	return false
}

// SetException gets a reference to the given InlineResponse200198Exception and assigns it to the Exception field.
func (o *InlineResponse200198) SetException(v InlineResponse200198Exception) {
	o.Exception = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *InlineResponse200198) GetRules() []InlineResponse200198Rules {
	if o == nil || isNil(o.Rules) {
		var ret []InlineResponse200198Rules
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200198) GetRulesOk() ([]InlineResponse200198Rules, bool) {
	if o == nil || isNil(o.Rules) {
    return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *InlineResponse200198) HasRules() bool {
	if o != nil && !isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []InlineResponse200198Rules and assigns it to the Rules field.
func (o *InlineResponse200198) SetRules(v []InlineResponse200198Rules) {
	o.Rules = v
}

func (o InlineResponse200198) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Exception) {
		toSerialize["exception"] = o.Exception
	}
	if !isNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200198 struct {
	value *InlineResponse200198
	isSet bool
}

func (v NullableInlineResponse200198) Get() *InlineResponse200198 {
	return v.value
}

func (v *NullableInlineResponse200198) Set(val *InlineResponse200198) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200198) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200198) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200198(val *InlineResponse200198) *NullableInlineResponse200198 {
	return &NullableInlineResponse200198{value: val, isSet: true}
}

func (v NullableInlineResponse200198) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200198) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


