/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 April, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200276CountsByStatus The count data, indexed by active or inactive status
type InlineResponse200276CountsByStatus struct {
	Active *InlineResponse200276CountsByStatusActive `json:"active,omitempty"`
	Inactive *InlineResponse200276CountsByStatusInactive `json:"inactive,omitempty"`
}

// NewInlineResponse200276CountsByStatus instantiates a new InlineResponse200276CountsByStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200276CountsByStatus() *InlineResponse200276CountsByStatus {
	this := InlineResponse200276CountsByStatus{}
	return &this
}

// NewInlineResponse200276CountsByStatusWithDefaults instantiates a new InlineResponse200276CountsByStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200276CountsByStatusWithDefaults() *InlineResponse200276CountsByStatus {
	this := InlineResponse200276CountsByStatus{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *InlineResponse200276CountsByStatus) GetActive() InlineResponse200276CountsByStatusActive {
	if o == nil || isNil(o.Active) {
		var ret InlineResponse200276CountsByStatusActive
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200276CountsByStatus) GetActiveOk() (*InlineResponse200276CountsByStatusActive, bool) {
	if o == nil || isNil(o.Active) {
    return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *InlineResponse200276CountsByStatus) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given InlineResponse200276CountsByStatusActive and assigns it to the Active field.
func (o *InlineResponse200276CountsByStatus) SetActive(v InlineResponse200276CountsByStatusActive) {
	o.Active = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *InlineResponse200276CountsByStatus) GetInactive() InlineResponse200276CountsByStatusInactive {
	if o == nil || isNil(o.Inactive) {
		var ret InlineResponse200276CountsByStatusInactive
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200276CountsByStatus) GetInactiveOk() (*InlineResponse200276CountsByStatusInactive, bool) {
	if o == nil || isNil(o.Inactive) {
    return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *InlineResponse200276CountsByStatus) HasInactive() bool {
	if o != nil && !isNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given InlineResponse200276CountsByStatusInactive and assigns it to the Inactive field.
func (o *InlineResponse200276CountsByStatus) SetInactive(v InlineResponse200276CountsByStatusInactive) {
	o.Inactive = &v
}

func (o InlineResponse200276CountsByStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200276CountsByStatus struct {
	value *InlineResponse200276CountsByStatus
	isSet bool
}

func (v NullableInlineResponse200276CountsByStatus) Get() *InlineResponse200276CountsByStatus {
	return v.value
}

func (v *NullableInlineResponse200276CountsByStatus) Set(val *InlineResponse200276CountsByStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200276CountsByStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200276CountsByStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200276CountsByStatus(val *InlineResponse200276CountsByStatus) *NullableInlineResponse200276CountsByStatus {
	return &NullableInlineResponse200276CountsByStatus{value: val, isSet: true}
}

func (v NullableInlineResponse200276CountsByStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200276CountsByStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


