/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200246 struct for InlineResponse200246
type InlineResponse200246 struct {
	// Alert type
	Type string `json:"type"`
	// Alert type title
	Title string `json:"title"`
	// Alert category type
	CategoryType string `json:"categoryType"`
	// List of possible severities for the alert type
	Severities []OrganizationsOrganizationIdAssuranceAlertsTaxonomyTypesSeverities `json:"severities"`
	// List of possible device types for the alert type
	DeviceTypes []string `json:"deviceTypes"`
}

// NewInlineResponse200246 instantiates a new InlineResponse200246 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200246(type_ string, title string, categoryType string, severities []OrganizationsOrganizationIdAssuranceAlertsTaxonomyTypesSeverities, deviceTypes []string) *InlineResponse200246 {
	this := InlineResponse200246{}
	this.Type = type_
	this.Title = title
	this.CategoryType = categoryType
	this.Severities = severities
	this.DeviceTypes = deviceTypes
	return &this
}

// NewInlineResponse200246WithDefaults instantiates a new InlineResponse200246 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200246WithDefaults() *InlineResponse200246 {
	this := InlineResponse200246{}
	return &this
}

// GetType returns the Type field value
func (o *InlineResponse200246) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200246) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InlineResponse200246) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *InlineResponse200246) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200246) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InlineResponse200246) SetTitle(v string) {
	o.Title = v
}

// GetCategoryType returns the CategoryType field value
func (o *InlineResponse200246) GetCategoryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryType
}

// GetCategoryTypeOk returns a tuple with the CategoryType field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200246) GetCategoryTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CategoryType, true
}

// SetCategoryType sets field value
func (o *InlineResponse200246) SetCategoryType(v string) {
	o.CategoryType = v
}

// GetSeverities returns the Severities field value
func (o *InlineResponse200246) GetSeverities() []OrganizationsOrganizationIdAssuranceAlertsTaxonomyTypesSeverities {
	if o == nil {
		var ret []OrganizationsOrganizationIdAssuranceAlertsTaxonomyTypesSeverities
		return ret
	}

	return o.Severities
}

// GetSeveritiesOk returns a tuple with the Severities field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200246) GetSeveritiesOk() ([]OrganizationsOrganizationIdAssuranceAlertsTaxonomyTypesSeverities, bool) {
	if o == nil {
    return nil, false
	}
	return o.Severities, true
}

// SetSeverities sets field value
func (o *InlineResponse200246) SetSeverities(v []OrganizationsOrganizationIdAssuranceAlertsTaxonomyTypesSeverities) {
	o.Severities = v
}

// GetDeviceTypes returns the DeviceTypes field value
func (o *InlineResponse200246) GetDeviceTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DeviceTypes
}

// GetDeviceTypesOk returns a tuple with the DeviceTypes field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200246) GetDeviceTypesOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.DeviceTypes, true
}

// SetDeviceTypes sets field value
func (o *InlineResponse200246) SetDeviceTypes(v []string) {
	o.DeviceTypes = v
}

func (o InlineResponse200246) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["categoryType"] = o.CategoryType
	}
	if true {
		toSerialize["severities"] = o.Severities
	}
	if true {
		toSerialize["deviceTypes"] = o.DeviceTypes
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200246 struct {
	value *InlineResponse200246
	isSet bool
}

func (v NullableInlineResponse200246) Get() *InlineResponse200246 {
	return v.value
}

func (v *NullableInlineResponse200246) Set(val *InlineResponse200246) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200246) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200246) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200246(val *InlineResponse200246) *NullableInlineResponse200246 {
	return &NullableInlineResponse200246{value: val, isSet: true}
}

func (v NullableInlineResponse200246) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200246) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


