/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20021 struct for InlineResponse20021
type InlineResponse20021 struct {
	// The ID of the client
	Id *string `json:"id,omitempty"`
	// The MAC address of the client
	Mac *string `json:"mac,omitempty"`
	// Short description of the client
	Description *string `json:"description,omitempty"`
	// The client's MDNS name
	MdnsName *string `json:"mdnsName,omitempty"`
	// The client's DHCP hostname
	DhcpHostname *string `json:"dhcpHostname,omitempty"`
	// The client user's name
	User *string `json:"user,omitempty"`
	// The IP address of the client
	Ip *string `json:"ip,omitempty"`
	// The client-assigned name of the VLAN the client is connected to
	Vlan *string `json:"vlan,omitempty"`
	// The owner-assigned name of the VLAN the client is connected to
	NamedVlan *string `json:"namedVlan,omitempty"`
	// The name of the switchport with clients on it, if the device is a switch
	Switchport *string `json:"switchport,omitempty"`
	// A description of the adaptive policy group
	AdaptivePolicyGroup *string `json:"adaptivePolicyGroup,omitempty"`
	Usage *DevicesSerialClientsUsage `json:"usage,omitempty"`
}

// NewInlineResponse20021 instantiates a new InlineResponse20021 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20021() *InlineResponse20021 {
	this := InlineResponse20021{}
	return &this
}

// NewInlineResponse20021WithDefaults instantiates a new InlineResponse20021 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20021WithDefaults() *InlineResponse20021 {
	this := InlineResponse20021{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse20021) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse20021) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineResponse20021) SetId(v string) {
	o.Id = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *InlineResponse20021) GetMac() string {
	if o == nil || isNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetMacOk() (*string, bool) {
	if o == nil || isNil(o.Mac) {
    return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *InlineResponse20021) HasMac() bool {
	if o != nil && !isNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *InlineResponse20021) SetMac(v string) {
	o.Mac = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InlineResponse20021) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InlineResponse20021) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InlineResponse20021) SetDescription(v string) {
	o.Description = &v
}

// GetMdnsName returns the MdnsName field value if set, zero value otherwise.
func (o *InlineResponse20021) GetMdnsName() string {
	if o == nil || isNil(o.MdnsName) {
		var ret string
		return ret
	}
	return *o.MdnsName
}

// GetMdnsNameOk returns a tuple with the MdnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetMdnsNameOk() (*string, bool) {
	if o == nil || isNil(o.MdnsName) {
    return nil, false
	}
	return o.MdnsName, true
}

// HasMdnsName returns a boolean if a field has been set.
func (o *InlineResponse20021) HasMdnsName() bool {
	if o != nil && !isNil(o.MdnsName) {
		return true
	}

	return false
}

// SetMdnsName gets a reference to the given string and assigns it to the MdnsName field.
func (o *InlineResponse20021) SetMdnsName(v string) {
	o.MdnsName = &v
}

// GetDhcpHostname returns the DhcpHostname field value if set, zero value otherwise.
func (o *InlineResponse20021) GetDhcpHostname() string {
	if o == nil || isNil(o.DhcpHostname) {
		var ret string
		return ret
	}
	return *o.DhcpHostname
}

// GetDhcpHostnameOk returns a tuple with the DhcpHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetDhcpHostnameOk() (*string, bool) {
	if o == nil || isNil(o.DhcpHostname) {
    return nil, false
	}
	return o.DhcpHostname, true
}

// HasDhcpHostname returns a boolean if a field has been set.
func (o *InlineResponse20021) HasDhcpHostname() bool {
	if o != nil && !isNil(o.DhcpHostname) {
		return true
	}

	return false
}

// SetDhcpHostname gets a reference to the given string and assigns it to the DhcpHostname field.
func (o *InlineResponse20021) SetDhcpHostname(v string) {
	o.DhcpHostname = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *InlineResponse20021) GetUser() string {
	if o == nil || isNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetUserOk() (*string, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *InlineResponse20021) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *InlineResponse20021) SetUser(v string) {
	o.User = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *InlineResponse20021) GetIp() string {
	if o == nil || isNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetIpOk() (*string, bool) {
	if o == nil || isNil(o.Ip) {
    return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *InlineResponse20021) HasIp() bool {
	if o != nil && !isNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *InlineResponse20021) SetIp(v string) {
	o.Ip = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *InlineResponse20021) GetVlan() string {
	if o == nil || isNil(o.Vlan) {
		var ret string
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetVlanOk() (*string, bool) {
	if o == nil || isNil(o.Vlan) {
    return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *InlineResponse20021) HasVlan() bool {
	if o != nil && !isNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given string and assigns it to the Vlan field.
func (o *InlineResponse20021) SetVlan(v string) {
	o.Vlan = &v
}

// GetNamedVlan returns the NamedVlan field value if set, zero value otherwise.
func (o *InlineResponse20021) GetNamedVlan() string {
	if o == nil || isNil(o.NamedVlan) {
		var ret string
		return ret
	}
	return *o.NamedVlan
}

// GetNamedVlanOk returns a tuple with the NamedVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetNamedVlanOk() (*string, bool) {
	if o == nil || isNil(o.NamedVlan) {
    return nil, false
	}
	return o.NamedVlan, true
}

// HasNamedVlan returns a boolean if a field has been set.
func (o *InlineResponse20021) HasNamedVlan() bool {
	if o != nil && !isNil(o.NamedVlan) {
		return true
	}

	return false
}

// SetNamedVlan gets a reference to the given string and assigns it to the NamedVlan field.
func (o *InlineResponse20021) SetNamedVlan(v string) {
	o.NamedVlan = &v
}

// GetSwitchport returns the Switchport field value if set, zero value otherwise.
func (o *InlineResponse20021) GetSwitchport() string {
	if o == nil || isNil(o.Switchport) {
		var ret string
		return ret
	}
	return *o.Switchport
}

// GetSwitchportOk returns a tuple with the Switchport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetSwitchportOk() (*string, bool) {
	if o == nil || isNil(o.Switchport) {
    return nil, false
	}
	return o.Switchport, true
}

// HasSwitchport returns a boolean if a field has been set.
func (o *InlineResponse20021) HasSwitchport() bool {
	if o != nil && !isNil(o.Switchport) {
		return true
	}

	return false
}

// SetSwitchport gets a reference to the given string and assigns it to the Switchport field.
func (o *InlineResponse20021) SetSwitchport(v string) {
	o.Switchport = &v
}

// GetAdaptivePolicyGroup returns the AdaptivePolicyGroup field value if set, zero value otherwise.
func (o *InlineResponse20021) GetAdaptivePolicyGroup() string {
	if o == nil || isNil(o.AdaptivePolicyGroup) {
		var ret string
		return ret
	}
	return *o.AdaptivePolicyGroup
}

// GetAdaptivePolicyGroupOk returns a tuple with the AdaptivePolicyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetAdaptivePolicyGroupOk() (*string, bool) {
	if o == nil || isNil(o.AdaptivePolicyGroup) {
    return nil, false
	}
	return o.AdaptivePolicyGroup, true
}

// HasAdaptivePolicyGroup returns a boolean if a field has been set.
func (o *InlineResponse20021) HasAdaptivePolicyGroup() bool {
	if o != nil && !isNil(o.AdaptivePolicyGroup) {
		return true
	}

	return false
}

// SetAdaptivePolicyGroup gets a reference to the given string and assigns it to the AdaptivePolicyGroup field.
func (o *InlineResponse20021) SetAdaptivePolicyGroup(v string) {
	o.AdaptivePolicyGroup = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *InlineResponse20021) GetUsage() DevicesSerialClientsUsage {
	if o == nil || isNil(o.Usage) {
		var ret DevicesSerialClientsUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021) GetUsageOk() (*DevicesSerialClientsUsage, bool) {
	if o == nil || isNil(o.Usage) {
    return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *InlineResponse20021) HasUsage() bool {
	if o != nil && !isNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given DevicesSerialClientsUsage and assigns it to the Usage field.
func (o *InlineResponse20021) SetUsage(v DevicesSerialClientsUsage) {
	o.Usage = &v
}

func (o InlineResponse20021) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.MdnsName) {
		toSerialize["mdnsName"] = o.MdnsName
	}
	if !isNil(o.DhcpHostname) {
		toSerialize["dhcpHostname"] = o.DhcpHostname
	}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !isNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !isNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !isNil(o.NamedVlan) {
		toSerialize["namedVlan"] = o.NamedVlan
	}
	if !isNil(o.Switchport) {
		toSerialize["switchport"] = o.Switchport
	}
	if !isNil(o.AdaptivePolicyGroup) {
		toSerialize["adaptivePolicyGroup"] = o.AdaptivePolicyGroup
	}
	if !isNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20021 struct {
	value *InlineResponse20021
	isSet bool
}

func (v NullableInlineResponse20021) Get() *InlineResponse20021 {
	return v.value
}

func (v *NullableInlineResponse20021) Set(val *InlineResponse20021) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20021) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20021) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20021(val *InlineResponse20021) *NullableInlineResponse20021 {
	return &NullableInlineResponse20021{value: val, isSet: true}
}

func (v NullableInlineResponse20021) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20021) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


