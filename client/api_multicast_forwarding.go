/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 October, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.63.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MulticastForwardingApiService MulticastForwardingApi service
type MulticastForwardingApiService service

type MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest struct {
	ctx context.Context
	ApiService *MulticastForwardingApiService
	organizationId string
	perPage *int32
	startingAfter *string
	endingBefore *string
	networkIds *[]string
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
func (r MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest) PerPage(perPage int32) MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest) StartingAfter(startingAfter string) MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest) EndingBefore(endingBefore string) MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest {
	r.endingBefore = &endingBefore
	return r
}

// Optional parameter to filter the results by network IDs
func (r MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest) NetworkIds(networkIds []string) MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest {
	r.networkIds = &networkIds
	return r
}

func (r MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest) Execute() (*InlineResponse200232, *http.Response, error) {
	return r.ApiService.GetOrganizationApplianceFirewallMulticastForwardingByNetworkExecute(r)
}

/*
GetOrganizationApplianceFirewallMulticastForwardingByNetwork List Static Multicasting forwarding settings for MX networks

List Static Multicasting forwarding settings for MX networks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest
*/
func (a *MulticastForwardingApiService) GetOrganizationApplianceFirewallMulticastForwardingByNetwork(ctx context.Context, organizationId string) MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest {
	return MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200232
func (a *MulticastForwardingApiService) GetOrganizationApplianceFirewallMulticastForwardingByNetworkExecute(r MulticastForwardingApiGetOrganizationApplianceFirewallMulticastForwardingByNetworkRequest) (*InlineResponse200232, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200232
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MulticastForwardingApiService.GetOrganizationApplianceFirewallMulticastForwardingByNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/firewall/multicastForwarding/byNetwork"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest struct {
	ctx context.Context
	ApiService *MulticastForwardingApiService
	networkId string
	updateNetworkApplianceFirewallMulticastForwarding *InlineObject50
}

func (r MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest) UpdateNetworkApplianceFirewallMulticastForwarding(updateNetworkApplianceFirewallMulticastForwarding InlineObject50) MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest {
	r.updateNetworkApplianceFirewallMulticastForwarding = &updateNetworkApplianceFirewallMulticastForwarding
	return r
}

func (r MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest) Execute() (*InlineResponse20059, *http.Response, error) {
	return r.ApiService.UpdateNetworkApplianceFirewallMulticastForwardingExecute(r)
}

/*
UpdateNetworkApplianceFirewallMulticastForwarding Update static multicast forward rules for a network

Update static multicast forward rules for a network

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId Network ID
 @return MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest
*/
func (a *MulticastForwardingApiService) UpdateNetworkApplianceFirewallMulticastForwarding(ctx context.Context, networkId string) MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest {
	return MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
	}
}

// Execute executes the request
//  @return InlineResponse20059
func (a *MulticastForwardingApiService) UpdateNetworkApplianceFirewallMulticastForwardingExecute(r MulticastForwardingApiUpdateNetworkApplianceFirewallMulticastForwardingRequest) (*InlineResponse20059, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20059
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MulticastForwardingApiService.UpdateNetworkApplianceFirewallMulticastForwarding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networks/{networkId}/appliance/firewall/multicastForwarding"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterToString(r.networkId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNetworkApplianceFirewallMulticastForwarding == nil {
		return localVarReturnValue, nil, reportError("updateNetworkApplianceFirewallMulticastForwarding is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNetworkApplianceFirewallMulticastForwarding
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
