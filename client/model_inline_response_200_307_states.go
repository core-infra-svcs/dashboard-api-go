/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 September, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.62.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200307States Aggregated data for licenses by state (Per-device licensing only)
type InlineResponse200307States struct {
	Active *InlineResponse200307StatesActive `json:"active,omitempty"`
	Expired *InlineResponse200307StatesExpired `json:"expired,omitempty"`
	Expiring *InlineResponse200307StatesExpiring `json:"expiring,omitempty"`
	RecentlyQueued *InlineResponse200307StatesRecentlyQueued `json:"recentlyQueued,omitempty"`
	Unused *InlineResponse200307StatesUnused `json:"unused,omitempty"`
	UnusedActive *InlineResponse200307StatesUnusedActive `json:"unusedActive,omitempty"`
}

// NewInlineResponse200307States instantiates a new InlineResponse200307States object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200307States() *InlineResponse200307States {
	this := InlineResponse200307States{}
	return &this
}

// NewInlineResponse200307StatesWithDefaults instantiates a new InlineResponse200307States object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200307StatesWithDefaults() *InlineResponse200307States {
	this := InlineResponse200307States{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *InlineResponse200307States) GetActive() InlineResponse200307StatesActive {
	if o == nil || isNil(o.Active) {
		var ret InlineResponse200307StatesActive
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200307States) GetActiveOk() (*InlineResponse200307StatesActive, bool) {
	if o == nil || isNil(o.Active) {
    return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *InlineResponse200307States) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given InlineResponse200307StatesActive and assigns it to the Active field.
func (o *InlineResponse200307States) SetActive(v InlineResponse200307StatesActive) {
	o.Active = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *InlineResponse200307States) GetExpired() InlineResponse200307StatesExpired {
	if o == nil || isNil(o.Expired) {
		var ret InlineResponse200307StatesExpired
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200307States) GetExpiredOk() (*InlineResponse200307StatesExpired, bool) {
	if o == nil || isNil(o.Expired) {
    return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *InlineResponse200307States) HasExpired() bool {
	if o != nil && !isNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given InlineResponse200307StatesExpired and assigns it to the Expired field.
func (o *InlineResponse200307States) SetExpired(v InlineResponse200307StatesExpired) {
	o.Expired = &v
}

// GetExpiring returns the Expiring field value if set, zero value otherwise.
func (o *InlineResponse200307States) GetExpiring() InlineResponse200307StatesExpiring {
	if o == nil || isNil(o.Expiring) {
		var ret InlineResponse200307StatesExpiring
		return ret
	}
	return *o.Expiring
}

// GetExpiringOk returns a tuple with the Expiring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200307States) GetExpiringOk() (*InlineResponse200307StatesExpiring, bool) {
	if o == nil || isNil(o.Expiring) {
    return nil, false
	}
	return o.Expiring, true
}

// HasExpiring returns a boolean if a field has been set.
func (o *InlineResponse200307States) HasExpiring() bool {
	if o != nil && !isNil(o.Expiring) {
		return true
	}

	return false
}

// SetExpiring gets a reference to the given InlineResponse200307StatesExpiring and assigns it to the Expiring field.
func (o *InlineResponse200307States) SetExpiring(v InlineResponse200307StatesExpiring) {
	o.Expiring = &v
}

// GetRecentlyQueued returns the RecentlyQueued field value if set, zero value otherwise.
func (o *InlineResponse200307States) GetRecentlyQueued() InlineResponse200307StatesRecentlyQueued {
	if o == nil || isNil(o.RecentlyQueued) {
		var ret InlineResponse200307StatesRecentlyQueued
		return ret
	}
	return *o.RecentlyQueued
}

// GetRecentlyQueuedOk returns a tuple with the RecentlyQueued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200307States) GetRecentlyQueuedOk() (*InlineResponse200307StatesRecentlyQueued, bool) {
	if o == nil || isNil(o.RecentlyQueued) {
    return nil, false
	}
	return o.RecentlyQueued, true
}

// HasRecentlyQueued returns a boolean if a field has been set.
func (o *InlineResponse200307States) HasRecentlyQueued() bool {
	if o != nil && !isNil(o.RecentlyQueued) {
		return true
	}

	return false
}

// SetRecentlyQueued gets a reference to the given InlineResponse200307StatesRecentlyQueued and assigns it to the RecentlyQueued field.
func (o *InlineResponse200307States) SetRecentlyQueued(v InlineResponse200307StatesRecentlyQueued) {
	o.RecentlyQueued = &v
}

// GetUnused returns the Unused field value if set, zero value otherwise.
func (o *InlineResponse200307States) GetUnused() InlineResponse200307StatesUnused {
	if o == nil || isNil(o.Unused) {
		var ret InlineResponse200307StatesUnused
		return ret
	}
	return *o.Unused
}

// GetUnusedOk returns a tuple with the Unused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200307States) GetUnusedOk() (*InlineResponse200307StatesUnused, bool) {
	if o == nil || isNil(o.Unused) {
    return nil, false
	}
	return o.Unused, true
}

// HasUnused returns a boolean if a field has been set.
func (o *InlineResponse200307States) HasUnused() bool {
	if o != nil && !isNil(o.Unused) {
		return true
	}

	return false
}

// SetUnused gets a reference to the given InlineResponse200307StatesUnused and assigns it to the Unused field.
func (o *InlineResponse200307States) SetUnused(v InlineResponse200307StatesUnused) {
	o.Unused = &v
}

// GetUnusedActive returns the UnusedActive field value if set, zero value otherwise.
func (o *InlineResponse200307States) GetUnusedActive() InlineResponse200307StatesUnusedActive {
	if o == nil || isNil(o.UnusedActive) {
		var ret InlineResponse200307StatesUnusedActive
		return ret
	}
	return *o.UnusedActive
}

// GetUnusedActiveOk returns a tuple with the UnusedActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200307States) GetUnusedActiveOk() (*InlineResponse200307StatesUnusedActive, bool) {
	if o == nil || isNil(o.UnusedActive) {
    return nil, false
	}
	return o.UnusedActive, true
}

// HasUnusedActive returns a boolean if a field has been set.
func (o *InlineResponse200307States) HasUnusedActive() bool {
	if o != nil && !isNil(o.UnusedActive) {
		return true
	}

	return false
}

// SetUnusedActive gets a reference to the given InlineResponse200307StatesUnusedActive and assigns it to the UnusedActive field.
func (o *InlineResponse200307States) SetUnusedActive(v InlineResponse200307StatesUnusedActive) {
	o.UnusedActive = &v
}

func (o InlineResponse200307States) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	if !isNil(o.Expiring) {
		toSerialize["expiring"] = o.Expiring
	}
	if !isNil(o.RecentlyQueued) {
		toSerialize["recentlyQueued"] = o.RecentlyQueued
	}
	if !isNil(o.Unused) {
		toSerialize["unused"] = o.Unused
	}
	if !isNil(o.UnusedActive) {
		toSerialize["unusedActive"] = o.UnusedActive
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200307States struct {
	value *InlineResponse200307States
	isSet bool
}

func (v NullableInlineResponse200307States) Get() *InlineResponse200307States {
	return v.value
}

func (v *NullableInlineResponse200307States) Set(val *InlineResponse200307States) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200307States) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200307States) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200307States(val *InlineResponse200307States) *NullableInlineResponse200307States {
	return &NullableInlineResponse200307States{value: val, isSet: true}
}

func (v NullableInlineResponse200307States) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200307States) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


