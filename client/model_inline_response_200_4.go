/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 June, 2022 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse2004 struct for InlineResponse2004
type InlineResponse2004 struct {
	// Boolean indicating whether users are forced to change their password every X number of days.
	EnforcePasswordExpiration *bool `json:"enforcePasswordExpiration,omitempty"`
	// Number of days after which users will be forced to change their password.
	PasswordExpirationDays *int32 `json:"passwordExpirationDays,omitempty"`
	// Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
	EnforceDifferentPasswords *bool `json:"enforceDifferentPasswords,omitempty"`
	// Number of recent passwords that new password must be distinct from.
	NumDifferentPasswords *int32 `json:"numDifferentPasswords,omitempty"`
	// Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
	EnforceStrongPasswords *bool `json:"enforceStrongPasswords,omitempty"`
	// Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
	EnforceAccountLockout *bool `json:"enforceAccountLockout,omitempty"`
	// Number of consecutive failed login attempts after which users' accounts will be locked.
	AccountLockoutAttempts *int32 `json:"accountLockoutAttempts,omitempty"`
	// Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
	EnforceIdleTimeout *bool `json:"enforceIdleTimeout,omitempty"`
	// Number of minutes users can remain idle before being logged out of their accounts.
	IdleTimeoutMinutes *int32 `json:"idleTimeoutMinutes,omitempty"`
	// Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the Google Authenticator application.
	EnforceTwoFactorAuth *bool `json:"enforceTwoFactorAuth,omitempty"`
	// Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
	EnforceLoginIpRanges *bool `json:"enforceLoginIpRanges,omitempty"`
	// List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
	LoginIpRanges *[]string `json:"loginIpRanges,omitempty"`
	ApiAuthentication *InlineResponse2004ApiAuthentication `json:"apiAuthentication,omitempty"`
}

// NewInlineResponse2004 instantiates a new InlineResponse2004 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// NewInlineResponse2004WithDefaults instantiates a new InlineResponse2004 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004WithDefaults() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// GetEnforcePasswordExpiration returns the EnforcePasswordExpiration field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEnforcePasswordExpiration() bool {
	if o == nil || o.EnforcePasswordExpiration == nil {
		var ret bool
		return ret
	}
	return *o.EnforcePasswordExpiration
}

// GetEnforcePasswordExpirationOk returns a tuple with the EnforcePasswordExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEnforcePasswordExpirationOk() (*bool, bool) {
	if o == nil || o.EnforcePasswordExpiration == nil {
		return nil, false
	}
	return o.EnforcePasswordExpiration, true
}

// HasEnforcePasswordExpiration returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEnforcePasswordExpiration() bool {
	if o != nil && o.EnforcePasswordExpiration != nil {
		return true
	}

	return false
}

// SetEnforcePasswordExpiration gets a reference to the given bool and assigns it to the EnforcePasswordExpiration field.
func (o *InlineResponse2004) SetEnforcePasswordExpiration(v bool) {
	o.EnforcePasswordExpiration = &v
}

// GetPasswordExpirationDays returns the PasswordExpirationDays field value if set, zero value otherwise.
func (o *InlineResponse2004) GetPasswordExpirationDays() int32 {
	if o == nil || o.PasswordExpirationDays == nil {
		var ret int32
		return ret
	}
	return *o.PasswordExpirationDays
}

// GetPasswordExpirationDaysOk returns a tuple with the PasswordExpirationDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetPasswordExpirationDaysOk() (*int32, bool) {
	if o == nil || o.PasswordExpirationDays == nil {
		return nil, false
	}
	return o.PasswordExpirationDays, true
}

// HasPasswordExpirationDays returns a boolean if a field has been set.
func (o *InlineResponse2004) HasPasswordExpirationDays() bool {
	if o != nil && o.PasswordExpirationDays != nil {
		return true
	}

	return false
}

// SetPasswordExpirationDays gets a reference to the given int32 and assigns it to the PasswordExpirationDays field.
func (o *InlineResponse2004) SetPasswordExpirationDays(v int32) {
	o.PasswordExpirationDays = &v
}

// GetEnforceDifferentPasswords returns the EnforceDifferentPasswords field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEnforceDifferentPasswords() bool {
	if o == nil || o.EnforceDifferentPasswords == nil {
		var ret bool
		return ret
	}
	return *o.EnforceDifferentPasswords
}

// GetEnforceDifferentPasswordsOk returns a tuple with the EnforceDifferentPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEnforceDifferentPasswordsOk() (*bool, bool) {
	if o == nil || o.EnforceDifferentPasswords == nil {
		return nil, false
	}
	return o.EnforceDifferentPasswords, true
}

// HasEnforceDifferentPasswords returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEnforceDifferentPasswords() bool {
	if o != nil && o.EnforceDifferentPasswords != nil {
		return true
	}

	return false
}

// SetEnforceDifferentPasswords gets a reference to the given bool and assigns it to the EnforceDifferentPasswords field.
func (o *InlineResponse2004) SetEnforceDifferentPasswords(v bool) {
	o.EnforceDifferentPasswords = &v
}

// GetNumDifferentPasswords returns the NumDifferentPasswords field value if set, zero value otherwise.
func (o *InlineResponse2004) GetNumDifferentPasswords() int32 {
	if o == nil || o.NumDifferentPasswords == nil {
		var ret int32
		return ret
	}
	return *o.NumDifferentPasswords
}

// GetNumDifferentPasswordsOk returns a tuple with the NumDifferentPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetNumDifferentPasswordsOk() (*int32, bool) {
	if o == nil || o.NumDifferentPasswords == nil {
		return nil, false
	}
	return o.NumDifferentPasswords, true
}

// HasNumDifferentPasswords returns a boolean if a field has been set.
func (o *InlineResponse2004) HasNumDifferentPasswords() bool {
	if o != nil && o.NumDifferentPasswords != nil {
		return true
	}

	return false
}

// SetNumDifferentPasswords gets a reference to the given int32 and assigns it to the NumDifferentPasswords field.
func (o *InlineResponse2004) SetNumDifferentPasswords(v int32) {
	o.NumDifferentPasswords = &v
}

// GetEnforceStrongPasswords returns the EnforceStrongPasswords field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEnforceStrongPasswords() bool {
	if o == nil || o.EnforceStrongPasswords == nil {
		var ret bool
		return ret
	}
	return *o.EnforceStrongPasswords
}

// GetEnforceStrongPasswordsOk returns a tuple with the EnforceStrongPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEnforceStrongPasswordsOk() (*bool, bool) {
	if o == nil || o.EnforceStrongPasswords == nil {
		return nil, false
	}
	return o.EnforceStrongPasswords, true
}

// HasEnforceStrongPasswords returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEnforceStrongPasswords() bool {
	if o != nil && o.EnforceStrongPasswords != nil {
		return true
	}

	return false
}

// SetEnforceStrongPasswords gets a reference to the given bool and assigns it to the EnforceStrongPasswords field.
func (o *InlineResponse2004) SetEnforceStrongPasswords(v bool) {
	o.EnforceStrongPasswords = &v
}

// GetEnforceAccountLockout returns the EnforceAccountLockout field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEnforceAccountLockout() bool {
	if o == nil || o.EnforceAccountLockout == nil {
		var ret bool
		return ret
	}
	return *o.EnforceAccountLockout
}

// GetEnforceAccountLockoutOk returns a tuple with the EnforceAccountLockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEnforceAccountLockoutOk() (*bool, bool) {
	if o == nil || o.EnforceAccountLockout == nil {
		return nil, false
	}
	return o.EnforceAccountLockout, true
}

// HasEnforceAccountLockout returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEnforceAccountLockout() bool {
	if o != nil && o.EnforceAccountLockout != nil {
		return true
	}

	return false
}

// SetEnforceAccountLockout gets a reference to the given bool and assigns it to the EnforceAccountLockout field.
func (o *InlineResponse2004) SetEnforceAccountLockout(v bool) {
	o.EnforceAccountLockout = &v
}

// GetAccountLockoutAttempts returns the AccountLockoutAttempts field value if set, zero value otherwise.
func (o *InlineResponse2004) GetAccountLockoutAttempts() int32 {
	if o == nil || o.AccountLockoutAttempts == nil {
		var ret int32
		return ret
	}
	return *o.AccountLockoutAttempts
}

// GetAccountLockoutAttemptsOk returns a tuple with the AccountLockoutAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetAccountLockoutAttemptsOk() (*int32, bool) {
	if o == nil || o.AccountLockoutAttempts == nil {
		return nil, false
	}
	return o.AccountLockoutAttempts, true
}

// HasAccountLockoutAttempts returns a boolean if a field has been set.
func (o *InlineResponse2004) HasAccountLockoutAttempts() bool {
	if o != nil && o.AccountLockoutAttempts != nil {
		return true
	}

	return false
}

// SetAccountLockoutAttempts gets a reference to the given int32 and assigns it to the AccountLockoutAttempts field.
func (o *InlineResponse2004) SetAccountLockoutAttempts(v int32) {
	o.AccountLockoutAttempts = &v
}

// GetEnforceIdleTimeout returns the EnforceIdleTimeout field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEnforceIdleTimeout() bool {
	if o == nil || o.EnforceIdleTimeout == nil {
		var ret bool
		return ret
	}
	return *o.EnforceIdleTimeout
}

// GetEnforceIdleTimeoutOk returns a tuple with the EnforceIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEnforceIdleTimeoutOk() (*bool, bool) {
	if o == nil || o.EnforceIdleTimeout == nil {
		return nil, false
	}
	return o.EnforceIdleTimeout, true
}

// HasEnforceIdleTimeout returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEnforceIdleTimeout() bool {
	if o != nil && o.EnforceIdleTimeout != nil {
		return true
	}

	return false
}

// SetEnforceIdleTimeout gets a reference to the given bool and assigns it to the EnforceIdleTimeout field.
func (o *InlineResponse2004) SetEnforceIdleTimeout(v bool) {
	o.EnforceIdleTimeout = &v
}

// GetIdleTimeoutMinutes returns the IdleTimeoutMinutes field value if set, zero value otherwise.
func (o *InlineResponse2004) GetIdleTimeoutMinutes() int32 {
	if o == nil || o.IdleTimeoutMinutes == nil {
		var ret int32
		return ret
	}
	return *o.IdleTimeoutMinutes
}

// GetIdleTimeoutMinutesOk returns a tuple with the IdleTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetIdleTimeoutMinutesOk() (*int32, bool) {
	if o == nil || o.IdleTimeoutMinutes == nil {
		return nil, false
	}
	return o.IdleTimeoutMinutes, true
}

// HasIdleTimeoutMinutes returns a boolean if a field has been set.
func (o *InlineResponse2004) HasIdleTimeoutMinutes() bool {
	if o != nil && o.IdleTimeoutMinutes != nil {
		return true
	}

	return false
}

// SetIdleTimeoutMinutes gets a reference to the given int32 and assigns it to the IdleTimeoutMinutes field.
func (o *InlineResponse2004) SetIdleTimeoutMinutes(v int32) {
	o.IdleTimeoutMinutes = &v
}

// GetEnforceTwoFactorAuth returns the EnforceTwoFactorAuth field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEnforceTwoFactorAuth() bool {
	if o == nil || o.EnforceTwoFactorAuth == nil {
		var ret bool
		return ret
	}
	return *o.EnforceTwoFactorAuth
}

// GetEnforceTwoFactorAuthOk returns a tuple with the EnforceTwoFactorAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEnforceTwoFactorAuthOk() (*bool, bool) {
	if o == nil || o.EnforceTwoFactorAuth == nil {
		return nil, false
	}
	return o.EnforceTwoFactorAuth, true
}

// HasEnforceTwoFactorAuth returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEnforceTwoFactorAuth() bool {
	if o != nil && o.EnforceTwoFactorAuth != nil {
		return true
	}

	return false
}

// SetEnforceTwoFactorAuth gets a reference to the given bool and assigns it to the EnforceTwoFactorAuth field.
func (o *InlineResponse2004) SetEnforceTwoFactorAuth(v bool) {
	o.EnforceTwoFactorAuth = &v
}

// GetEnforceLoginIpRanges returns the EnforceLoginIpRanges field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEnforceLoginIpRanges() bool {
	if o == nil || o.EnforceLoginIpRanges == nil {
		var ret bool
		return ret
	}
	return *o.EnforceLoginIpRanges
}

// GetEnforceLoginIpRangesOk returns a tuple with the EnforceLoginIpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEnforceLoginIpRangesOk() (*bool, bool) {
	if o == nil || o.EnforceLoginIpRanges == nil {
		return nil, false
	}
	return o.EnforceLoginIpRanges, true
}

// HasEnforceLoginIpRanges returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEnforceLoginIpRanges() bool {
	if o != nil && o.EnforceLoginIpRanges != nil {
		return true
	}

	return false
}

// SetEnforceLoginIpRanges gets a reference to the given bool and assigns it to the EnforceLoginIpRanges field.
func (o *InlineResponse2004) SetEnforceLoginIpRanges(v bool) {
	o.EnforceLoginIpRanges = &v
}

// GetLoginIpRanges returns the LoginIpRanges field value if set, zero value otherwise.
func (o *InlineResponse2004) GetLoginIpRanges() []string {
	if o == nil || o.LoginIpRanges == nil {
		var ret []string
		return ret
	}
	return *o.LoginIpRanges
}

// GetLoginIpRangesOk returns a tuple with the LoginIpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetLoginIpRangesOk() (*[]string, bool) {
	if o == nil || o.LoginIpRanges == nil {
		return nil, false
	}
	return o.LoginIpRanges, true
}

// HasLoginIpRanges returns a boolean if a field has been set.
func (o *InlineResponse2004) HasLoginIpRanges() bool {
	if o != nil && o.LoginIpRanges != nil {
		return true
	}

	return false
}

// SetLoginIpRanges gets a reference to the given []string and assigns it to the LoginIpRanges field.
func (o *InlineResponse2004) SetLoginIpRanges(v []string) {
	o.LoginIpRanges = &v
}

// GetApiAuthentication returns the ApiAuthentication field value if set, zero value otherwise.
func (o *InlineResponse2004) GetApiAuthentication() InlineResponse2004ApiAuthentication {
	if o == nil || o.ApiAuthentication == nil {
		var ret InlineResponse2004ApiAuthentication
		return ret
	}
	return *o.ApiAuthentication
}

// GetApiAuthenticationOk returns a tuple with the ApiAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetApiAuthenticationOk() (*InlineResponse2004ApiAuthentication, bool) {
	if o == nil || o.ApiAuthentication == nil {
		return nil, false
	}
	return o.ApiAuthentication, true
}

// HasApiAuthentication returns a boolean if a field has been set.
func (o *InlineResponse2004) HasApiAuthentication() bool {
	if o != nil && o.ApiAuthentication != nil {
		return true
	}

	return false
}

// SetApiAuthentication gets a reference to the given InlineResponse2004ApiAuthentication and assigns it to the ApiAuthentication field.
func (o *InlineResponse2004) SetApiAuthentication(v InlineResponse2004ApiAuthentication) {
	o.ApiAuthentication = &v
}

func (o InlineResponse2004) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnforcePasswordExpiration != nil {
		toSerialize["enforcePasswordExpiration"] = o.EnforcePasswordExpiration
	}
	if o.PasswordExpirationDays != nil {
		toSerialize["passwordExpirationDays"] = o.PasswordExpirationDays
	}
	if o.EnforceDifferentPasswords != nil {
		toSerialize["enforceDifferentPasswords"] = o.EnforceDifferentPasswords
	}
	if o.NumDifferentPasswords != nil {
		toSerialize["numDifferentPasswords"] = o.NumDifferentPasswords
	}
	if o.EnforceStrongPasswords != nil {
		toSerialize["enforceStrongPasswords"] = o.EnforceStrongPasswords
	}
	if o.EnforceAccountLockout != nil {
		toSerialize["enforceAccountLockout"] = o.EnforceAccountLockout
	}
	if o.AccountLockoutAttempts != nil {
		toSerialize["accountLockoutAttempts"] = o.AccountLockoutAttempts
	}
	if o.EnforceIdleTimeout != nil {
		toSerialize["enforceIdleTimeout"] = o.EnforceIdleTimeout
	}
	if o.IdleTimeoutMinutes != nil {
		toSerialize["idleTimeoutMinutes"] = o.IdleTimeoutMinutes
	}
	if o.EnforceTwoFactorAuth != nil {
		toSerialize["enforceTwoFactorAuth"] = o.EnforceTwoFactorAuth
	}
	if o.EnforceLoginIpRanges != nil {
		toSerialize["enforceLoginIpRanges"] = o.EnforceLoginIpRanges
	}
	if o.LoginIpRanges != nil {
		toSerialize["loginIpRanges"] = o.LoginIpRanges
	}
	if o.ApiAuthentication != nil {
		toSerialize["apiAuthentication"] = o.ApiAuthentication
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004 struct {
	value *InlineResponse2004
	isSet bool
}

func (v NullableInlineResponse2004) Get() *InlineResponse2004 {
	return v.value
}

func (v *NullableInlineResponse2004) Set(val *InlineResponse2004) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004(val *InlineResponse2004) *NullableInlineResponse2004 {
	return &NullableInlineResponse2004{value: val, isSet: true}
}

func (v NullableInlineResponse2004) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


