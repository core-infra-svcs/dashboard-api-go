/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 August, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.36.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200106 struct for InlineResponse200106
type InlineResponse200106 struct {
	Counts *InlineResponse200106Counts `json:"counts,omitempty"`
	Limits *InlineResponse200106Limits `json:"limits,omitempty"`
}

// NewInlineResponse200106 instantiates a new InlineResponse200106 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200106() *InlineResponse200106 {
	this := InlineResponse200106{}
	return &this
}

// NewInlineResponse200106WithDefaults instantiates a new InlineResponse200106 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200106WithDefaults() *InlineResponse200106 {
	this := InlineResponse200106{}
	return &this
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *InlineResponse200106) GetCounts() InlineResponse200106Counts {
	if o == nil || isNil(o.Counts) {
		var ret InlineResponse200106Counts
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106) GetCountsOk() (*InlineResponse200106Counts, bool) {
	if o == nil || isNil(o.Counts) {
    return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *InlineResponse200106) HasCounts() bool {
	if o != nil && !isNil(o.Counts) {
		return true
	}

	return false
}

// SetCounts gets a reference to the given InlineResponse200106Counts and assigns it to the Counts field.
func (o *InlineResponse200106) SetCounts(v InlineResponse200106Counts) {
	o.Counts = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *InlineResponse200106) GetLimits() InlineResponse200106Limits {
	if o == nil || isNil(o.Limits) {
		var ret InlineResponse200106Limits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200106) GetLimitsOk() (*InlineResponse200106Limits, bool) {
	if o == nil || isNil(o.Limits) {
    return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *InlineResponse200106) HasLimits() bool {
	if o != nil && !isNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given InlineResponse200106Limits and assigns it to the Limits field.
func (o *InlineResponse200106) SetLimits(v InlineResponse200106Limits) {
	o.Limits = &v
}

func (o InlineResponse200106) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Counts) {
		toSerialize["counts"] = o.Counts
	}
	if !isNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200106 struct {
	value *InlineResponse200106
	isSet bool
}

func (v NullableInlineResponse200106) Get() *InlineResponse200106 {
	return v.value
}

func (v *NullableInlineResponse200106) Set(val *InlineResponse200106) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200106) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200106) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200106(val *InlineResponse200106) *NullableInlineResponse200106 {
	return &NullableInlineResponse200106{value: val, isSet: true}
}

func (v NullableInlineResponse200106) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200106) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


