/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 May, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.46.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200255StatesUnusedActiveOldestActivation Information about the oldest historical license activation
type InlineResponse200255StatesUnusedActiveOldestActivation struct {
	// The oldest license activation date
	ActivationDate *string `json:"activationDate,omitempty"`
	// The number of licenses that activated on this date
	ActiveCount *int32 `json:"activeCount,omitempty"`
}

// NewInlineResponse200255StatesUnusedActiveOldestActivation instantiates a new InlineResponse200255StatesUnusedActiveOldestActivation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200255StatesUnusedActiveOldestActivation() *InlineResponse200255StatesUnusedActiveOldestActivation {
	this := InlineResponse200255StatesUnusedActiveOldestActivation{}
	return &this
}

// NewInlineResponse200255StatesUnusedActiveOldestActivationWithDefaults instantiates a new InlineResponse200255StatesUnusedActiveOldestActivation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200255StatesUnusedActiveOldestActivationWithDefaults() *InlineResponse200255StatesUnusedActiveOldestActivation {
	this := InlineResponse200255StatesUnusedActiveOldestActivation{}
	return &this
}

// GetActivationDate returns the ActivationDate field value if set, zero value otherwise.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) GetActivationDate() string {
	if o == nil || isNil(o.ActivationDate) {
		var ret string
		return ret
	}
	return *o.ActivationDate
}

// GetActivationDateOk returns a tuple with the ActivationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) GetActivationDateOk() (*string, bool) {
	if o == nil || isNil(o.ActivationDate) {
    return nil, false
	}
	return o.ActivationDate, true
}

// HasActivationDate returns a boolean if a field has been set.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) HasActivationDate() bool {
	if o != nil && !isNil(o.ActivationDate) {
		return true
	}

	return false
}

// SetActivationDate gets a reference to the given string and assigns it to the ActivationDate field.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) SetActivationDate(v string) {
	o.ActivationDate = &v
}

// GetActiveCount returns the ActiveCount field value if set, zero value otherwise.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) GetActiveCount() int32 {
	if o == nil || isNil(o.ActiveCount) {
		var ret int32
		return ret
	}
	return *o.ActiveCount
}

// GetActiveCountOk returns a tuple with the ActiveCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) GetActiveCountOk() (*int32, bool) {
	if o == nil || isNil(o.ActiveCount) {
    return nil, false
	}
	return o.ActiveCount, true
}

// HasActiveCount returns a boolean if a field has been set.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) HasActiveCount() bool {
	if o != nil && !isNil(o.ActiveCount) {
		return true
	}

	return false
}

// SetActiveCount gets a reference to the given int32 and assigns it to the ActiveCount field.
func (o *InlineResponse200255StatesUnusedActiveOldestActivation) SetActiveCount(v int32) {
	o.ActiveCount = &v
}

func (o InlineResponse200255StatesUnusedActiveOldestActivation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ActivationDate) {
		toSerialize["activationDate"] = o.ActivationDate
	}
	if !isNil(o.ActiveCount) {
		toSerialize["activeCount"] = o.ActiveCount
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200255StatesUnusedActiveOldestActivation struct {
	value *InlineResponse200255StatesUnusedActiveOldestActivation
	isSet bool
}

func (v NullableInlineResponse200255StatesUnusedActiveOldestActivation) Get() *InlineResponse200255StatesUnusedActiveOldestActivation {
	return v.value
}

func (v *NullableInlineResponse200255StatesUnusedActiveOldestActivation) Set(val *InlineResponse200255StatesUnusedActiveOldestActivation) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200255StatesUnusedActiveOldestActivation) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200255StatesUnusedActiveOldestActivation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200255StatesUnusedActiveOldestActivation(val *InlineResponse200255StatesUnusedActiveOldestActivation) *NullableInlineResponse200255StatesUnusedActiveOldestActivation {
	return &NullableInlineResponse200255StatesUnusedActiveOldestActivation{value: val, isSet: true}
}

func (v NullableInlineResponse200255StatesUnusedActiveOldestActivation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200255StatesUnusedActiveOldestActivation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


