/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NetworksNetworkIdDevicesClaimDetailsByDevice struct for NetworksNetworkIdDevicesClaimDetailsByDevice
type NetworksNetworkIdDevicesClaimDetailsByDevice struct {
	// The serial of the device these details relate to
	Serial string `json:"serial"`
	// An array of details. Supported list         of details includes: \"device mode\", \"username\", \"password\", \"enable password\", \"ap mapping type\" and         \"ap network id\". For onboarding into hybrid mode, the value of the device mode detail must be \"monitored\"
	Details []NetworksNetworkIdDevicesClaimDetails `json:"details"`
}

// NewNetworksNetworkIdDevicesClaimDetailsByDevice instantiates a new NetworksNetworkIdDevicesClaimDetailsByDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworksNetworkIdDevicesClaimDetailsByDevice(serial string, details []NetworksNetworkIdDevicesClaimDetails) *NetworksNetworkIdDevicesClaimDetailsByDevice {
	this := NetworksNetworkIdDevicesClaimDetailsByDevice{}
	this.Serial = serial
	this.Details = details
	return &this
}

// NewNetworksNetworkIdDevicesClaimDetailsByDeviceWithDefaults instantiates a new NetworksNetworkIdDevicesClaimDetailsByDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworksNetworkIdDevicesClaimDetailsByDeviceWithDefaults() *NetworksNetworkIdDevicesClaimDetailsByDevice {
	this := NetworksNetworkIdDevicesClaimDetailsByDevice{}
	return &this
}

// GetSerial returns the Serial field value
func (o *NetworksNetworkIdDevicesClaimDetailsByDevice) GetSerial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *NetworksNetworkIdDevicesClaimDetailsByDevice) GetSerialOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *NetworksNetworkIdDevicesClaimDetailsByDevice) SetSerial(v string) {
	o.Serial = v
}

// GetDetails returns the Details field value
func (o *NetworksNetworkIdDevicesClaimDetailsByDevice) GetDetails() []NetworksNetworkIdDevicesClaimDetails {
	if o == nil {
		var ret []NetworksNetworkIdDevicesClaimDetails
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *NetworksNetworkIdDevicesClaimDetailsByDevice) GetDetailsOk() ([]NetworksNetworkIdDevicesClaimDetails, bool) {
	if o == nil {
    return nil, false
	}
	return o.Details, true
}

// SetDetails sets field value
func (o *NetworksNetworkIdDevicesClaimDetailsByDevice) SetDetails(v []NetworksNetworkIdDevicesClaimDetails) {
	o.Details = v
}

func (o NetworksNetworkIdDevicesClaimDetailsByDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["serial"] = o.Serial
	}
	if true {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableNetworksNetworkIdDevicesClaimDetailsByDevice struct {
	value *NetworksNetworkIdDevicesClaimDetailsByDevice
	isSet bool
}

func (v NullableNetworksNetworkIdDevicesClaimDetailsByDevice) Get() *NetworksNetworkIdDevicesClaimDetailsByDevice {
	return v.value
}

func (v *NullableNetworksNetworkIdDevicesClaimDetailsByDevice) Set(val *NetworksNetworkIdDevicesClaimDetailsByDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworksNetworkIdDevicesClaimDetailsByDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworksNetworkIdDevicesClaimDetailsByDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworksNetworkIdDevicesClaimDetailsByDevice(val *NetworksNetworkIdDevicesClaimDetailsByDevice) *NullableNetworksNetworkIdDevicesClaimDetailsByDevice {
	return &NullableNetworksNetworkIdDevicesClaimDetailsByDevice{value: val, isSet: true}
}

func (v NullableNetworksNetworkIdDevicesClaimDetailsByDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworksNetworkIdDevicesClaimDetailsByDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


