/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 July, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.60.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineObject69 struct for InlineObject69
type InlineObject69 struct {
	// Name of the custom performance class
	Name *string `json:"name,omitempty"`
	// Maximum latency in milliseconds
	MaxLatency NullableInt32 `json:"maxLatency,omitempty"`
	// Maximum jitter in milliseconds
	MaxJitter NullableInt32 `json:"maxJitter,omitempty"`
	// Maximum percentage of packet loss
	MaxLossPercentage NullableInt32 `json:"maxLossPercentage,omitempty"`
}

// NewInlineObject69 instantiates a new InlineObject69 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject69() *InlineObject69 {
	this := InlineObject69{}
	return &this
}

// NewInlineObject69WithDefaults instantiates a new InlineObject69 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject69WithDefaults() *InlineObject69 {
	this := InlineObject69{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineObject69) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject69) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineObject69) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineObject69) SetName(v string) {
	o.Name = &v
}

// GetMaxLatency returns the MaxLatency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject69) GetMaxLatency() int32 {
	if o == nil || isNil(o.MaxLatency.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxLatency.Get()
}

// GetMaxLatencyOk returns a tuple with the MaxLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject69) GetMaxLatencyOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxLatency.Get(), o.MaxLatency.IsSet()
}

// HasMaxLatency returns a boolean if a field has been set.
func (o *InlineObject69) HasMaxLatency() bool {
	if o != nil && o.MaxLatency.IsSet() {
		return true
	}

	return false
}

// SetMaxLatency gets a reference to the given NullableInt32 and assigns it to the MaxLatency field.
func (o *InlineObject69) SetMaxLatency(v int32) {
	o.MaxLatency.Set(&v)
}
// SetMaxLatencyNil sets the value for MaxLatency to be an explicit nil
func (o *InlineObject69) SetMaxLatencyNil() {
	o.MaxLatency.Set(nil)
}

// UnsetMaxLatency ensures that no value is present for MaxLatency, not even an explicit nil
func (o *InlineObject69) UnsetMaxLatency() {
	o.MaxLatency.Unset()
}

// GetMaxJitter returns the MaxJitter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject69) GetMaxJitter() int32 {
	if o == nil || isNil(o.MaxJitter.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxJitter.Get()
}

// GetMaxJitterOk returns a tuple with the MaxJitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject69) GetMaxJitterOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxJitter.Get(), o.MaxJitter.IsSet()
}

// HasMaxJitter returns a boolean if a field has been set.
func (o *InlineObject69) HasMaxJitter() bool {
	if o != nil && o.MaxJitter.IsSet() {
		return true
	}

	return false
}

// SetMaxJitter gets a reference to the given NullableInt32 and assigns it to the MaxJitter field.
func (o *InlineObject69) SetMaxJitter(v int32) {
	o.MaxJitter.Set(&v)
}
// SetMaxJitterNil sets the value for MaxJitter to be an explicit nil
func (o *InlineObject69) SetMaxJitterNil() {
	o.MaxJitter.Set(nil)
}

// UnsetMaxJitter ensures that no value is present for MaxJitter, not even an explicit nil
func (o *InlineObject69) UnsetMaxJitter() {
	o.MaxJitter.Unset()
}

// GetMaxLossPercentage returns the MaxLossPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject69) GetMaxLossPercentage() int32 {
	if o == nil || isNil(o.MaxLossPercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxLossPercentage.Get()
}

// GetMaxLossPercentageOk returns a tuple with the MaxLossPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject69) GetMaxLossPercentageOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MaxLossPercentage.Get(), o.MaxLossPercentage.IsSet()
}

// HasMaxLossPercentage returns a boolean if a field has been set.
func (o *InlineObject69) HasMaxLossPercentage() bool {
	if o != nil && o.MaxLossPercentage.IsSet() {
		return true
	}

	return false
}

// SetMaxLossPercentage gets a reference to the given NullableInt32 and assigns it to the MaxLossPercentage field.
func (o *InlineObject69) SetMaxLossPercentage(v int32) {
	o.MaxLossPercentage.Set(&v)
}
// SetMaxLossPercentageNil sets the value for MaxLossPercentage to be an explicit nil
func (o *InlineObject69) SetMaxLossPercentageNil() {
	o.MaxLossPercentage.Set(nil)
}

// UnsetMaxLossPercentage ensures that no value is present for MaxLossPercentage, not even an explicit nil
func (o *InlineObject69) UnsetMaxLossPercentage() {
	o.MaxLossPercentage.Unset()
}

func (o InlineObject69) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.MaxLatency.IsSet() {
		toSerialize["maxLatency"] = o.MaxLatency.Get()
	}
	if o.MaxJitter.IsSet() {
		toSerialize["maxJitter"] = o.MaxJitter.Get()
	}
	if o.MaxLossPercentage.IsSet() {
		toSerialize["maxLossPercentage"] = o.MaxLossPercentage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject69 struct {
	value *InlineObject69
	isSet bool
}

func (v NullableInlineObject69) Get() *InlineObject69 {
	return v.value
}

func (v *NullableInlineObject69) Set(val *InlineObject69) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject69) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject69) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject69(val *InlineObject69) *NullableInlineObject69 {
	return &NullableInlineObject69{value: val, isSet: true}
}

func (v NullableInlineObject69) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject69) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


