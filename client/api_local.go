/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 February, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.55.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// LocalApiService LocalApi service
type LocalApiService service

type LocalApiCreateOrganizationApplianceDnsLocalProfileRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	createOrganizationApplianceDnsLocalProfile *InlineObject217
}

func (r LocalApiCreateOrganizationApplianceDnsLocalProfileRequest) CreateOrganizationApplianceDnsLocalProfile(createOrganizationApplianceDnsLocalProfile InlineObject217) LocalApiCreateOrganizationApplianceDnsLocalProfileRequest {
	r.createOrganizationApplianceDnsLocalProfile = &createOrganizationApplianceDnsLocalProfile
	return r
}

func (r LocalApiCreateOrganizationApplianceDnsLocalProfileRequest) Execute() (*InlineResponse200218, *http.Response, error) {
	return r.ApiService.CreateOrganizationApplianceDnsLocalProfileExecute(r)
}

/*
CreateOrganizationApplianceDnsLocalProfile Create a new local DNS profile

Create a new local DNS profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LocalApiCreateOrganizationApplianceDnsLocalProfileRequest
*/
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalProfile(ctx context.Context, organizationId string) LocalApiCreateOrganizationApplianceDnsLocalProfileRequest {
	return LocalApiCreateOrganizationApplianceDnsLocalProfileRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200218
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalProfileExecute(r LocalApiCreateOrganizationApplianceDnsLocalProfileRequest) (*InlineResponse200218, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200218
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.CreateOrganizationApplianceDnsLocalProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationApplianceDnsLocalProfile == nil {
		return localVarReturnValue, nil, reportError("createOrganizationApplianceDnsLocalProfile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationApplianceDnsLocalProfile
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	createOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate *InlineObject218
}

func (r LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest) CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate(createOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate InlineObject218) LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest {
	r.createOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate = &createOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate
	return r
}

func (r LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest) Execute() (*InlineResponse200220, *http.Response, error) {
	return r.ApiService.CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateExecute(r)
}

/*
CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate Assign the local DNS profile to networks in the organization

Assign the local DNS profile to networks in the organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest
*/
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate(ctx context.Context, organizationId string) LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest {
	return LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200220
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateExecute(r LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreateRequest) (*InlineResponse200220, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200220
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkCreate"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate == nil {
		return localVarReturnValue, nil, reportError("createOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationApplianceDnsLocalProfilesAssignmentsBulkCreate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete *InlineObject219
}

func (r LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest) CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete(createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete InlineObject219) LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest {
	r.createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete = &createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete
	return r
}

func (r LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest) Execute() (*InlineResponse200220, *http.Response, error) {
	return r.ApiService.CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteExecute(r)
}

/*
CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete Unassign the local DNS profile to networks in the organization

Unassign the local DNS profile to networks in the organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest
*/
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete(ctx context.Context, organizationId string) LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest {
	return LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200220
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteExecute(r LocalApiCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest) (*InlineResponse200220, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200220
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkDelete"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete == nil {
		return localVarReturnValue, nil, reportError("createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiCreateOrganizationApplianceDnsLocalRecordRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	createOrganizationApplianceDnsLocalRecord *InlineObject221
}

func (r LocalApiCreateOrganizationApplianceDnsLocalRecordRequest) CreateOrganizationApplianceDnsLocalRecord(createOrganizationApplianceDnsLocalRecord InlineObject221) LocalApiCreateOrganizationApplianceDnsLocalRecordRequest {
	r.createOrganizationApplianceDnsLocalRecord = &createOrganizationApplianceDnsLocalRecord
	return r
}

func (r LocalApiCreateOrganizationApplianceDnsLocalRecordRequest) Execute() ([]InlineResponse200221, *http.Response, error) {
	return r.ApiService.CreateOrganizationApplianceDnsLocalRecordExecute(r)
}

/*
CreateOrganizationApplianceDnsLocalRecord Create a new local DNS record

Create a new local DNS record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LocalApiCreateOrganizationApplianceDnsLocalRecordRequest
*/
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalRecord(ctx context.Context, organizationId string) LocalApiCreateOrganizationApplianceDnsLocalRecordRequest {
	return LocalApiCreateOrganizationApplianceDnsLocalRecordRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse200221
func (a *LocalApiService) CreateOrganizationApplianceDnsLocalRecordExecute(r LocalApiCreateOrganizationApplianceDnsLocalRecordRequest) ([]InlineResponse200221, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse200221
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.CreateOrganizationApplianceDnsLocalRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/records"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationApplianceDnsLocalRecord == nil {
		return localVarReturnValue, nil, reportError("createOrganizationApplianceDnsLocalRecord is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationApplianceDnsLocalRecord
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiDeleteOrganizationApplianceDnsLocalProfileRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	profileId string
}

func (r LocalApiDeleteOrganizationApplianceDnsLocalProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrganizationApplianceDnsLocalProfileExecute(r)
}

/*
DeleteOrganizationApplianceDnsLocalProfile Deletes a local DNS profile

Deletes a local DNS profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param profileId Profile ID
 @return LocalApiDeleteOrganizationApplianceDnsLocalProfileRequest
*/
func (a *LocalApiService) DeleteOrganizationApplianceDnsLocalProfile(ctx context.Context, organizationId string, profileId string) LocalApiDeleteOrganizationApplianceDnsLocalProfileRequest {
	return LocalApiDeleteOrganizationApplianceDnsLocalProfileRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		profileId: profileId,
	}
}

// Execute executes the request
func (a *LocalApiService) DeleteOrganizationApplianceDnsLocalProfileExecute(r LocalApiDeleteOrganizationApplianceDnsLocalProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.DeleteOrganizationApplianceDnsLocalProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/profiles/{profileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LocalApiDeleteOrganizationApplianceDnsLocalRecordRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	recordId string
}

func (r LocalApiDeleteOrganizationApplianceDnsLocalRecordRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrganizationApplianceDnsLocalRecordExecute(r)
}

/*
DeleteOrganizationApplianceDnsLocalRecord Deletes a local DNS record

Deletes a local DNS record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param recordId Record ID
 @return LocalApiDeleteOrganizationApplianceDnsLocalRecordRequest
*/
func (a *LocalApiService) DeleteOrganizationApplianceDnsLocalRecord(ctx context.Context, organizationId string, recordId string) LocalApiDeleteOrganizationApplianceDnsLocalRecordRequest {
	return LocalApiDeleteOrganizationApplianceDnsLocalRecordRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		recordId: recordId,
	}
}

// Execute executes the request
func (a *LocalApiService) DeleteOrganizationApplianceDnsLocalRecordExecute(r LocalApiDeleteOrganizationApplianceDnsLocalRecordRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.DeleteOrganizationApplianceDnsLocalRecord")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/records/{recordId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recordId"+"}", url.PathEscape(parameterToString(r.recordId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LocalApiGetOrganizationApplianceDnsLocalProfilesRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	profileIds *[]string
}

// Optional parameter to filter the results by profile IDs
func (r LocalApiGetOrganizationApplianceDnsLocalProfilesRequest) ProfileIds(profileIds []string) LocalApiGetOrganizationApplianceDnsLocalProfilesRequest {
	r.profileIds = &profileIds
	return r
}

func (r LocalApiGetOrganizationApplianceDnsLocalProfilesRequest) Execute() ([]InlineResponse200218, *http.Response, error) {
	return r.ApiService.GetOrganizationApplianceDnsLocalProfilesExecute(r)
}

/*
GetOrganizationApplianceDnsLocalProfiles Fetch the local DNS profiles used in the organization

Fetch the local DNS profiles used in the organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LocalApiGetOrganizationApplianceDnsLocalProfilesRequest
*/
func (a *LocalApiService) GetOrganizationApplianceDnsLocalProfiles(ctx context.Context, organizationId string) LocalApiGetOrganizationApplianceDnsLocalProfilesRequest {
	return LocalApiGetOrganizationApplianceDnsLocalProfilesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse200218
func (a *LocalApiService) GetOrganizationApplianceDnsLocalProfilesExecute(r LocalApiGetOrganizationApplianceDnsLocalProfilesRequest) ([]InlineResponse200218, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse200218
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.GetOrganizationApplianceDnsLocalProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileIds != nil {
		localVarQueryParams.Add("profileIds", parameterToString(*r.profileIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	profileIds *[]string
	networkIds *[]string
}

// Optional parameter to filter the results by profile IDs
func (r LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest) ProfileIds(profileIds []string) LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest {
	r.profileIds = &profileIds
	return r
}

// Optional parameter to filter the results by network IDs
func (r LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest) NetworkIds(networkIds []string) LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest {
	r.networkIds = &networkIds
	return r
}

func (r LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest) Execute() (*InlineResponse200219, *http.Response, error) {
	return r.ApiService.GetOrganizationApplianceDnsLocalProfilesAssignmentsExecute(r)
}

/*
GetOrganizationApplianceDnsLocalProfilesAssignments Fetch the local DNS profile assignments in the organization

Fetch the local DNS profile assignments in the organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest
*/
func (a *LocalApiService) GetOrganizationApplianceDnsLocalProfilesAssignments(ctx context.Context, organizationId string) LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest {
	return LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200219
func (a *LocalApiService) GetOrganizationApplianceDnsLocalProfilesAssignmentsExecute(r LocalApiGetOrganizationApplianceDnsLocalProfilesAssignmentsRequest) (*InlineResponse200219, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200219
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.GetOrganizationApplianceDnsLocalProfilesAssignments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/profiles/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileIds != nil {
		localVarQueryParams.Add("profileIds", parameterToString(*r.profileIds, "csv"))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiGetOrganizationApplianceDnsLocalRecordsRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	profileIds *[]string
}

// Optional parameter to filter the results by profile IDs
func (r LocalApiGetOrganizationApplianceDnsLocalRecordsRequest) ProfileIds(profileIds []string) LocalApiGetOrganizationApplianceDnsLocalRecordsRequest {
	r.profileIds = &profileIds
	return r
}

func (r LocalApiGetOrganizationApplianceDnsLocalRecordsRequest) Execute() ([]InlineResponse200221, *http.Response, error) {
	return r.ApiService.GetOrganizationApplianceDnsLocalRecordsExecute(r)
}

/*
GetOrganizationApplianceDnsLocalRecords Fetch the DNS records used in local DNS profiles

Fetch the DNS records used in local DNS profiles

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return LocalApiGetOrganizationApplianceDnsLocalRecordsRequest
*/
func (a *LocalApiService) GetOrganizationApplianceDnsLocalRecords(ctx context.Context, organizationId string) LocalApiGetOrganizationApplianceDnsLocalRecordsRequest {
	return LocalApiGetOrganizationApplianceDnsLocalRecordsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse200221
func (a *LocalApiService) GetOrganizationApplianceDnsLocalRecordsExecute(r LocalApiGetOrganizationApplianceDnsLocalRecordsRequest) ([]InlineResponse200221, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse200221
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.GetOrganizationApplianceDnsLocalRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/records"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileIds != nil {
		localVarQueryParams.Add("profileIds", parameterToString(*r.profileIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	profileId string
	updateOrganizationApplianceDnsLocalProfile *InlineObject220
}

func (r LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest) UpdateOrganizationApplianceDnsLocalProfile(updateOrganizationApplianceDnsLocalProfile InlineObject220) LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest {
	r.updateOrganizationApplianceDnsLocalProfile = &updateOrganizationApplianceDnsLocalProfile
	return r
}

func (r LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest) Execute() (*InlineResponse200218, *http.Response, error) {
	return r.ApiService.UpdateOrganizationApplianceDnsLocalProfileExecute(r)
}

/*
UpdateOrganizationApplianceDnsLocalProfile Update a local DNS profile

Update a local DNS profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param profileId Profile ID
 @return LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest
*/
func (a *LocalApiService) UpdateOrganizationApplianceDnsLocalProfile(ctx context.Context, organizationId string, profileId string) LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest {
	return LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return InlineResponse200218
func (a *LocalApiService) UpdateOrganizationApplianceDnsLocalProfileExecute(r LocalApiUpdateOrganizationApplianceDnsLocalProfileRequest) (*InlineResponse200218, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200218
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.UpdateOrganizationApplianceDnsLocalProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/profiles/{profileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterToString(r.profileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateOrganizationApplianceDnsLocalProfile == nil {
		return localVarReturnValue, nil, reportError("updateOrganizationApplianceDnsLocalProfile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationApplianceDnsLocalProfile
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest struct {
	ctx context.Context
	ApiService *LocalApiService
	organizationId string
	recordId string
	updateOrganizationApplianceDnsLocalRecord *InlineObject222
}

func (r LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest) UpdateOrganizationApplianceDnsLocalRecord(updateOrganizationApplianceDnsLocalRecord InlineObject222) LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest {
	r.updateOrganizationApplianceDnsLocalRecord = &updateOrganizationApplianceDnsLocalRecord
	return r
}

func (r LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest) Execute() (*InlineResponse200221, *http.Response, error) {
	return r.ApiService.UpdateOrganizationApplianceDnsLocalRecordExecute(r)
}

/*
UpdateOrganizationApplianceDnsLocalRecord Updates a local DNS record

Updates a local DNS record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param recordId Record ID
 @return LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest
*/
func (a *LocalApiService) UpdateOrganizationApplianceDnsLocalRecord(ctx context.Context, organizationId string, recordId string) LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest {
	return LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return InlineResponse200221
func (a *LocalApiService) UpdateOrganizationApplianceDnsLocalRecordExecute(r LocalApiUpdateOrganizationApplianceDnsLocalRecordRequest) (*InlineResponse200221, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200221
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalApiService.UpdateOrganizationApplianceDnsLocalRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/appliance/dns/local/records/{recordId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recordId"+"}", url.PathEscape(parameterToString(r.recordId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationApplianceDnsLocalRecord
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
