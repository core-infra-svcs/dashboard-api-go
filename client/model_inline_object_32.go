/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 18 December, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.41.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineObject32 struct for InlineObject32
type InlineObject32 struct {
	DefaultDestinations *NetworksNetworkIdAlertsSettingsDefaultDestinations `json:"defaultDestinations,omitempty"`
	// Alert-specific configuration for each type. Only alerts that pertain to the network can be updated.
	Alerts []NetworksNetworkIdAlertsSettingsAlerts `json:"alerts,omitempty"`
	Muting *NetworksNetworkIdAlertsSettingsMuting `json:"muting,omitempty"`
}

// NewInlineObject32 instantiates a new InlineObject32 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject32() *InlineObject32 {
	this := InlineObject32{}
	return &this
}

// NewInlineObject32WithDefaults instantiates a new InlineObject32 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject32WithDefaults() *InlineObject32 {
	this := InlineObject32{}
	return &this
}

// GetDefaultDestinations returns the DefaultDestinations field value if set, zero value otherwise.
func (o *InlineObject32) GetDefaultDestinations() NetworksNetworkIdAlertsSettingsDefaultDestinations {
	if o == nil || isNil(o.DefaultDestinations) {
		var ret NetworksNetworkIdAlertsSettingsDefaultDestinations
		return ret
	}
	return *o.DefaultDestinations
}

// GetDefaultDestinationsOk returns a tuple with the DefaultDestinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject32) GetDefaultDestinationsOk() (*NetworksNetworkIdAlertsSettingsDefaultDestinations, bool) {
	if o == nil || isNil(o.DefaultDestinations) {
    return nil, false
	}
	return o.DefaultDestinations, true
}

// HasDefaultDestinations returns a boolean if a field has been set.
func (o *InlineObject32) HasDefaultDestinations() bool {
	if o != nil && !isNil(o.DefaultDestinations) {
		return true
	}

	return false
}

// SetDefaultDestinations gets a reference to the given NetworksNetworkIdAlertsSettingsDefaultDestinations and assigns it to the DefaultDestinations field.
func (o *InlineObject32) SetDefaultDestinations(v NetworksNetworkIdAlertsSettingsDefaultDestinations) {
	o.DefaultDestinations = &v
}

// GetAlerts returns the Alerts field value if set, zero value otherwise.
func (o *InlineObject32) GetAlerts() []NetworksNetworkIdAlertsSettingsAlerts {
	if o == nil || isNil(o.Alerts) {
		var ret []NetworksNetworkIdAlertsSettingsAlerts
		return ret
	}
	return o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject32) GetAlertsOk() ([]NetworksNetworkIdAlertsSettingsAlerts, bool) {
	if o == nil || isNil(o.Alerts) {
    return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *InlineObject32) HasAlerts() bool {
	if o != nil && !isNil(o.Alerts) {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given []NetworksNetworkIdAlertsSettingsAlerts and assigns it to the Alerts field.
func (o *InlineObject32) SetAlerts(v []NetworksNetworkIdAlertsSettingsAlerts) {
	o.Alerts = v
}

// GetMuting returns the Muting field value if set, zero value otherwise.
func (o *InlineObject32) GetMuting() NetworksNetworkIdAlertsSettingsMuting {
	if o == nil || isNil(o.Muting) {
		var ret NetworksNetworkIdAlertsSettingsMuting
		return ret
	}
	return *o.Muting
}

// GetMutingOk returns a tuple with the Muting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject32) GetMutingOk() (*NetworksNetworkIdAlertsSettingsMuting, bool) {
	if o == nil || isNil(o.Muting) {
    return nil, false
	}
	return o.Muting, true
}

// HasMuting returns a boolean if a field has been set.
func (o *InlineObject32) HasMuting() bool {
	if o != nil && !isNil(o.Muting) {
		return true
	}

	return false
}

// SetMuting gets a reference to the given NetworksNetworkIdAlertsSettingsMuting and assigns it to the Muting field.
func (o *InlineObject32) SetMuting(v NetworksNetworkIdAlertsSettingsMuting) {
	o.Muting = &v
}

func (o InlineObject32) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DefaultDestinations) {
		toSerialize["defaultDestinations"] = o.DefaultDestinations
	}
	if !isNil(o.Alerts) {
		toSerialize["alerts"] = o.Alerts
	}
	if !isNil(o.Muting) {
		toSerialize["muting"] = o.Muting
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject32 struct {
	value *InlineObject32
	isSet bool
}

func (v NullableInlineObject32) Get() *InlineObject32 {
	return v.value
}

func (v *NullableInlineObject32) Set(val *InlineObject32) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject32) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject32) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject32(val *InlineObject32) *NullableInlineObject32 {
	return &NullableInlineObject32{value: val, isSet: true}
}

func (v NullableInlineObject32) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject32) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


