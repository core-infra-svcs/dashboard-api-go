/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 February, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.55.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200323Data A breakdown of how many kilobytes have passed through this port during the interval timespan.
type InlineResponse200323Data struct {
	Usage *InlineResponse200323DataUsage `json:"usage,omitempty"`
}

// NewInlineResponse200323Data instantiates a new InlineResponse200323Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200323Data() *InlineResponse200323Data {
	this := InlineResponse200323Data{}
	return &this
}

// NewInlineResponse200323DataWithDefaults instantiates a new InlineResponse200323Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200323DataWithDefaults() *InlineResponse200323Data {
	this := InlineResponse200323Data{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *InlineResponse200323Data) GetUsage() InlineResponse200323DataUsage {
	if o == nil || isNil(o.Usage) {
		var ret InlineResponse200323DataUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200323Data) GetUsageOk() (*InlineResponse200323DataUsage, bool) {
	if o == nil || isNil(o.Usage) {
    return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *InlineResponse200323Data) HasUsage() bool {
	if o != nil && !isNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given InlineResponse200323DataUsage and assigns it to the Usage field.
func (o *InlineResponse200323Data) SetUsage(v InlineResponse200323DataUsage) {
	o.Usage = &v
}

func (o InlineResponse200323Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200323Data struct {
	value *InlineResponse200323Data
	isSet bool
}

func (v NullableInlineResponse200323Data) Get() *InlineResponse200323Data {
	return v.value
}

func (v *NullableInlineResponse200323Data) Set(val *InlineResponse200323Data) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200323Data) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200323Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200323Data(val *InlineResponse200323Data) *NullableInlineResponse200323Data {
	return &NullableInlineResponse200323Data{value: val, isSet: true}
}

func (v NullableInlineResponse200323Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200323Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


