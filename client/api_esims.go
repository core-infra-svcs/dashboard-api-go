/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 June, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.59.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// EsimsApiService EsimsApi service
type EsimsApiService service

type EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	createOrganizationCellularGatewayEsimsServiceProvidersAccount *InlineObject246
}

func (r EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) CreateOrganizationCellularGatewayEsimsServiceProvidersAccount(createOrganizationCellularGatewayEsimsServiceProvidersAccount InlineObject246) EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	r.createOrganizationCellularGatewayEsimsServiceProvidersAccount = &createOrganizationCellularGatewayEsimsServiceProvidersAccount
	return r
}

func (r EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) Execute() (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	return r.ApiService.CreateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r)
}

/*
CreateOrganizationCellularGatewayEsimsServiceProvidersAccount Add a service provider account.

Add a service provider account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest
*/
func (a *EsimsApiService) CreateOrganizationCellularGatewayEsimsServiceProvidersAccount(ctx context.Context, organizationId string) EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	return EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
func (a *EsimsApiService) CreateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r EsimsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.CreateOrganizationCellularGatewayEsimsServiceProvidersAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationCellularGatewayEsimsServiceProvidersAccount == nil {
		return localVarReturnValue, nil, reportError("createOrganizationCellularGatewayEsimsServiceProvidersAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationCellularGatewayEsimsServiceProvidersAccount
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	createOrganizationCellularGatewayEsimsSwap *InlineObject248
}

func (r EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest) CreateOrganizationCellularGatewayEsimsSwap(createOrganizationCellularGatewayEsimsSwap InlineObject248) EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest {
	r.createOrganizationCellularGatewayEsimsSwap = &createOrganizationCellularGatewayEsimsSwap
	return r
}

func (r EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest) Execute() (*InlineResponse200258, *http.Response, error) {
	return r.ApiService.CreateOrganizationCellularGatewayEsimsSwapExecute(r)
}

/*
CreateOrganizationCellularGatewayEsimsSwap Swap which profile an eSIM uses.

Swap which profile an eSIM uses.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest
*/
func (a *EsimsApiService) CreateOrganizationCellularGatewayEsimsSwap(ctx context.Context, organizationId string) EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest {
	return EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200258
func (a *EsimsApiService) CreateOrganizationCellularGatewayEsimsSwapExecute(r EsimsApiCreateOrganizationCellularGatewayEsimsSwapRequest) (*InlineResponse200258, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200258
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.CreateOrganizationCellularGatewayEsimsSwap")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/swap"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationCellularGatewayEsimsSwap == nil {
		return localVarReturnValue, nil, reportError("createOrganizationCellularGatewayEsimsSwap is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationCellularGatewayEsimsSwap
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	accountId string
}

func (r EsimsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r)
}

/*
DeleteOrganizationCellularGatewayEsimsServiceProvidersAccount Remove a service provider account's integration with the Dashboard.

Remove a service provider account's integration with the Dashboard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param accountId Account ID
 @return EsimsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest
*/
func (a *EsimsApiService) DeleteOrganizationCellularGatewayEsimsServiceProvidersAccount(ctx context.Context, organizationId string, accountId string) EsimsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	return EsimsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
func (a *EsimsApiService) DeleteOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r EsimsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.DeleteOrganizationCellularGatewayEsimsServiceProvidersAccount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	eids *[]string
}

// Optional parameter to filter the results by EID.
func (r EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest) Eids(eids []string) EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest {
	r.eids = &eids
	return r
}

func (r EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest) Execute() (*InlineResponse200253, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsInventoryExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsInventory The eSIM inventory of a given organization.

The eSIM inventory of a given organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest
*/
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsInventory(ctx context.Context, organizationId string) EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest {
	return EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200253
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsInventoryExecute(r EsimsApiGetOrganizationCellularGatewayEsimsInventoryRequest) (*InlineResponse200253, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200253
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.GetOrganizationCellularGatewayEsimsInventory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/inventory"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eids != nil {
		localVarQueryParams.Add("eids", parameterToString(*r.eids, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
}

func (r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersRequest) Execute() (*InlineResponse200254, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsServiceProvidersExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsServiceProviders Service providers customers can add accounts for.

Service providers customers can add accounts for.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersRequest
*/
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProviders(ctx context.Context, organizationId string) EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersRequest {
	return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200254
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersExecute(r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersRequest) (*InlineResponse200254, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200254
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.GetOrganizationCellularGatewayEsimsServiceProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	accountIds *[]int32
}

// Optional parameter to filter the results by service provider account IDs.
func (r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest) AccountIds(accountIds []int32) EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest {
	r.accountIds = &accountIds
	return r
}

func (r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest) Execute() ([]InlineResponse200255, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsServiceProvidersAccounts Inventory of service provider accounts tied to the organization.

Inventory of service provider accounts tied to the organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest
*/
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccounts(ctx context.Context, organizationId string) EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest {
	return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse200255
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsExecute(r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest) ([]InlineResponse200255, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse200255
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountIds != nil {
		localVarQueryParams.Add("accountIds", parameterToString(*r.accountIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	accountIds *[]string
}

// Account IDs that communication plans will be fetched for
func (r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest) AccountIds(accountIds []string) EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest {
	r.accountIds = &accountIds
	return r
}

func (r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest) Execute() (*InlineResponse200256, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans The communication plans available for a given provider.

The communication plans available for a given provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest
*/
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans(ctx context.Context, organizationId string) EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest {
	return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200256
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansExecute(r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest) (*InlineResponse200256, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200256
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/communicationPlans"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountIds == nil {
		return localVarReturnValue, nil, reportError("accountIds is required and must be specified")
	}

	localVarQueryParams.Add("accountIds", parameterToString(*r.accountIds, "csv"))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	accountIds *[]string
}

// Account IDs that rate plans will be fetched for
func (r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest) AccountIds(accountIds []string) EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest {
	r.accountIds = &accountIds
	return r
}

func (r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest) Execute() (*InlineResponse200257, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans The rate plans available for a given provider.

The rate plans available for a given provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest
*/
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans(ctx context.Context, organizationId string) EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest {
	return EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200257
func (a *EsimsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansExecute(r EsimsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest) (*InlineResponse200257, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200257
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/ratePlans"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountIds == nil {
		return localVarReturnValue, nil, reportError("accountIds is required and must be specified")
	}

	localVarQueryParams.Add("accountIds", parameterToString(*r.accountIds, "csv"))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	id string
	updateOrganizationCellularGatewayEsimsInventory *InlineObject245
}

func (r EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest) UpdateOrganizationCellularGatewayEsimsInventory(updateOrganizationCellularGatewayEsimsInventory InlineObject245) EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest {
	r.updateOrganizationCellularGatewayEsimsInventory = &updateOrganizationCellularGatewayEsimsInventory
	return r
}

func (r EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest) Execute() (*InlineResponse200253Items, *http.Response, error) {
	return r.ApiService.UpdateOrganizationCellularGatewayEsimsInventoryExecute(r)
}

/*
UpdateOrganizationCellularGatewayEsimsInventory Toggle the status of an eSIM

Toggle the status of an eSIM

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param id ID
 @return EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest
*/
func (a *EsimsApiService) UpdateOrganizationCellularGatewayEsimsInventory(ctx context.Context, organizationId string, id string) EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest {
	return EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		id: id,
	}
}

// Execute executes the request
//  @return InlineResponse200253Items
func (a *EsimsApiService) UpdateOrganizationCellularGatewayEsimsInventoryExecute(r EsimsApiUpdateOrganizationCellularGatewayEsimsInventoryRequest) (*InlineResponse200253Items, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200253Items
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.UpdateOrganizationCellularGatewayEsimsInventory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/inventory/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationCellularGatewayEsimsInventory
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	organizationId string
	accountId string
	updateOrganizationCellularGatewayEsimsServiceProvidersAccount *InlineObject247
}

func (r EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount(updateOrganizationCellularGatewayEsimsServiceProvidersAccount InlineObject247) EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	r.updateOrganizationCellularGatewayEsimsServiceProvidersAccount = &updateOrganizationCellularGatewayEsimsServiceProvidersAccount
	return r
}

func (r EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) Execute() (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	return r.ApiService.UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r)
}

/*
UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount Edit service provider account info stored in Meraki's database.

Edit service provider account info stored in Meraki's database.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param accountId Account ID
 @return EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest
*/
func (a *EsimsApiService) UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount(ctx context.Context, organizationId string, accountId string) EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	return EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
func (a *EsimsApiService) UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r EsimsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationCellularGatewayEsimsServiceProvidersAccount
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EsimsApiUpdateOrganizationCellularGatewayEsimsSwapRequest struct {
	ctx context.Context
	ApiService *EsimsApiService
	id string
	organizationId string
}

func (r EsimsApiUpdateOrganizationCellularGatewayEsimsSwapRequest) Execute() (*InlineResponse200258, *http.Response, error) {
	return r.ApiService.UpdateOrganizationCellularGatewayEsimsSwapExecute(r)
}

/*
UpdateOrganizationCellularGatewayEsimsSwap Get the status of a profile swap.

Get the status of a profile swap.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eSIM EID
 @param organizationId Organization ID
 @return EsimsApiUpdateOrganizationCellularGatewayEsimsSwapRequest
*/
func (a *EsimsApiService) UpdateOrganizationCellularGatewayEsimsSwap(ctx context.Context, id string, organizationId string) EsimsApiUpdateOrganizationCellularGatewayEsimsSwapRequest {
	return EsimsApiUpdateOrganizationCellularGatewayEsimsSwapRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200258
func (a *EsimsApiService) UpdateOrganizationCellularGatewayEsimsSwapExecute(r EsimsApiUpdateOrganizationCellularGatewayEsimsSwapRequest) (*InlineResponse200258, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200258
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsimsApiService.UpdateOrganizationCellularGatewayEsimsSwap")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/swap/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
