/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 January, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.42.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse2005 struct for InlineResponse2005
type InlineResponse2005 struct {
	// Boolean indicating if external rtsp stream is exposed
	ExternalRtspEnabled *bool `json:"externalRtspEnabled,omitempty"`
	// External rstp url. Will only be returned if external rtsp stream is exposed
	RtspUrl *string `json:"rtspUrl,omitempty"`
}

// NewInlineResponse2005 instantiates a new InlineResponse2005 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2005() *InlineResponse2005 {
	this := InlineResponse2005{}
	return &this
}

// NewInlineResponse2005WithDefaults instantiates a new InlineResponse2005 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2005WithDefaults() *InlineResponse2005 {
	this := InlineResponse2005{}
	return &this
}

// GetExternalRtspEnabled returns the ExternalRtspEnabled field value if set, zero value otherwise.
func (o *InlineResponse2005) GetExternalRtspEnabled() bool {
	if o == nil || isNil(o.ExternalRtspEnabled) {
		var ret bool
		return ret
	}
	return *o.ExternalRtspEnabled
}

// GetExternalRtspEnabledOk returns a tuple with the ExternalRtspEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005) GetExternalRtspEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.ExternalRtspEnabled) {
    return nil, false
	}
	return o.ExternalRtspEnabled, true
}

// HasExternalRtspEnabled returns a boolean if a field has been set.
func (o *InlineResponse2005) HasExternalRtspEnabled() bool {
	if o != nil && !isNil(o.ExternalRtspEnabled) {
		return true
	}

	return false
}

// SetExternalRtspEnabled gets a reference to the given bool and assigns it to the ExternalRtspEnabled field.
func (o *InlineResponse2005) SetExternalRtspEnabled(v bool) {
	o.ExternalRtspEnabled = &v
}

// GetRtspUrl returns the RtspUrl field value if set, zero value otherwise.
func (o *InlineResponse2005) GetRtspUrl() string {
	if o == nil || isNil(o.RtspUrl) {
		var ret string
		return ret
	}
	return *o.RtspUrl
}

// GetRtspUrlOk returns a tuple with the RtspUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005) GetRtspUrlOk() (*string, bool) {
	if o == nil || isNil(o.RtspUrl) {
    return nil, false
	}
	return o.RtspUrl, true
}

// HasRtspUrl returns a boolean if a field has been set.
func (o *InlineResponse2005) HasRtspUrl() bool {
	if o != nil && !isNil(o.RtspUrl) {
		return true
	}

	return false
}

// SetRtspUrl gets a reference to the given string and assigns it to the RtspUrl field.
func (o *InlineResponse2005) SetRtspUrl(v string) {
	o.RtspUrl = &v
}

func (o InlineResponse2005) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExternalRtspEnabled) {
		toSerialize["externalRtspEnabled"] = o.ExternalRtspEnabled
	}
	if !isNil(o.RtspUrl) {
		toSerialize["rtspUrl"] = o.RtspUrl
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2005 struct {
	value *InlineResponse2005
	isSet bool
}

func (v NullableInlineResponse2005) Get() *InlineResponse2005 {
	return v.value
}

func (v *NullableInlineResponse2005) Set(val *InlineResponse2005) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2005) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2005) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2005(val *InlineResponse2005) *NullableInlineResponse2005 {
	return &NullableInlineResponse2005{value: val, isSet: true}
}

func (v NullableInlineResponse2005) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2005) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


