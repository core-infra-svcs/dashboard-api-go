/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 April, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineObject13 struct for InlineObject13
type InlineObject13 struct {
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims []InlineResponse20015Sims `json:"sims,omitempty"`
	SimFailover *DevicesSerialCellularSimsSimFailover `json:"simFailover,omitempty"`
}

// NewInlineObject13 instantiates a new InlineObject13 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject13() *InlineObject13 {
	this := InlineObject13{}
	return &this
}

// NewInlineObject13WithDefaults instantiates a new InlineObject13 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject13WithDefaults() *InlineObject13 {
	this := InlineObject13{}
	return &this
}

// GetSims returns the Sims field value if set, zero value otherwise.
func (o *InlineObject13) GetSims() []InlineResponse20015Sims {
	if o == nil || isNil(o.Sims) {
		var ret []InlineResponse20015Sims
		return ret
	}
	return o.Sims
}

// GetSimsOk returns a tuple with the Sims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject13) GetSimsOk() ([]InlineResponse20015Sims, bool) {
	if o == nil || isNil(o.Sims) {
    return nil, false
	}
	return o.Sims, true
}

// HasSims returns a boolean if a field has been set.
func (o *InlineObject13) HasSims() bool {
	if o != nil && !isNil(o.Sims) {
		return true
	}

	return false
}

// SetSims gets a reference to the given []InlineResponse20015Sims and assigns it to the Sims field.
func (o *InlineObject13) SetSims(v []InlineResponse20015Sims) {
	o.Sims = v
}

// GetSimFailover returns the SimFailover field value if set, zero value otherwise.
func (o *InlineObject13) GetSimFailover() DevicesSerialCellularSimsSimFailover {
	if o == nil || isNil(o.SimFailover) {
		var ret DevicesSerialCellularSimsSimFailover
		return ret
	}
	return *o.SimFailover
}

// GetSimFailoverOk returns a tuple with the SimFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject13) GetSimFailoverOk() (*DevicesSerialCellularSimsSimFailover, bool) {
	if o == nil || isNil(o.SimFailover) {
    return nil, false
	}
	return o.SimFailover, true
}

// HasSimFailover returns a boolean if a field has been set.
func (o *InlineObject13) HasSimFailover() bool {
	if o != nil && !isNil(o.SimFailover) {
		return true
	}

	return false
}

// SetSimFailover gets a reference to the given DevicesSerialCellularSimsSimFailover and assigns it to the SimFailover field.
func (o *InlineObject13) SetSimFailover(v DevicesSerialCellularSimsSimFailover) {
	o.SimFailover = &v
}

func (o InlineObject13) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Sims) {
		toSerialize["sims"] = o.Sims
	}
	if !isNil(o.SimFailover) {
		toSerialize["simFailover"] = o.SimFailover
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject13 struct {
	value *InlineObject13
	isSet bool
}

func (v NullableInlineObject13) Get() *InlineObject13 {
	return v.value
}

func (v *NullableInlineObject13) Set(val *InlineObject13) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject13) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject13) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject13(val *InlineObject13) *NullableInlineObject13 {
	return &NullableInlineObject13{value: val, isSet: true}
}

func (v NullableInlineObject13) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject13) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


