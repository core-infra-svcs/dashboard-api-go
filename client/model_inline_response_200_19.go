/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 October, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.63.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse20019 struct for InlineResponse20019
type InlineResponse20019 struct {
	// Name of the MG.
	DeviceName *string `json:"deviceName,omitempty"`
	// Lan IP of the MG
	DeviceLanIp *string `json:"deviceLanIp,omitempty"`
	// Subnet configuration of the MG.
	DeviceSubnet *string `json:"deviceSubnet,omitempty"`
	// list of all fixed IP assignments for a single MG
	FixedIpAssignments []InlineResponse20019FixedIpAssignments `json:"fixedIpAssignments,omitempty"`
	// list of all reserved IP ranges for a single MG
	ReservedIpRanges []InlineResponse20019ReservedIpRanges `json:"reservedIpRanges,omitempty"`
}

// NewInlineResponse20019 instantiates a new InlineResponse20019 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20019() *InlineResponse20019 {
	this := InlineResponse20019{}
	return &this
}

// NewInlineResponse20019WithDefaults instantiates a new InlineResponse20019 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20019WithDefaults() *InlineResponse20019 {
	this := InlineResponse20019{}
	return &this
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *InlineResponse20019) GetDeviceName() string {
	if o == nil || isNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019) GetDeviceNameOk() (*string, bool) {
	if o == nil || isNil(o.DeviceName) {
    return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *InlineResponse20019) HasDeviceName() bool {
	if o != nil && !isNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *InlineResponse20019) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceLanIp returns the DeviceLanIp field value if set, zero value otherwise.
func (o *InlineResponse20019) GetDeviceLanIp() string {
	if o == nil || isNil(o.DeviceLanIp) {
		var ret string
		return ret
	}
	return *o.DeviceLanIp
}

// GetDeviceLanIpOk returns a tuple with the DeviceLanIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019) GetDeviceLanIpOk() (*string, bool) {
	if o == nil || isNil(o.DeviceLanIp) {
    return nil, false
	}
	return o.DeviceLanIp, true
}

// HasDeviceLanIp returns a boolean if a field has been set.
func (o *InlineResponse20019) HasDeviceLanIp() bool {
	if o != nil && !isNil(o.DeviceLanIp) {
		return true
	}

	return false
}

// SetDeviceLanIp gets a reference to the given string and assigns it to the DeviceLanIp field.
func (o *InlineResponse20019) SetDeviceLanIp(v string) {
	o.DeviceLanIp = &v
}

// GetDeviceSubnet returns the DeviceSubnet field value if set, zero value otherwise.
func (o *InlineResponse20019) GetDeviceSubnet() string {
	if o == nil || isNil(o.DeviceSubnet) {
		var ret string
		return ret
	}
	return *o.DeviceSubnet
}

// GetDeviceSubnetOk returns a tuple with the DeviceSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019) GetDeviceSubnetOk() (*string, bool) {
	if o == nil || isNil(o.DeviceSubnet) {
    return nil, false
	}
	return o.DeviceSubnet, true
}

// HasDeviceSubnet returns a boolean if a field has been set.
func (o *InlineResponse20019) HasDeviceSubnet() bool {
	if o != nil && !isNil(o.DeviceSubnet) {
		return true
	}

	return false
}

// SetDeviceSubnet gets a reference to the given string and assigns it to the DeviceSubnet field.
func (o *InlineResponse20019) SetDeviceSubnet(v string) {
	o.DeviceSubnet = &v
}

// GetFixedIpAssignments returns the FixedIpAssignments field value if set, zero value otherwise.
func (o *InlineResponse20019) GetFixedIpAssignments() []InlineResponse20019FixedIpAssignments {
	if o == nil || isNil(o.FixedIpAssignments) {
		var ret []InlineResponse20019FixedIpAssignments
		return ret
	}
	return o.FixedIpAssignments
}

// GetFixedIpAssignmentsOk returns a tuple with the FixedIpAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019) GetFixedIpAssignmentsOk() ([]InlineResponse20019FixedIpAssignments, bool) {
	if o == nil || isNil(o.FixedIpAssignments) {
    return nil, false
	}
	return o.FixedIpAssignments, true
}

// HasFixedIpAssignments returns a boolean if a field has been set.
func (o *InlineResponse20019) HasFixedIpAssignments() bool {
	if o != nil && !isNil(o.FixedIpAssignments) {
		return true
	}

	return false
}

// SetFixedIpAssignments gets a reference to the given []InlineResponse20019FixedIpAssignments and assigns it to the FixedIpAssignments field.
func (o *InlineResponse20019) SetFixedIpAssignments(v []InlineResponse20019FixedIpAssignments) {
	o.FixedIpAssignments = v
}

// GetReservedIpRanges returns the ReservedIpRanges field value if set, zero value otherwise.
func (o *InlineResponse20019) GetReservedIpRanges() []InlineResponse20019ReservedIpRanges {
	if o == nil || isNil(o.ReservedIpRanges) {
		var ret []InlineResponse20019ReservedIpRanges
		return ret
	}
	return o.ReservedIpRanges
}

// GetReservedIpRangesOk returns a tuple with the ReservedIpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019) GetReservedIpRangesOk() ([]InlineResponse20019ReservedIpRanges, bool) {
	if o == nil || isNil(o.ReservedIpRanges) {
    return nil, false
	}
	return o.ReservedIpRanges, true
}

// HasReservedIpRanges returns a boolean if a field has been set.
func (o *InlineResponse20019) HasReservedIpRanges() bool {
	if o != nil && !isNil(o.ReservedIpRanges) {
		return true
	}

	return false
}

// SetReservedIpRanges gets a reference to the given []InlineResponse20019ReservedIpRanges and assigns it to the ReservedIpRanges field.
func (o *InlineResponse20019) SetReservedIpRanges(v []InlineResponse20019ReservedIpRanges) {
	o.ReservedIpRanges = v
}

func (o InlineResponse20019) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DeviceName) {
		toSerialize["deviceName"] = o.DeviceName
	}
	if !isNil(o.DeviceLanIp) {
		toSerialize["deviceLanIp"] = o.DeviceLanIp
	}
	if !isNil(o.DeviceSubnet) {
		toSerialize["deviceSubnet"] = o.DeviceSubnet
	}
	if !isNil(o.FixedIpAssignments) {
		toSerialize["fixedIpAssignments"] = o.FixedIpAssignments
	}
	if !isNil(o.ReservedIpRanges) {
		toSerialize["reservedIpRanges"] = o.ReservedIpRanges
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20019 struct {
	value *InlineResponse20019
	isSet bool
}

func (v NullableInlineResponse20019) Get() *InlineResponse20019 {
	return v.value
}

func (v *NullableInlineResponse20019) Set(val *InlineResponse20019) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20019) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20019) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20019(val *InlineResponse20019) *NullableInlineResponse20019 {
	return &NullableInlineResponse20019{value: val, isSet: true}
}

func (v NullableInlineResponse20019) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20019) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


