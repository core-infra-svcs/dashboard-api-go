/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DoorLocksApiService DoorLocksApi service
type DoorLocksApiService service

type DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest struct {
	ctx context.Context
	ApiService *DoorLocksApiService
	organizationId string
	networkIds *[]string
	serial *string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// Filter by specified Network IDs
func (r DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest) NetworkIds(networkIds []string) DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.networkIds = &networkIds
	return r
}

// Filter by device serial
func (r DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest) Serial(serial string) DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.serial = &serial
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 500. Default is 50.
func (r DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest) PerPage(perPage int32) DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest) StartingAfter(startingAfter string) DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest) EndingBefore(endingBefore string) DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest) Execute() ([]InlineResponse20048DoorLocks, *http.Response, error) {
	return r.ApiService.GetOrganizationWirelessZigbeeDoorLocksExecute(r)
}

/*
GetOrganizationWirelessZigbeeDoorLocks Return the list of door locks for a network

Return the list of door locks for a network

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest
*/
func (a *DoorLocksApiService) GetOrganizationWirelessZigbeeDoorLocks(ctx context.Context, organizationId string) DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest {
	return DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse20048DoorLocks
func (a *DoorLocksApiService) GetOrganizationWirelessZigbeeDoorLocksExecute(r DoorLocksApiGetOrganizationWirelessZigbeeDoorLocksRequest) ([]InlineResponse20048DoorLocks, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse20048DoorLocks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DoorLocksApiService.GetOrganizationWirelessZigbeeDoorLocks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/doorLocks"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.serial != nil {
		localVarQueryParams.Add("serial", parameterToString(*r.serial, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest struct {
	ctx context.Context
	ApiService *DoorLocksApiService
	organizationId string
	doorLockId string
	updateOrganizationWirelessZigbeeDoorLock *InlineObject310
}

func (r DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest) UpdateOrganizationWirelessZigbeeDoorLock(updateOrganizationWirelessZigbeeDoorLock InlineObject310) DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest {
	r.updateOrganizationWirelessZigbeeDoorLock = &updateOrganizationWirelessZigbeeDoorLock
	return r
}

func (r DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest) Execute() (*InlineResponse20048DoorLocks, *http.Response, error) {
	return r.ApiService.UpdateOrganizationWirelessZigbeeDoorLockExecute(r)
}

/*
UpdateOrganizationWirelessZigbeeDoorLock Endpoint to batch update door locks params

Endpoint to batch update door locks params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param doorLockId Door lock ID
 @return DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest
*/
func (a *DoorLocksApiService) UpdateOrganizationWirelessZigbeeDoorLock(ctx context.Context, organizationId string, doorLockId string) DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest {
	return DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		doorLockId: doorLockId,
	}
}

// Execute executes the request
//  @return InlineResponse20048DoorLocks
func (a *DoorLocksApiService) UpdateOrganizationWirelessZigbeeDoorLockExecute(r DoorLocksApiUpdateOrganizationWirelessZigbeeDoorLockRequest) (*InlineResponse20048DoorLocks, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20048DoorLocks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DoorLocksApiService.UpdateOrganizationWirelessZigbeeDoorLock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/wireless/zigbee/doorLocks/{doorLockId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"doorLockId"+"}", url.PathEscape(parameterToString(r.doorLockId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationWirelessZigbeeDoorLock
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
