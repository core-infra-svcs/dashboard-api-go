/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 September, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.62.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200243CountsBySeverity struct for InlineResponse200243CountsBySeverity
type InlineResponse200243CountsBySeverity struct {
	// Severity Type
	Type string `json:"type"`
	// Total count of the given severity type
	Count int32 `json:"count"`
}

// NewInlineResponse200243CountsBySeverity instantiates a new InlineResponse200243CountsBySeverity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200243CountsBySeverity(type_ string, count int32) *InlineResponse200243CountsBySeverity {
	this := InlineResponse200243CountsBySeverity{}
	this.Type = type_
	this.Count = count
	return &this
}

// NewInlineResponse200243CountsBySeverityWithDefaults instantiates a new InlineResponse200243CountsBySeverity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200243CountsBySeverityWithDefaults() *InlineResponse200243CountsBySeverity {
	this := InlineResponse200243CountsBySeverity{}
	return &this
}

// GetType returns the Type field value
func (o *InlineResponse200243CountsBySeverity) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200243CountsBySeverity) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InlineResponse200243CountsBySeverity) SetType(v string) {
	o.Type = v
}

// GetCount returns the Count field value
func (o *InlineResponse200243CountsBySeverity) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200243CountsBySeverity) GetCountOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *InlineResponse200243CountsBySeverity) SetCount(v int32) {
	o.Count = v
}

func (o InlineResponse200243CountsBySeverity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200243CountsBySeverity struct {
	value *InlineResponse200243CountsBySeverity
	isSet bool
}

func (v NullableInlineResponse200243CountsBySeverity) Get() *InlineResponse200243CountsBySeverity {
	return v.value
}

func (v *NullableInlineResponse200243CountsBySeverity) Set(val *InlineResponse200243CountsBySeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200243CountsBySeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200243CountsBySeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200243CountsBySeverity(val *InlineResponse200243CountsBySeverity) *NullableInlineResponse200243CountsBySeverity {
	return &NullableInlineResponse200243CountsBySeverity{value: val, isSet: true}
}

func (v NullableInlineResponse200243CountsBySeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200243CountsBySeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


