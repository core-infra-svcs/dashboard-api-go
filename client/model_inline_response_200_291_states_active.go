/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.57.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200291StatesActive Data for active licenses
type InlineResponse200291StatesActive struct {
	// The number of active licenses
	Count *int32 `json:"count,omitempty"`
}

// NewInlineResponse200291StatesActive instantiates a new InlineResponse200291StatesActive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200291StatesActive() *InlineResponse200291StatesActive {
	this := InlineResponse200291StatesActive{}
	return &this
}

// NewInlineResponse200291StatesActiveWithDefaults instantiates a new InlineResponse200291StatesActive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200291StatesActiveWithDefaults() *InlineResponse200291StatesActive {
	this := InlineResponse200291StatesActive{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *InlineResponse200291StatesActive) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200291StatesActive) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
    return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *InlineResponse200291StatesActive) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *InlineResponse200291StatesActive) SetCount(v int32) {
	o.Count = &v
}

func (o InlineResponse200291StatesActive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200291StatesActive struct {
	value *InlineResponse200291StatesActive
	isSet bool
}

func (v NullableInlineResponse200291StatesActive) Get() *InlineResponse200291StatesActive {
	return v.value
}

func (v *NullableInlineResponse200291StatesActive) Set(val *InlineResponse200291StatesActive) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200291StatesActive) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200291StatesActive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200291StatesActive(val *InlineResponse200291StatesActive) *NullableInlineResponse200291StatesActive {
	return &NullableInlineResponse200291StatesActive{value: val, isSet: true}
}

func (v NullableInlineResponse200291StatesActive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200291StatesActive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


