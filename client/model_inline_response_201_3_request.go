/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 March, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.56.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse2013Request The parameters of the leds blink request
type InlineResponse2013Request struct {
	// Device serial number
	Serial *string `json:"serial,omitempty"`
	// The duration to blink leds in seconds
	Duration *int32 `json:"duration,omitempty"`
}

// NewInlineResponse2013Request instantiates a new InlineResponse2013Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2013Request() *InlineResponse2013Request {
	this := InlineResponse2013Request{}
	return &this
}

// NewInlineResponse2013RequestWithDefaults instantiates a new InlineResponse2013Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2013RequestWithDefaults() *InlineResponse2013Request {
	this := InlineResponse2013Request{}
	return &this
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *InlineResponse2013Request) GetSerial() string {
	if o == nil || isNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2013Request) GetSerialOk() (*string, bool) {
	if o == nil || isNil(o.Serial) {
    return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *InlineResponse2013Request) HasSerial() bool {
	if o != nil && !isNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *InlineResponse2013Request) SetSerial(v string) {
	o.Serial = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *InlineResponse2013Request) GetDuration() int32 {
	if o == nil || isNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2013Request) GetDurationOk() (*int32, bool) {
	if o == nil || isNil(o.Duration) {
    return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *InlineResponse2013Request) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *InlineResponse2013Request) SetDuration(v int32) {
	o.Duration = &v
}

func (o InlineResponse2013Request) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2013Request struct {
	value *InlineResponse2013Request
	isSet bool
}

func (v NullableInlineResponse2013Request) Get() *InlineResponse2013Request {
	return v.value
}

func (v *NullableInlineResponse2013Request) Set(val *InlineResponse2013Request) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2013Request) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2013Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2013Request(val *InlineResponse2013Request) *NullableInlineResponse2013Request {
	return &NullableInlineResponse2013Request{value: val, isSet: true}
}

func (v NullableInlineResponse2013Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2013Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


