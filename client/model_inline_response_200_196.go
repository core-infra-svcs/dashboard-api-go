/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200196 struct for InlineResponse200196
type InlineResponse200196 struct {
	// Whether to enable collection of location and scanning analytics
	Enabled *bool `json:"enabled,omitempty"`
	Api *InlineResponse200196Api `json:"api,omitempty"`
}

// NewInlineResponse200196 instantiates a new InlineResponse200196 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200196() *InlineResponse200196 {
	this := InlineResponse200196{}
	return &this
}

// NewInlineResponse200196WithDefaults instantiates a new InlineResponse200196 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200196WithDefaults() *InlineResponse200196 {
	this := InlineResponse200196{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InlineResponse200196) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200196) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InlineResponse200196) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InlineResponse200196) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *InlineResponse200196) GetApi() InlineResponse200196Api {
	if o == nil || isNil(o.Api) {
		var ret InlineResponse200196Api
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200196) GetApiOk() (*InlineResponse200196Api, bool) {
	if o == nil || isNil(o.Api) {
    return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *InlineResponse200196) HasApi() bool {
	if o != nil && !isNil(o.Api) {
		return true
	}

	return false
}

// SetApi gets a reference to the given InlineResponse200196Api and assigns it to the Api field.
func (o *InlineResponse200196) SetApi(v InlineResponse200196Api) {
	o.Api = &v
}

func (o InlineResponse200196) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Api) {
		toSerialize["api"] = o.Api
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200196 struct {
	value *InlineResponse200196
	isSet bool
}

func (v NullableInlineResponse200196) Get() *InlineResponse200196 {
	return v.value
}

func (v *NullableInlineResponse200196) Set(val *InlineResponse200196) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200196) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200196) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200196(val *InlineResponse200196) *NullableInlineResponse200196 {
	return &NullableInlineResponse200196{value: val, isSet: true}
}

func (v NullableInlineResponse200196) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200196) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


