/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 March, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.56.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AccountsApiService AccountsApi service
type AccountsApiService service

type AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest struct {
	ctx context.Context
	ApiService *AccountsApiService
	organizationId string
	createOrganizationCellularGatewayEsimsServiceProvidersAccount *InlineObject241
}

func (r AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) CreateOrganizationCellularGatewayEsimsServiceProvidersAccount(createOrganizationCellularGatewayEsimsServiceProvidersAccount InlineObject241) AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	r.createOrganizationCellularGatewayEsimsServiceProvidersAccount = &createOrganizationCellularGatewayEsimsServiceProvidersAccount
	return r
}

func (r AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) Execute() (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	return r.ApiService.CreateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r)
}

/*
CreateOrganizationCellularGatewayEsimsServiceProvidersAccount Add a service provider account.

Add a service provider account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest
*/
func (a *AccountsApiService) CreateOrganizationCellularGatewayEsimsServiceProvidersAccount(ctx context.Context, organizationId string) AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	return AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
func (a *AccountsApiService) CreateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r AccountsApiCreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.CreateOrganizationCellularGatewayEsimsServiceProvidersAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationCellularGatewayEsimsServiceProvidersAccount == nil {
		return localVarReturnValue, nil, reportError("createOrganizationCellularGatewayEsimsServiceProvidersAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationCellularGatewayEsimsServiceProvidersAccount
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest struct {
	ctx context.Context
	ApiService *AccountsApiService
	organizationId string
	accountId string
}

func (r AccountsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r)
}

/*
DeleteOrganizationCellularGatewayEsimsServiceProvidersAccount Remove a service provider account's integration with the Dashboard.

Remove a service provider account's integration with the Dashboard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param accountId Account ID
 @return AccountsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest
*/
func (a *AccountsApiService) DeleteOrganizationCellularGatewayEsimsServiceProvidersAccount(ctx context.Context, organizationId string, accountId string) AccountsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	return AccountsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
func (a *AccountsApiService) DeleteOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r AccountsApiDeleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.DeleteOrganizationCellularGatewayEsimsServiceProvidersAccount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest struct {
	ctx context.Context
	ApiService *AccountsApiService
	organizationId string
	accountIds *[]int32
}

// Optional parameter to filter the results by service provider account IDs.
func (r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest) AccountIds(accountIds []int32) AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest {
	r.accountIds = &accountIds
	return r
}

func (r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest) Execute() ([]InlineResponse200248, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsServiceProvidersAccounts Inventory of service provider accounts tied to the organization.

Inventory of service provider accounts tied to the organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest
*/
func (a *AccountsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccounts(ctx context.Context, organizationId string) AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest {
	return AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse200248
func (a *AccountsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsExecute(r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest) ([]InlineResponse200248, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse200248
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountIds != nil {
		localVarQueryParams.Add("accountIds", parameterToString(*r.accountIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest struct {
	ctx context.Context
	ApiService *AccountsApiService
	organizationId string
	accountIds *[]string
}

// Account IDs that communication plans will be fetched for
func (r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest) AccountIds(accountIds []string) AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest {
	r.accountIds = &accountIds
	return r
}

func (r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest) Execute() (*InlineResponse200249, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans The communication plans available for a given provider.

The communication plans available for a given provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest
*/
func (a *AccountsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans(ctx context.Context, organizationId string) AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest {
	return AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200249
func (a *AccountsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansExecute(r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest) (*InlineResponse200249, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200249
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/communicationPlans"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountIds == nil {
		return localVarReturnValue, nil, reportError("accountIds is required and must be specified")
	}

	localVarQueryParams.Add("accountIds", parameterToString(*r.accountIds, "csv"))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest struct {
	ctx context.Context
	ApiService *AccountsApiService
	organizationId string
	accountIds *[]string
}

// Account IDs that rate plans will be fetched for
func (r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest) AccountIds(accountIds []string) AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest {
	r.accountIds = &accountIds
	return r
}

func (r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest) Execute() (*InlineResponse200250, *http.Response, error) {
	return r.ApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansExecute(r)
}

/*
GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans The rate plans available for a given provider.

The rate plans available for a given provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest
*/
func (a *AccountsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans(ctx context.Context, organizationId string) AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest {
	return AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200250
func (a *AccountsApiService) GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansExecute(r AccountsApiGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest) (*InlineResponse200250, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200250
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/ratePlans"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountIds == nil {
		return localVarReturnValue, nil, reportError("accountIds is required and must be specified")
	}

	localVarQueryParams.Add("accountIds", parameterToString(*r.accountIds, "csv"))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest struct {
	ctx context.Context
	ApiService *AccountsApiService
	organizationId string
	accountId string
	updateOrganizationCellularGatewayEsimsServiceProvidersAccount *InlineObject242
}

func (r AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount(updateOrganizationCellularGatewayEsimsServiceProvidersAccount InlineObject242) AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	r.updateOrganizationCellularGatewayEsimsServiceProvidersAccount = &updateOrganizationCellularGatewayEsimsServiceProvidersAccount
	return r
}

func (r AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) Execute() (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	return r.ApiService.UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r)
}

/*
UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount Edit service provider account info stored in Meraki's database.

Edit service provider account info stored in Meraki's database.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @param accountId Account ID
 @return AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest
*/
func (a *AccountsApiService) UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount(ctx context.Context, organizationId string, accountId string) AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest {
	return AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
func (a *AccountsApiService) UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountExecute(r AccountsApiUpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest) (*OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrganizationIdCellularGatewayEsimsServiceProvidersAccountsItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.UpdateOrganizationCellularGatewayEsimsServiceProvidersAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrganizationCellularGatewayEsimsServiceProvidersAccount
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
