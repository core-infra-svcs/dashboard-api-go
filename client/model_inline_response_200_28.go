/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 January, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.54.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// InlineResponse20028 struct for InlineResponse20028
type InlineResponse20028 struct {
	// Start time of the sample
	StartTime *time.Time `json:"startTime,omitempty"`
	// End time of the sample
	EndTime *time.Time `json:"endTime,omitempty"`
	// Percentage of packets lost
	LossPercent *float32 `json:"lossPercent,omitempty"`
	// Latency in milliseconds
	LatencyMs *float32 `json:"latencyMs,omitempty"`
	// Number of useful information bits delivered
	Goodput *int32 `json:"goodput,omitempty"`
	// Jitter, in milliseconds
	Jitter *float32 `json:"jitter,omitempty"`
}

// NewInlineResponse20028 instantiates a new InlineResponse20028 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20028() *InlineResponse20028 {
	this := InlineResponse20028{}
	return &this
}

// NewInlineResponse20028WithDefaults instantiates a new InlineResponse20028 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20028WithDefaults() *InlineResponse20028 {
	this := InlineResponse20028{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *InlineResponse20028) GetStartTime() time.Time {
	if o == nil || isNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20028) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.StartTime) {
    return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *InlineResponse20028) HasStartTime() bool {
	if o != nil && !isNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *InlineResponse20028) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *InlineResponse20028) GetEndTime() time.Time {
	if o == nil || isNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20028) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.EndTime) {
    return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *InlineResponse20028) HasEndTime() bool {
	if o != nil && !isNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *InlineResponse20028) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetLossPercent returns the LossPercent field value if set, zero value otherwise.
func (o *InlineResponse20028) GetLossPercent() float32 {
	if o == nil || isNil(o.LossPercent) {
		var ret float32
		return ret
	}
	return *o.LossPercent
}

// GetLossPercentOk returns a tuple with the LossPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20028) GetLossPercentOk() (*float32, bool) {
	if o == nil || isNil(o.LossPercent) {
    return nil, false
	}
	return o.LossPercent, true
}

// HasLossPercent returns a boolean if a field has been set.
func (o *InlineResponse20028) HasLossPercent() bool {
	if o != nil && !isNil(o.LossPercent) {
		return true
	}

	return false
}

// SetLossPercent gets a reference to the given float32 and assigns it to the LossPercent field.
func (o *InlineResponse20028) SetLossPercent(v float32) {
	o.LossPercent = &v
}

// GetLatencyMs returns the LatencyMs field value if set, zero value otherwise.
func (o *InlineResponse20028) GetLatencyMs() float32 {
	if o == nil || isNil(o.LatencyMs) {
		var ret float32
		return ret
	}
	return *o.LatencyMs
}

// GetLatencyMsOk returns a tuple with the LatencyMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20028) GetLatencyMsOk() (*float32, bool) {
	if o == nil || isNil(o.LatencyMs) {
    return nil, false
	}
	return o.LatencyMs, true
}

// HasLatencyMs returns a boolean if a field has been set.
func (o *InlineResponse20028) HasLatencyMs() bool {
	if o != nil && !isNil(o.LatencyMs) {
		return true
	}

	return false
}

// SetLatencyMs gets a reference to the given float32 and assigns it to the LatencyMs field.
func (o *InlineResponse20028) SetLatencyMs(v float32) {
	o.LatencyMs = &v
}

// GetGoodput returns the Goodput field value if set, zero value otherwise.
func (o *InlineResponse20028) GetGoodput() int32 {
	if o == nil || isNil(o.Goodput) {
		var ret int32
		return ret
	}
	return *o.Goodput
}

// GetGoodputOk returns a tuple with the Goodput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20028) GetGoodputOk() (*int32, bool) {
	if o == nil || isNil(o.Goodput) {
    return nil, false
	}
	return o.Goodput, true
}

// HasGoodput returns a boolean if a field has been set.
func (o *InlineResponse20028) HasGoodput() bool {
	if o != nil && !isNil(o.Goodput) {
		return true
	}

	return false
}

// SetGoodput gets a reference to the given int32 and assigns it to the Goodput field.
func (o *InlineResponse20028) SetGoodput(v int32) {
	o.Goodput = &v
}

// GetJitter returns the Jitter field value if set, zero value otherwise.
func (o *InlineResponse20028) GetJitter() float32 {
	if o == nil || isNil(o.Jitter) {
		var ret float32
		return ret
	}
	return *o.Jitter
}

// GetJitterOk returns a tuple with the Jitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20028) GetJitterOk() (*float32, bool) {
	if o == nil || isNil(o.Jitter) {
    return nil, false
	}
	return o.Jitter, true
}

// HasJitter returns a boolean if a field has been set.
func (o *InlineResponse20028) HasJitter() bool {
	if o != nil && !isNil(o.Jitter) {
		return true
	}

	return false
}

// SetJitter gets a reference to the given float32 and assigns it to the Jitter field.
func (o *InlineResponse20028) SetJitter(v float32) {
	o.Jitter = &v
}

func (o InlineResponse20028) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !isNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !isNil(o.LossPercent) {
		toSerialize["lossPercent"] = o.LossPercent
	}
	if !isNil(o.LatencyMs) {
		toSerialize["latencyMs"] = o.LatencyMs
	}
	if !isNil(o.Goodput) {
		toSerialize["goodput"] = o.Goodput
	}
	if !isNil(o.Jitter) {
		toSerialize["jitter"] = o.Jitter
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20028 struct {
	value *InlineResponse20028
	isSet bool
}

func (v NullableInlineResponse20028) Get() *InlineResponse20028 {
	return v.value
}

func (v *NullableInlineResponse20028) Set(val *InlineResponse20028) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20028) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20028) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20028(val *InlineResponse20028) *NullableInlineResponse20028 {
	return &NullableInlineResponse20028{value: val, isSet: true}
}

func (v NullableInlineResponse20028) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20028) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


