/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200241Counts Counts of alerts on the organization
type InlineResponse200241Counts struct {
	// Total number of alerts on the organization
	Total int32 `json:"total"`
	// Counts of alerts on organization by severity
	BySeverity []InlineResponse200241CountsBySeverity `json:"bySeverity"`
}

// NewInlineResponse200241Counts instantiates a new InlineResponse200241Counts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200241Counts(total int32, bySeverity []InlineResponse200241CountsBySeverity) *InlineResponse200241Counts {
	this := InlineResponse200241Counts{}
	this.Total = total
	this.BySeverity = bySeverity
	return &this
}

// NewInlineResponse200241CountsWithDefaults instantiates a new InlineResponse200241Counts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200241CountsWithDefaults() *InlineResponse200241Counts {
	this := InlineResponse200241Counts{}
	return &this
}

// GetTotal returns the Total field value
func (o *InlineResponse200241Counts) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200241Counts) GetTotalOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *InlineResponse200241Counts) SetTotal(v int32) {
	o.Total = v
}

// GetBySeverity returns the BySeverity field value
func (o *InlineResponse200241Counts) GetBySeverity() []InlineResponse200241CountsBySeverity {
	if o == nil {
		var ret []InlineResponse200241CountsBySeverity
		return ret
	}

	return o.BySeverity
}

// GetBySeverityOk returns a tuple with the BySeverity field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200241Counts) GetBySeverityOk() ([]InlineResponse200241CountsBySeverity, bool) {
	if o == nil {
    return nil, false
	}
	return o.BySeverity, true
}

// SetBySeverity sets field value
func (o *InlineResponse200241Counts) SetBySeverity(v []InlineResponse200241CountsBySeverity) {
	o.BySeverity = v
}

func (o InlineResponse200241Counts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["bySeverity"] = o.BySeverity
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200241Counts struct {
	value *InlineResponse200241Counts
	isSet bool
}

func (v NullableInlineResponse200241Counts) Get() *InlineResponse200241Counts {
	return v.value
}

func (v *NullableInlineResponse200241Counts) Set(val *InlineResponse200241Counts) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200241Counts) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200241Counts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200241Counts(val *InlineResponse200241Counts) *NullableInlineResponse200241Counts {
	return &NullableInlineResponse200241Counts{value: val, isSet: true}
}

func (v NullableInlineResponse200241Counts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200241Counts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


