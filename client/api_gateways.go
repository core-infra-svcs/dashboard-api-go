/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 September, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.62.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// GatewaysApiService GatewaysApi service
type GatewaysApiService service

type GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest struct {
	ctx context.Context
	ApiService *GatewaysApiService
	organizationId string
	sensorSerials *[]string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// List of sensor serials to filter connectivity data by sensor.
func (r GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest) SensorSerials(sensorSerials []string) GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest {
	r.sensorSerials = &sensorSerials
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
func (r GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest) PerPage(perPage int32) GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest) StartingAfter(startingAfter string) GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest) EndingBefore(endingBefore string) GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest) Execute() (*InlineResponse200318, *http.Response, error) {
	return r.ApiService.GetOrganizationSensorGatewaysConnectionsLatestExecute(r)
}

/*
GetOrganizationSensorGatewaysConnectionsLatest Returns latest sensor-gateway connectivity data.

Returns latest sensor-gateway connectivity data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest
*/
func (a *GatewaysApiService) GetOrganizationSensorGatewaysConnectionsLatest(ctx context.Context, organizationId string) GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest {
	return GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200318
func (a *GatewaysApiService) GetOrganizationSensorGatewaysConnectionsLatestExecute(r GatewaysApiGetOrganizationSensorGatewaysConnectionsLatestRequest) (*InlineResponse200318, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200318
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GatewaysApiService.GetOrganizationSensorGatewaysConnectionsLatest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/sensor/gateways/connections/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sensorSerials != nil {
		localVarQueryParams.Add("sensorSerials", parameterToString(*r.sensorSerials, "csv"))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
