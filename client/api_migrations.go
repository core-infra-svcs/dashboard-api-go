/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MigrationsApiService MigrationsApi service
type MigrationsApiService service

type MigrationsApiCreateOrganizationDevicesControllerMigrationRequest struct {
	ctx context.Context
	ApiService *MigrationsApiService
	organizationId string
	createOrganizationDevicesControllerMigration *InlineObject255
}

func (r MigrationsApiCreateOrganizationDevicesControllerMigrationRequest) CreateOrganizationDevicesControllerMigration(createOrganizationDevicesControllerMigration InlineObject255) MigrationsApiCreateOrganizationDevicesControllerMigrationRequest {
	r.createOrganizationDevicesControllerMigration = &createOrganizationDevicesControllerMigration
	return r
}

func (r MigrationsApiCreateOrganizationDevicesControllerMigrationRequest) Execute() ([]InlineResponse200273Items, *http.Response, error) {
	return r.ApiService.CreateOrganizationDevicesControllerMigrationExecute(r)
}

/*
CreateOrganizationDevicesControllerMigration Migrate devices to another controller or management mode

Migrate devices to another controller or management mode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return MigrationsApiCreateOrganizationDevicesControllerMigrationRequest
*/
func (a *MigrationsApiService) CreateOrganizationDevicesControllerMigration(ctx context.Context, organizationId string) MigrationsApiCreateOrganizationDevicesControllerMigrationRequest {
	return MigrationsApiCreateOrganizationDevicesControllerMigrationRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return []InlineResponse200273Items
func (a *MigrationsApiService) CreateOrganizationDevicesControllerMigrationExecute(r MigrationsApiCreateOrganizationDevicesControllerMigrationRequest) ([]InlineResponse200273Items, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InlineResponse200273Items
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsApiService.CreateOrganizationDevicesControllerMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/devices/controller/migrations"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrganizationDevicesControllerMigration == nil {
		return localVarReturnValue, nil, reportError("createOrganizationDevicesControllerMigration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrganizationDevicesControllerMigration
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MigrationsApiGetOrganizationDevicesControllerMigrationsRequest struct {
	ctx context.Context
	ApiService *MigrationsApiService
	organizationId string
	serials *[]string
	networkIds *[]string
	target *string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// A list of Meraki Serials for which to retrieve migrations
func (r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) Serials(serials []string) MigrationsApiGetOrganizationDevicesControllerMigrationsRequest {
	r.serials = &serials
	return r
}

// Filter device migrations by network IDs
func (r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) NetworkIds(networkIds []string) MigrationsApiGetOrganizationDevicesControllerMigrationsRequest {
	r.networkIds = &networkIds
	return r
}

// Filter device migrations by target destination
func (r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) Target(target string) MigrationsApiGetOrganizationDevicesControllerMigrationsRequest {
	r.target = &target
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
func (r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) PerPage(perPage int32) MigrationsApiGetOrganizationDevicesControllerMigrationsRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) StartingAfter(startingAfter string) MigrationsApiGetOrganizationDevicesControllerMigrationsRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) EndingBefore(endingBefore string) MigrationsApiGetOrganizationDevicesControllerMigrationsRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) Execute() (*InlineResponse200273, *http.Response, error) {
	return r.ApiService.GetOrganizationDevicesControllerMigrationsExecute(r)
}

/*
GetOrganizationDevicesControllerMigrations Retrieve device migration statuses in an organization

Retrieve device migration statuses in an organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return MigrationsApiGetOrganizationDevicesControllerMigrationsRequest
*/
func (a *MigrationsApiService) GetOrganizationDevicesControllerMigrations(ctx context.Context, organizationId string) MigrationsApiGetOrganizationDevicesControllerMigrationsRequest {
	return MigrationsApiGetOrganizationDevicesControllerMigrationsRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200273
func (a *MigrationsApiService) GetOrganizationDevicesControllerMigrationsExecute(r MigrationsApiGetOrganizationDevicesControllerMigrationsRequest) (*InlineResponse200273, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200273
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsApiService.GetOrganizationDevicesControllerMigrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/devices/controller/migrations"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serials != nil {
		localVarQueryParams.Add("serials", parameterToString(*r.serials, "csv"))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.target != nil {
		localVarQueryParams.Add("target", parameterToString(*r.target, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
