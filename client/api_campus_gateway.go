/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 July, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.60.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// CampusGatewayApiService CampusGatewayApi service
type CampusGatewayApiService service

type CampusGatewayApiCreateNetworkCampusGatewayClusterRequest struct {
	ctx context.Context
	ApiService *CampusGatewayApiService
	networkId string
	createNetworkCampusGatewayCluster *InlineObject85
}

func (r CampusGatewayApiCreateNetworkCampusGatewayClusterRequest) CreateNetworkCampusGatewayCluster(createNetworkCampusGatewayCluster InlineObject85) CampusGatewayApiCreateNetworkCampusGatewayClusterRequest {
	r.createNetworkCampusGatewayCluster = &createNetworkCampusGatewayCluster
	return r
}

func (r CampusGatewayApiCreateNetworkCampusGatewayClusterRequest) Execute() (*InlineResponse20110, *http.Response, error) {
	return r.ApiService.CreateNetworkCampusGatewayClusterExecute(r)
}

/*
CreateNetworkCampusGatewayCluster Create a cluster and add campus gateways to it

Create a cluster and add campus gateways to it

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId Network ID
 @return CampusGatewayApiCreateNetworkCampusGatewayClusterRequest
*/
func (a *CampusGatewayApiService) CreateNetworkCampusGatewayCluster(ctx context.Context, networkId string) CampusGatewayApiCreateNetworkCampusGatewayClusterRequest {
	return CampusGatewayApiCreateNetworkCampusGatewayClusterRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
	}
}

// Execute executes the request
//  @return InlineResponse20110
func (a *CampusGatewayApiService) CreateNetworkCampusGatewayClusterExecute(r CampusGatewayApiCreateNetworkCampusGatewayClusterRequest) (*InlineResponse20110, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20110
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampusGatewayApiService.CreateNetworkCampusGatewayCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networks/{networkId}/campusGateway/clusters"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterToString(r.networkId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNetworkCampusGatewayCluster == nil {
		return localVarReturnValue, nil, reportError("createNetworkCampusGatewayCluster is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNetworkCampusGatewayCluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampusGatewayApiGetOrganizationCampusGatewayClustersRequest struct {
	ctx context.Context
	ApiService *CampusGatewayApiService
	organizationId string
	networkIds *[]string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// Networks for which information should be gathered.
func (r CampusGatewayApiGetOrganizationCampusGatewayClustersRequest) NetworkIds(networkIds []string) CampusGatewayApiGetOrganizationCampusGatewayClustersRequest {
	r.networkIds = &networkIds
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 100. Default is 50.
func (r CampusGatewayApiGetOrganizationCampusGatewayClustersRequest) PerPage(perPage int32) CampusGatewayApiGetOrganizationCampusGatewayClustersRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r CampusGatewayApiGetOrganizationCampusGatewayClustersRequest) StartingAfter(startingAfter string) CampusGatewayApiGetOrganizationCampusGatewayClustersRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r CampusGatewayApiGetOrganizationCampusGatewayClustersRequest) EndingBefore(endingBefore string) CampusGatewayApiGetOrganizationCampusGatewayClustersRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r CampusGatewayApiGetOrganizationCampusGatewayClustersRequest) Execute() (*InlineResponse200252, *http.Response, error) {
	return r.ApiService.GetOrganizationCampusGatewayClustersExecute(r)
}

/*
GetOrganizationCampusGatewayClusters Get the details of campus gateway clusters

Get the details of campus gateway clusters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return CampusGatewayApiGetOrganizationCampusGatewayClustersRequest
*/
func (a *CampusGatewayApiService) GetOrganizationCampusGatewayClusters(ctx context.Context, organizationId string) CampusGatewayApiGetOrganizationCampusGatewayClustersRequest {
	return CampusGatewayApiGetOrganizationCampusGatewayClustersRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200252
func (a *CampusGatewayApiService) GetOrganizationCampusGatewayClustersExecute(r CampusGatewayApiGetOrganizationCampusGatewayClustersRequest) (*InlineResponse200252, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200252
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampusGatewayApiService.GetOrganizationCampusGatewayClusters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/campusGateway/clusters"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest struct {
	ctx context.Context
	ApiService *CampusGatewayApiService
	organizationId string
	serials *[]string
	perPage *int32
	startingAfter *string
	endingBefore *string
}

// A list of serial numbers. The returned devices will be filtered to only include these serials.
func (r CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest) Serials(serials []string) CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest {
	r.serials = &serials
	return r
}

// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
func (r CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest) PerPage(perPage int32) CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest {
	r.perPage = &perPage
	return r
}

// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest) StartingAfter(startingAfter string) CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest {
	r.startingAfter = &startingAfter
	return r
}

// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest) EndingBefore(endingBefore string) CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest {
	r.endingBefore = &endingBefore
	return r
}

func (r CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest) Execute() (*InlineResponse200253, *http.Response, error) {
	return r.ApiService.GetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceExecute(r)
}

/*
GetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDevice Uplink overrides configured locally on Campus Gateway devices in an organization.

Uplink overrides configured locally on Campus Gateway devices in an organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId Organization ID
 @return CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest
*/
func (a *CampusGatewayApiService) GetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDevice(ctx context.Context, organizationId string) CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest {
	return CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return InlineResponse200253
func (a *CampusGatewayApiService) GetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceExecute(r CampusGatewayApiGetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDeviceRequest) (*InlineResponse200253, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse200253
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampusGatewayApiService.GetOrganizationCampusGatewayDevicesUplinksLocalOverridesByDevice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/campusGateway/devices/uplinks/localOverrides/byDevice"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serials != nil {
		localVarQueryParams.Add("serials", parameterToString(*r.serials, "csv"))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest struct {
	ctx context.Context
	ApiService *CampusGatewayApiService
	networkId string
	clusterId string
	updateNetworkCampusGatewayCluster *InlineObject86
}

func (r CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest) UpdateNetworkCampusGatewayCluster(updateNetworkCampusGatewayCluster InlineObject86) CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest {
	r.updateNetworkCampusGatewayCluster = &updateNetworkCampusGatewayCluster
	return r
}

func (r CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest) Execute() (*InlineResponse20110, *http.Response, error) {
	return r.ApiService.UpdateNetworkCampusGatewayClusterExecute(r)
}

/*
UpdateNetworkCampusGatewayCluster Update a cluster and add/remove campus gateways to/from it

Update a cluster and add/remove campus gateways to/from it

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId Network ID
 @param clusterId Cluster ID
 @return CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest
*/
func (a *CampusGatewayApiService) UpdateNetworkCampusGatewayCluster(ctx context.Context, networkId string, clusterId string) CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest {
	return CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		clusterId: clusterId,
	}
}

// Execute executes the request
//  @return InlineResponse20110
func (a *CampusGatewayApiService) UpdateNetworkCampusGatewayClusterExecute(r CampusGatewayApiUpdateNetworkCampusGatewayClusterRequest) (*InlineResponse20110, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InlineResponse20110
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampusGatewayApiService.UpdateNetworkCampusGatewayCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networks/{networkId}/campusGateway/clusters/{clusterId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterToString(r.networkId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterToString(r.clusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNetworkCampusGatewayCluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
