/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 October, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.63.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200348Data A breakdown of how many kilobytes have passed through this port during the interval timespan.
type InlineResponse200348Data struct {
	Usage *InlineResponse200348DataUsage `json:"usage,omitempty"`
}

// NewInlineResponse200348Data instantiates a new InlineResponse200348Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200348Data() *InlineResponse200348Data {
	this := InlineResponse200348Data{}
	return &this
}

// NewInlineResponse200348DataWithDefaults instantiates a new InlineResponse200348Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200348DataWithDefaults() *InlineResponse200348Data {
	this := InlineResponse200348Data{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *InlineResponse200348Data) GetUsage() InlineResponse200348DataUsage {
	if o == nil || isNil(o.Usage) {
		var ret InlineResponse200348DataUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200348Data) GetUsageOk() (*InlineResponse200348DataUsage, bool) {
	if o == nil || isNil(o.Usage) {
    return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *InlineResponse200348Data) HasUsage() bool {
	if o != nil && !isNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given InlineResponse200348DataUsage and assigns it to the Usage field.
func (o *InlineResponse200348Data) SetUsage(v InlineResponse200348DataUsage) {
	o.Usage = &v
}

func (o InlineResponse200348Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200348Data struct {
	value *InlineResponse200348Data
	isSet bool
}

func (v NullableInlineResponse200348Data) Get() *InlineResponse200348Data {
	return v.value
}

func (v *NullableInlineResponse200348Data) Set(val *InlineResponse200348Data) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200348Data) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200348Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200348Data(val *InlineResponse200348Data) *NullableInlineResponse200348Data {
	return &NullableInlineResponse200348Data{value: val, isSet: true}
}

func (v NullableInlineResponse200348Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200348Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


