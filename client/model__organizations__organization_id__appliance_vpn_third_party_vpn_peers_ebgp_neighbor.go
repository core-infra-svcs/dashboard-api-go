/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor [optional] The BGP neighbor configuration for the VPN peer. Supported only for MX 19.1 and above.
type OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor struct {
	// IPv4/IPv6 address of the neighbor
	NeighborIp *string `json:"neighborIp,omitempty"`
	// The IP version of the neighbor
	IpVersion *int32 `json:"ipVersion,omitempty"`
	// Remote ASN of the neighbor. The remote ASN must be an integer between 1 and 4294967295.
	RemoteAsNumber *int32 `json:"remoteAsNumber,omitempty"`
	// The eBGP hold timer in seconds for each neighbor. The eBGP hold timer must be an integer between 12 and 240.
	EbgpHoldTimer *int32 `json:"ebgpHoldTimer,omitempty"`
	// Configure this if the neighbor is not adjacent. The eBGP multi-hop must be an integer between 1 and 255.
	EbgpMultihop *int32 `json:"ebgpMultihop,omitempty"`
	// Source IP of eBGP neighbor
	SourceIp *string `json:"sourceIp,omitempty"`
	// Prepends the AS_PATH BGP Attribute associated with routes received from the remote peer. Configurable value of ASNs to prepend. Length of the array may not exceed 10, and each ASN in the array must be an integer between 1 and 4294967295. AS_PATH is 4th in the decision tree when identical routes from multiple peers exist.
	PathPrepend []int32 `json:"pathPrepend,omitempty"`
	// Configures the local metric associated with routes received from the remote peer. Routes from peers with lower metrics are will be preferred. Must be an integer between 0 and 4294967295. MED is 6th in the decision tree when identical routes from multiple peers exist.
	MultiExitDiscriminator *int32 `json:"multiExitDiscriminator,omitempty"`
	// Configures the local metric associated with routes received from the remote peer. Routes from peers with lower metrics are will be preferred. Must be an integer between 0 and 4294967295. MED is 6th in the decision tree when identical routes from multiple peers exist.
	Weight *int32 `json:"weight,omitempty"`
}

// NewOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor instantiates a new OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor() *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor {
	this := OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor{}
	return &this
}

// NewOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighborWithDefaults instantiates a new OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighborWithDefaults() *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor {
	this := OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor{}
	return &this
}

// GetNeighborIp returns the NeighborIp field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetNeighborIp() string {
	if o == nil || isNil(o.NeighborIp) {
		var ret string
		return ret
	}
	return *o.NeighborIp
}

// GetNeighborIpOk returns a tuple with the NeighborIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetNeighborIpOk() (*string, bool) {
	if o == nil || isNil(o.NeighborIp) {
    return nil, false
	}
	return o.NeighborIp, true
}

// HasNeighborIp returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasNeighborIp() bool {
	if o != nil && !isNil(o.NeighborIp) {
		return true
	}

	return false
}

// SetNeighborIp gets a reference to the given string and assigns it to the NeighborIp field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetNeighborIp(v string) {
	o.NeighborIp = &v
}

// GetIpVersion returns the IpVersion field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetIpVersion() int32 {
	if o == nil || isNil(o.IpVersion) {
		var ret int32
		return ret
	}
	return *o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetIpVersionOk() (*int32, bool) {
	if o == nil || isNil(o.IpVersion) {
    return nil, false
	}
	return o.IpVersion, true
}

// HasIpVersion returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasIpVersion() bool {
	if o != nil && !isNil(o.IpVersion) {
		return true
	}

	return false
}

// SetIpVersion gets a reference to the given int32 and assigns it to the IpVersion field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetIpVersion(v int32) {
	o.IpVersion = &v
}

// GetRemoteAsNumber returns the RemoteAsNumber field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetRemoteAsNumber() int32 {
	if o == nil || isNil(o.RemoteAsNumber) {
		var ret int32
		return ret
	}
	return *o.RemoteAsNumber
}

// GetRemoteAsNumberOk returns a tuple with the RemoteAsNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetRemoteAsNumberOk() (*int32, bool) {
	if o == nil || isNil(o.RemoteAsNumber) {
    return nil, false
	}
	return o.RemoteAsNumber, true
}

// HasRemoteAsNumber returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasRemoteAsNumber() bool {
	if o != nil && !isNil(o.RemoteAsNumber) {
		return true
	}

	return false
}

// SetRemoteAsNumber gets a reference to the given int32 and assigns it to the RemoteAsNumber field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetRemoteAsNumber(v int32) {
	o.RemoteAsNumber = &v
}

// GetEbgpHoldTimer returns the EbgpHoldTimer field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetEbgpHoldTimer() int32 {
	if o == nil || isNil(o.EbgpHoldTimer) {
		var ret int32
		return ret
	}
	return *o.EbgpHoldTimer
}

// GetEbgpHoldTimerOk returns a tuple with the EbgpHoldTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetEbgpHoldTimerOk() (*int32, bool) {
	if o == nil || isNil(o.EbgpHoldTimer) {
    return nil, false
	}
	return o.EbgpHoldTimer, true
}

// HasEbgpHoldTimer returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasEbgpHoldTimer() bool {
	if o != nil && !isNil(o.EbgpHoldTimer) {
		return true
	}

	return false
}

// SetEbgpHoldTimer gets a reference to the given int32 and assigns it to the EbgpHoldTimer field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetEbgpHoldTimer(v int32) {
	o.EbgpHoldTimer = &v
}

// GetEbgpMultihop returns the EbgpMultihop field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetEbgpMultihop() int32 {
	if o == nil || isNil(o.EbgpMultihop) {
		var ret int32
		return ret
	}
	return *o.EbgpMultihop
}

// GetEbgpMultihopOk returns a tuple with the EbgpMultihop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetEbgpMultihopOk() (*int32, bool) {
	if o == nil || isNil(o.EbgpMultihop) {
    return nil, false
	}
	return o.EbgpMultihop, true
}

// HasEbgpMultihop returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasEbgpMultihop() bool {
	if o != nil && !isNil(o.EbgpMultihop) {
		return true
	}

	return false
}

// SetEbgpMultihop gets a reference to the given int32 and assigns it to the EbgpMultihop field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetEbgpMultihop(v int32) {
	o.EbgpMultihop = &v
}

// GetSourceIp returns the SourceIp field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetSourceIp() string {
	if o == nil || isNil(o.SourceIp) {
		var ret string
		return ret
	}
	return *o.SourceIp
}

// GetSourceIpOk returns a tuple with the SourceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetSourceIpOk() (*string, bool) {
	if o == nil || isNil(o.SourceIp) {
    return nil, false
	}
	return o.SourceIp, true
}

// HasSourceIp returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasSourceIp() bool {
	if o != nil && !isNil(o.SourceIp) {
		return true
	}

	return false
}

// SetSourceIp gets a reference to the given string and assigns it to the SourceIp field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetSourceIp(v string) {
	o.SourceIp = &v
}

// GetPathPrepend returns the PathPrepend field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetPathPrepend() []int32 {
	if o == nil || isNil(o.PathPrepend) {
		var ret []int32
		return ret
	}
	return o.PathPrepend
}

// GetPathPrependOk returns a tuple with the PathPrepend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetPathPrependOk() ([]int32, bool) {
	if o == nil || isNil(o.PathPrepend) {
    return nil, false
	}
	return o.PathPrepend, true
}

// HasPathPrepend returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasPathPrepend() bool {
	if o != nil && !isNil(o.PathPrepend) {
		return true
	}

	return false
}

// SetPathPrepend gets a reference to the given []int32 and assigns it to the PathPrepend field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetPathPrepend(v []int32) {
	o.PathPrepend = v
}

// GetMultiExitDiscriminator returns the MultiExitDiscriminator field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetMultiExitDiscriminator() int32 {
	if o == nil || isNil(o.MultiExitDiscriminator) {
		var ret int32
		return ret
	}
	return *o.MultiExitDiscriminator
}

// GetMultiExitDiscriminatorOk returns a tuple with the MultiExitDiscriminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetMultiExitDiscriminatorOk() (*int32, bool) {
	if o == nil || isNil(o.MultiExitDiscriminator) {
    return nil, false
	}
	return o.MultiExitDiscriminator, true
}

// HasMultiExitDiscriminator returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasMultiExitDiscriminator() bool {
	if o != nil && !isNil(o.MultiExitDiscriminator) {
		return true
	}

	return false
}

// SetMultiExitDiscriminator gets a reference to the given int32 and assigns it to the MultiExitDiscriminator field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetMultiExitDiscriminator(v int32) {
	o.MultiExitDiscriminator = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetWeight() int32 {
	if o == nil || isNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) GetWeightOk() (*int32, bool) {
	if o == nil || isNil(o.Weight) {
    return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) HasWeight() bool {
	if o != nil && !isNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) SetWeight(v int32) {
	o.Weight = &v
}

func (o OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NeighborIp) {
		toSerialize["neighborIp"] = o.NeighborIp
	}
	if !isNil(o.IpVersion) {
		toSerialize["ipVersion"] = o.IpVersion
	}
	if !isNil(o.RemoteAsNumber) {
		toSerialize["remoteAsNumber"] = o.RemoteAsNumber
	}
	if !isNil(o.EbgpHoldTimer) {
		toSerialize["ebgpHoldTimer"] = o.EbgpHoldTimer
	}
	if !isNil(o.EbgpMultihop) {
		toSerialize["ebgpMultihop"] = o.EbgpMultihop
	}
	if !isNil(o.SourceIp) {
		toSerialize["sourceIp"] = o.SourceIp
	}
	if !isNil(o.PathPrepend) {
		toSerialize["pathPrepend"] = o.PathPrepend
	}
	if !isNil(o.MultiExitDiscriminator) {
		toSerialize["multiExitDiscriminator"] = o.MultiExitDiscriminator
	}
	if !isNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor struct {
	value *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor
	isSet bool
}

func (v NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) Get() *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor {
	return v.value
}

func (v *NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) Set(val *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor(val *OrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) *NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor {
	return &NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor{value: val, isSet: true}
}

func (v NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationsOrganizationIdApplianceVpnThirdPartyVPNPeersEbgpNeighbor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


