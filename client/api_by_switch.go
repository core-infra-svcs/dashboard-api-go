/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 01 June, 2022 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// BySwitchApiService BySwitchApi service
type BySwitchApiService service

type BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest struct {
	ctx _context.Context
	ApiService *BySwitchApiService
	organizationId string
	perPage *int32
	startingAfter *string
	endingBefore *string
	configurationUpdatedAfter *string
	networkIds *[]string
	name *string
	mac *string
	serial *string
	serials *[]string
	macs *[]string
}

// The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) PerPage(perPage int32) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.perPage = &perPage
	return r
}
// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) StartingAfter(startingAfter string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.startingAfter = &startingAfter
	return r
}
// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) EndingBefore(endingBefore string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.endingBefore = &endingBefore
	return r
}
// Optional parameter to filter results by switches where the configuration has been updated after the given timestamp
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) ConfigurationUpdatedAfter(configurationUpdatedAfter string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.configurationUpdatedAfter = &configurationUpdatedAfter
	return r
}
// Optional parameter to filter switchports by network.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) NetworkIds(networkIds []string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.networkIds = &networkIds
	return r
}
// Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) Name(name string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.name = &name
	return r
}
// Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) Mac(mac string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.mac = &mac
	return r
}
// Optional parameter to filter switchports belonging to switches by serial number.  All returned switches will have a serial number that contains the search term or is an exact match.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) Serial(serial string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.serial = &serial
	return r
}
// Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) Serials(serials []string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.serials = &serials
	return r
}
// Optional parameter to filter switchports by one or more  MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) Macs(macs []string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	r.macs = &macs
	return r
}

func (r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.GetOrganizationSwitchPortsBySwitchExecute(r)
}

/*
GetOrganizationSwitchPortsBySwitch List the switchports in an organization by switch

List the switchports in an organization by switch

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId
 @return BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest
*/
func (a *BySwitchApiService) GetOrganizationSwitchPortsBySwitch(ctx _context.Context, organizationId string) BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest {
	return BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *BySwitchApiService) GetOrganizationSwitchPortsBySwitchExecute(r BySwitchApiApiGetOrganizationSwitchPortsBySwitchRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BySwitchApiService.GetOrganizationSwitchPortsBySwitch")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organizationId}/switch/ports/bySwitch"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", _neturl.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("perPage", parameterToString(*r.perPage, ""))
	}
	if r.startingAfter != nil {
		localVarQueryParams.Add("startingAfter", parameterToString(*r.startingAfter, ""))
	}
	if r.endingBefore != nil {
		localVarQueryParams.Add("endingBefore", parameterToString(*r.endingBefore, ""))
	}
	if r.configurationUpdatedAfter != nil {
		localVarQueryParams.Add("configurationUpdatedAfter", parameterToString(*r.configurationUpdatedAfter, ""))
	}
	if r.networkIds != nil {
		localVarQueryParams.Add("networkIds", parameterToString(*r.networkIds, "csv"))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.mac != nil {
		localVarQueryParams.Add("mac", parameterToString(*r.mac, ""))
	}
	if r.serial != nil {
		localVarQueryParams.Add("serial", parameterToString(*r.serial, ""))
	}
	if r.serials != nil {
		localVarQueryParams.Add("serials", parameterToString(*r.serials, "csv"))
	}
	if r.macs != nil {
		localVarQueryParams.Add("macs", parameterToString(*r.macs, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["meraki_api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Cisco-Meraki-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
