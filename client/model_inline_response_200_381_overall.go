/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 04 June, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.59.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200381Overall The overall CPU usage of the wireless LAN controller
type InlineResponse200381Overall struct {
	Usage *InlineResponse200381OverallUsage `json:"usage,omitempty"`
}

// NewInlineResponse200381Overall instantiates a new InlineResponse200381Overall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200381Overall() *InlineResponse200381Overall {
	this := InlineResponse200381Overall{}
	return &this
}

// NewInlineResponse200381OverallWithDefaults instantiates a new InlineResponse200381Overall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200381OverallWithDefaults() *InlineResponse200381Overall {
	this := InlineResponse200381Overall{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *InlineResponse200381Overall) GetUsage() InlineResponse200381OverallUsage {
	if o == nil || isNil(o.Usage) {
		var ret InlineResponse200381OverallUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200381Overall) GetUsageOk() (*InlineResponse200381OverallUsage, bool) {
	if o == nil || isNil(o.Usage) {
    return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *InlineResponse200381Overall) HasUsage() bool {
	if o != nil && !isNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given InlineResponse200381OverallUsage and assigns it to the Usage field.
func (o *InlineResponse200381Overall) SetUsage(v InlineResponse200381OverallUsage) {
	o.Usage = &v
}

func (o InlineResponse200381Overall) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200381Overall struct {
	value *InlineResponse200381Overall
	isSet bool
}

func (v NullableInlineResponse200381Overall) Get() *InlineResponse200381Overall {
	return v.value
}

func (v *NullableInlineResponse200381Overall) Set(val *InlineResponse200381Overall) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200381Overall) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200381Overall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200381Overall(val *InlineResponse200381Overall) *NullableInlineResponse200381Overall {
	return &NullableInlineResponse200381Overall{value: val, isSet: true}
}

func (v NullableInlineResponse200381Overall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200381Overall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


