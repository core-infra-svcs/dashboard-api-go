/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 August, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.61.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200345Bandwidth A breakdown of the average speed of data that has passed through this port during the interval.
type InlineResponse200345Bandwidth struct {
	Usage *InlineResponse200345BandwidthUsage `json:"usage,omitempty"`
}

// NewInlineResponse200345Bandwidth instantiates a new InlineResponse200345Bandwidth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200345Bandwidth() *InlineResponse200345Bandwidth {
	this := InlineResponse200345Bandwidth{}
	return &this
}

// NewInlineResponse200345BandwidthWithDefaults instantiates a new InlineResponse200345Bandwidth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200345BandwidthWithDefaults() *InlineResponse200345Bandwidth {
	this := InlineResponse200345Bandwidth{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *InlineResponse200345Bandwidth) GetUsage() InlineResponse200345BandwidthUsage {
	if o == nil || isNil(o.Usage) {
		var ret InlineResponse200345BandwidthUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200345Bandwidth) GetUsageOk() (*InlineResponse200345BandwidthUsage, bool) {
	if o == nil || isNil(o.Usage) {
    return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *InlineResponse200345Bandwidth) HasUsage() bool {
	if o != nil && !isNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given InlineResponse200345BandwidthUsage and assigns it to the Usage field.
func (o *InlineResponse200345Bandwidth) SetUsage(v InlineResponse200345BandwidthUsage) {
	o.Usage = &v
}

func (o InlineResponse200345Bandwidth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200345Bandwidth struct {
	value *InlineResponse200345Bandwidth
	isSet bool
}

func (v NullableInlineResponse200345Bandwidth) Get() *InlineResponse200345Bandwidth {
	return v.value
}

func (v *NullableInlineResponse200345Bandwidth) Set(val *InlineResponse200345Bandwidth) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200345Bandwidth) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200345Bandwidth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200345Bandwidth(val *InlineResponse200345Bandwidth) *NullableInlineResponse200345Bandwidth {
	return &NullableInlineResponse200345Bandwidth{value: val, isSet: true}
}

func (v NullableInlineResponse200345Bandwidth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200345Bandwidth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


