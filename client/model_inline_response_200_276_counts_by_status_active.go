/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 03 April, 2024 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200276CountsByStatusActive The count data for active ports
type InlineResponse200276CountsByStatusActive struct {
	// The total number of active ports
	Total *int32 `json:"total,omitempty"`
	ByMediaAndLinkSpeed *InlineResponse200276CountsByStatusActiveByMediaAndLinkSpeed `json:"byMediaAndLinkSpeed,omitempty"`
}

// NewInlineResponse200276CountsByStatusActive instantiates a new InlineResponse200276CountsByStatusActive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200276CountsByStatusActive() *InlineResponse200276CountsByStatusActive {
	this := InlineResponse200276CountsByStatusActive{}
	return &this
}

// NewInlineResponse200276CountsByStatusActiveWithDefaults instantiates a new InlineResponse200276CountsByStatusActive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200276CountsByStatusActiveWithDefaults() *InlineResponse200276CountsByStatusActive {
	this := InlineResponse200276CountsByStatusActive{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *InlineResponse200276CountsByStatusActive) GetTotal() int32 {
	if o == nil || isNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200276CountsByStatusActive) GetTotalOk() (*int32, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *InlineResponse200276CountsByStatusActive) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *InlineResponse200276CountsByStatusActive) SetTotal(v int32) {
	o.Total = &v
}

// GetByMediaAndLinkSpeed returns the ByMediaAndLinkSpeed field value if set, zero value otherwise.
func (o *InlineResponse200276CountsByStatusActive) GetByMediaAndLinkSpeed() InlineResponse200276CountsByStatusActiveByMediaAndLinkSpeed {
	if o == nil || isNil(o.ByMediaAndLinkSpeed) {
		var ret InlineResponse200276CountsByStatusActiveByMediaAndLinkSpeed
		return ret
	}
	return *o.ByMediaAndLinkSpeed
}

// GetByMediaAndLinkSpeedOk returns a tuple with the ByMediaAndLinkSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200276CountsByStatusActive) GetByMediaAndLinkSpeedOk() (*InlineResponse200276CountsByStatusActiveByMediaAndLinkSpeed, bool) {
	if o == nil || isNil(o.ByMediaAndLinkSpeed) {
    return nil, false
	}
	return o.ByMediaAndLinkSpeed, true
}

// HasByMediaAndLinkSpeed returns a boolean if a field has been set.
func (o *InlineResponse200276CountsByStatusActive) HasByMediaAndLinkSpeed() bool {
	if o != nil && !isNil(o.ByMediaAndLinkSpeed) {
		return true
	}

	return false
}

// SetByMediaAndLinkSpeed gets a reference to the given InlineResponse200276CountsByStatusActiveByMediaAndLinkSpeed and assigns it to the ByMediaAndLinkSpeed field.
func (o *InlineResponse200276CountsByStatusActive) SetByMediaAndLinkSpeed(v InlineResponse200276CountsByStatusActiveByMediaAndLinkSpeed) {
	o.ByMediaAndLinkSpeed = &v
}

func (o InlineResponse200276CountsByStatusActive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !isNil(o.ByMediaAndLinkSpeed) {
		toSerialize["byMediaAndLinkSpeed"] = o.ByMediaAndLinkSpeed
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200276CountsByStatusActive struct {
	value *InlineResponse200276CountsByStatusActive
	isSet bool
}

func (v NullableInlineResponse200276CountsByStatusActive) Get() *InlineResponse200276CountsByStatusActive {
	return v.value
}

func (v *NullableInlineResponse200276CountsByStatusActive) Set(val *InlineResponse200276CountsByStatusActive) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200276CountsByStatusActive) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200276CountsByStatusActive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200276CountsByStatusActive(val *InlineResponse200276CountsByStatusActive) *NullableInlineResponse200276CountsByStatusActive {
	return &NullableInlineResponse200276CountsByStatusActive{value: val, isSet: true}
}

func (v NullableInlineResponse200276CountsByStatusActive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200276CountsByStatusActive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


