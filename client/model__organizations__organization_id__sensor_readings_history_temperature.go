/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 07 June, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.34.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// OrganizationsOrganizationIdSensorReadingsHistoryTemperature Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
type OrganizationsOrganizationIdSensorReadingsHistoryTemperature struct {
	// Temperature reading in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
	// Temperature reading in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
}

// NewOrganizationsOrganizationIdSensorReadingsHistoryTemperature instantiates a new OrganizationsOrganizationIdSensorReadingsHistoryTemperature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationsOrganizationIdSensorReadingsHistoryTemperature() *OrganizationsOrganizationIdSensorReadingsHistoryTemperature {
	this := OrganizationsOrganizationIdSensorReadingsHistoryTemperature{}
	return &this
}

// NewOrganizationsOrganizationIdSensorReadingsHistoryTemperatureWithDefaults instantiates a new OrganizationsOrganizationIdSensorReadingsHistoryTemperature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationsOrganizationIdSensorReadingsHistoryTemperatureWithDefaults() *OrganizationsOrganizationIdSensorReadingsHistoryTemperature {
	this := OrganizationsOrganizationIdSensorReadingsHistoryTemperature{}
	return &this
}

// GetFahrenheit returns the Fahrenheit field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) GetFahrenheit() float32 {
	if o == nil || isNil(o.Fahrenheit) {
		var ret float32
		return ret
	}
	return *o.Fahrenheit
}

// GetFahrenheitOk returns a tuple with the Fahrenheit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) GetFahrenheitOk() (*float32, bool) {
	if o == nil || isNil(o.Fahrenheit) {
    return nil, false
	}
	return o.Fahrenheit, true
}

// HasFahrenheit returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) HasFahrenheit() bool {
	if o != nil && !isNil(o.Fahrenheit) {
		return true
	}

	return false
}

// SetFahrenheit gets a reference to the given float32 and assigns it to the Fahrenheit field.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) SetFahrenheit(v float32) {
	o.Fahrenheit = &v
}

// GetCelsius returns the Celsius field value if set, zero value otherwise.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) GetCelsius() float32 {
	if o == nil || isNil(o.Celsius) {
		var ret float32
		return ret
	}
	return *o.Celsius
}

// GetCelsiusOk returns a tuple with the Celsius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) GetCelsiusOk() (*float32, bool) {
	if o == nil || isNil(o.Celsius) {
    return nil, false
	}
	return o.Celsius, true
}

// HasCelsius returns a boolean if a field has been set.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) HasCelsius() bool {
	if o != nil && !isNil(o.Celsius) {
		return true
	}

	return false
}

// SetCelsius gets a reference to the given float32 and assigns it to the Celsius field.
func (o *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) SetCelsius(v float32) {
	o.Celsius = &v
}

func (o OrganizationsOrganizationIdSensorReadingsHistoryTemperature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Fahrenheit) {
		toSerialize["fahrenheit"] = o.Fahrenheit
	}
	if !isNil(o.Celsius) {
		toSerialize["celsius"] = o.Celsius
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature struct {
	value *OrganizationsOrganizationIdSensorReadingsHistoryTemperature
	isSet bool
}

func (v NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature) Get() *OrganizationsOrganizationIdSensorReadingsHistoryTemperature {
	return v.value
}

func (v *NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature) Set(val *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature(val *OrganizationsOrganizationIdSensorReadingsHistoryTemperature) *NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature {
	return &NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature{value: val, isSet: true}
}

func (v NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationsOrganizationIdSensorReadingsHistoryTemperature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


